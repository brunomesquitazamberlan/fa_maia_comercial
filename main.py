import time
from datetime import datetime
from typing import Dict, Any, Optional
import json
import traceback

import functools

from dotenv import load_dotenv
import os

import uuid

import httpx

import requests

import re

import base64

import logging
import tiktoken

import json

from fastapi import FastAPI, APIRouter
from fastapi.responses import JSONResponse
from fastapi import Request
from fastapi import HTTPException

from langgraph.graph.message import add_messages
from langchain_core.messages import HumanMessage, SystemMessage, AIMessage, ToolMessage, BaseMessage
from langgraph.graph import StateGraph, START, END
from langgraph.prebuilt import tools_condition
from langgraph.prebuilt import ToolNode
from langgraph.errors import NodeInterrupt
from langgraph.checkpoint.memory import MemorySaver
from langgraph.checkpoint.memory import InMemorySaver
from langchain_openai import ChatOpenAI

import openai

import unicodedata

from contextlib import asynccontextmanager
from pydantic import BaseModel, Field
from typing import TypedDict, Dict, List, Optional, Annotated, Literal, Union

import asyncio
import aiohttp  # Para requisi√ß√µes HTTP ass√≠ncronas

from functools import partial

from functools import wraps

from fastapi.responses import ORJSONResponse

from langgraph.graph import StateGraph


import pytz
from datetime import timezone, timedelta, datetime
from dateutil import parser
import time
from datetime import datetime, timedelta
import pytz

import re

from apscheduler.schedulers.background import BackgroundScheduler

import pandas as pd



# Carrega as vari√°veis de ambiente
load_dotenv()

# Contexto para funcionamento da inst√¢ncia
ADMIN_NUMBER = os.getenv('ADMIN_NUMBER')

NOME_ASSISTENTE = os.getenv("NOME_ASSISTENTE", None)

BUSINESS_CONTEXT = ""

FLOW_TO_INTENTION_MAP = {'aniversarios': 'Indefinido'}

SPECIFIC_INFORMATION_LIST = []

client = openai.OpenAI(
    api_key=os.getenv("MARITACA_API_KEY", None),  # Substitua pela sua API Key
    base_url="https://chat.maritaca.ai/api",
)


# Fun√ß√µes para o Apscheduler
def start_apscheduler():
    """Inicia o scheduler de tarefas"""
    
    scheduler = BackgroundScheduler(timezone='America/Sao_Paulo')
    
    try:
        if not scheduler.running:
            scheduler.start()
            print("üöÄ Scheduler iniciado com sucesso!")
            
            # ‚úÖ ADICIONAR ESTA LINHA:
            return scheduler  # ‚Üê Para poder salvar no app.state
            
    except Exception as e:
        print(f"‚ùå Erro ao iniciar scheduler: {str(e)}")
        return None

# Valida√ß√£o de seguran√ßa
if not ADMIN_NUMBER:
    print("‚ö†Ô∏è AVISO: ADMIN_NUMBER n√£o configurado no .env - alertas de erro n√£o funcionar√£o!")
    ADMIN_NUMBER = None

def generate_uuid():
    """
    Gera um UUID (Universally Unique Identifier) no formato padr√£o.
    Retorna:
        str: Uma string representando o UUID gerado.
    """
    novo_uuid = uuid.uuid4()  # Gera um UUID aleat√≥rio
    return str(novo_uuid)

# Fun√ß√µes para os envios de mensagens (auxiliares ou fun√ß√µes diretas)

async def send_ai_message(
    phone_number: str,  # Mudado de int para str
    message: str,
    http_client: aiohttp.ClientSession
) -> Dict[str, Any]:

    instance_name = os.getenv("WHATSAPP_API_INSTANCE")
    api_key = os.getenv("WHATSAPP_API_TOKEN")
    push_name = os.getenv("AGENT_NAME")
    url = os.getenv("CHAT_SEND_ENDPOINT")

    async def send_track_message(
    phone_number: str,  # Mudado de int para str
    message: str, 
    instance_name: str, 
    api_key: str, 
    message_type: str, 
    push_name: str, 
    url: str,
    http_client: aiohttp.ClientSession
) -> Dict[str, Any]:
        
        send_url = url
        
        headers = {
            'accept': 'application/json',
            'Content-Type': 'application/json'
        }
        
        data = {
            "instance_name": instance_name,
            "evolution_api_key": api_key,
            "phone_number": phone_number,
            "message": message,
            "type": message_type,
            "push_name": push_name
        }
        
        try:
            # Use o cliente compartilhado
            async with http_client.post(send_url, headers=headers, json=data) as response:
                response.raise_for_status()
                return {
                    "status_code": response.status,
                    "response": await response.json()
                }
        except aiohttp.ClientResponseError as e:
            return {
                "error": f"Erro HTTP: {e.status} - {str(e)}"
            }
        except Exception as e:
            return {
                "error": f"Erro de conex√£o: {str(e)}"
            }

    # Verificar se todos os par√¢metros necess√°rios est√£o dispon√≠veis
    if not all([instance_name, api_key, phone_number, message, url]):
        missing = []
        if not instance_name: missing.append("WHATSAPP_API_INSTANCE")
        if not api_key: missing.append("WHATSAPP_API_TOKEN")
        if not push_name: missing.append("AGENT_NAME")
        if not url: missing.append("CHAT_SEND_ENDPOINT")
        if not phone_number: missing.append("phone_number")
        if not message: missing.append("message")
        
        error_msg = f"Par√¢metros ausentes: {', '.join(missing)}"
        print(f"‚≠ê ERRO em send_ai_message: {error_msg}")
        return {"error": error_msg}
    
    try:
        result = await send_track_message(
            phone_number=phone_number,
            message=message,
            instance_name=os.getenv("WHATSAPP_API_INSTANCE"),      
            api_key=os.getenv("WHATSAPP_API_TOKEN"),           
            message_type="AIMessage",
            push_name=os.getenv("AGENT_NAME"),
            url=os.getenv("CHAT_SEND_ENDPOINT"),
            http_client=http_client  # Passe o cliente HTTP
        )
        return result
    except Exception as e:
        print(f"‚≠ê ERRO em send_ai_message: {e}")
        return {"error": str(e)}

async def send_system_message(
    phone_number: str,
    message: str,
    http_client: aiohttp.ClientSession
) -> Dict[str, Any]:
    """
    Envia SystemMessage direto para o webhook interno (n√£o para WhatsApp)
    Evita loop infinito indo direto para o webhook ao inv√©s do /send
    """
    
    # Usar o endpoint do webhook diretamente
    base_url = os.getenv("CHAT_SEND_ENDPOINT", "").replace("/send", "")
    webhook_url = f"{base_url}/webhook"
    
    # Ou usar vari√°vel espec√≠fica se preferir
    # webhook_url = os.getenv("WEBHOOK_INTERNAL_ENDPOINT", "http://localhost:8000/webhook")
    
    headers = {
        'accept': 'application/json',
        'Content-Type': 'application/json'
    }
    
    # Simular payload do webhook para SystemMessage
    # Formato id√™ntico ao que o WhatsApp enviaria
    data = {
        "event": "send.message",  # Simular evento de envio do sistema
        "instance": os.getenv("WHATSAPP_API_INSTANCE"),
        "data": {
            "pushName": "Sistema",  # Nome fixo para SystemMessages
            "key": {
                "remoteJid": f"{phone_number}@s.whatsapp.net",
                "fromMe": True  # True porque √© mensagem do sistema
            },
            "message": {
                "conversation": message,
                "type": "SystemMessage"  # Identificador adicional
            }
        },
        "type": "SystemMessage"  # Identificador no n√≠vel raiz do payload
    }
    
    print(f"[send_system_message] üì§ Enviando para webhook: {webhook_url}")
    print(f"[send_system_message] üì± Phone: {phone_number}")
    print(f"[send_system_message] üí¨ Message: {message[:50]}...")
    
    try:
        print(f"[SEND-SYSTEM-DEBUG] üì¶ Payload COMPLETO que ser√° enviado:")
        print(f"[SEND-SYSTEM-DEBUG] {json.dumps(data, indent=2)}")
        async with http_client.post(webhook_url, headers=headers, json=data) as response:
            response.raise_for_status()
            result = await response.json()
            
            print(f"[send_system_message] ‚úÖ SystemMessage enviada com sucesso")
            return {
                "status_code": response.status,
                "response": result,
                "message_type": "SystemMessage",
                "sent_to_webhook": True
            }
            
    except aiohttp.ClientResponseError as e:
        error_msg = f"Erro HTTP no webhook: {e.status} - {str(e)}"
        print(f"[send_system_message] ‚ùå {error_msg}")
        return {"error": error_msg}
        
    except Exception as e:
        error_msg = f"Erro ao enviar SystemMessage para webhook: {str(e)}"
        print(f"[send_system_message] ‚ùå {error_msg}")
        return {"error": error_msg}

def send_base64_image(url_api_whatsapp, instancia, api_key, numero, caminho_imagem, legenda="", delay=0, presence="composing"):
    """
    Envia uma imagem via EvolutionAPI usando base64
    
    Args:
        servidor (str): URL do servidor EvolutionAPI
        instancia (str): Nome da inst√¢ncia configurada
        api_key (str): Chave de API para autentica√ß√£o
        numero (str): N√∫mero do destinat√°rio com c√≥digo do pa√≠s
        caminho_imagem (str): Caminho local ou URL da imagem
        legenda (str, opcional): Legenda da imagem
        delay (int, opcional): Atraso em milissegundos
        presence (str, opcional): Status de presen√ßa (composing, recording)
        
    Returns:
        dict: Resposta da API
    """
    # Configura a URL e cabe√ßalhos
    url = f"{url_api_whatsapp}/message/sendMedia/{instancia}"
    headers = {
        "Content-Type": "application/json",
        "apikey": api_key
    }
    
    # Determina se o caminho √© uma URL ou arquivo local
    if caminho_imagem.startswith('http'):
        # Baixa a imagem da URL
        try:
            print(f"Baixando imagem da URL: {caminho_imagem}")
            response = requests.get(caminho_imagem, timeout=10)
            if response.status_code != 200:
                print(f"Erro ao baixar imagem: {response.status_code}")
                return None
            imagem_binaria = response.content
            print(f"Imagem baixada com sucesso: {len(imagem_binaria)} bytes")
        except Exception as e:
            print(f"Exce√ß√£o ao baixar imagem: {str(e)}")
            return None
    else:
        # L√™ a imagem do arquivo local
        try:
            print(f"Carregando imagem do arquivo local: {caminho_imagem}")
            with open(caminho_imagem, 'rb') as file:
                imagem_binaria = file.read()
            print(f"Imagem carregada com sucesso: {len(imagem_binaria)} bytes")
        except Exception as e:
            print(f"Erro ao ler arquivo de imagem: {str(e)}")
            return None
    
    # Converte para base64
    try:
        b64_imagem = base64.b64encode(imagem_binaria).decode('utf-8')
    except Exception as e:
        print(f"Erro ao converter para base64: {str(e)}")
        return None
    
    # Prepara os dados - envia apenas a string base64
    payload = {
        "number": numero,
        "mediatype": "image",
        "media": b64_imagem,  # N√£o imprimimos esta vari√°vel em logs
        "caption": legenda,
        "delay": delay,
        "presence": presence,
    }
    
    # Log simplificado do payload, omitindo o conte√∫do base64
    log_payload = payload.copy()
    if "media" in log_payload:
        log_payload["media"] = f"[BASE64_STRING_{len(b64_imagem)}_chars]"
    print(f"Enviando payload: {log_payload}")
    
    # Realiza a requisi√ß√£o
    response = requests.post(url, headers=headers, data=json.dumps(payload))
    
    # Verifica se a requisi√ß√£o foi bem-sucedida
    if response.status_code == 200 or response.status_code == 201:
        print(f"Imagem enviada com sucesso para {numero}")
        return response.json()
    else:
        print(f"Erro ao enviar imagem: {response.status_code}")
        print(response.text)
        return None

async def send_base64_image_async(
    url_api_whatsapp: str, 
    instancia: str, 
    api_key: str, 
    numero: str, 
    caminho_imagem: str, 
    legenda: str = "", 
    delay: int = 0, 
    presence: str = "composing",
    http_client: Optional[aiohttp.ClientSession] = None,
    # üÜï PAR√ÇMETROS PARA FLUXO DE ATIVA√á√ÉO (igual ao /send)
    app_state = None,
    is_activation_flow: bool = False,
    flow_name: str = None
) -> Optional[dict]:
    """
    Vers√£o ASYNC da fun√ß√£o de envio de imagem com suporte a fluxo de ativa√ß√£o
    
    SEGUE A MESMA L√ìGICA DO /send:
    1. Detecta se √© fluxo de ativa√ß√£o
    2. Salva no cache antes de enviar
    3. Envia a imagem
    4. Webhook detecta pelo cache
    """
    
    print(f"[ASYNC_IMAGE] üì∏ Iniciando envio de imagem")
    print(f"[ASYNC_IMAGE] üì± N√∫mero: {numero}")
    print(f"[ASYNC_IMAGE] üñºÔ∏è Caminho: {caminho_imagem}")
    print(f"[ASYNC_IMAGE] üéØ Tipo de fluxo: {'ATIVA√á√ÉO' if is_activation_flow else 'NORMAL'}")
    
    # ===== L√ìGICA DE ATIVA√á√ÉO (IGUAL AO /send) =====
    if is_activation_flow:
        print(f"[ASYNC_IMAGE] üìã Flow Name: {flow_name}")
        
        if app_state:
            # üåå CACHE PARA DOMINA√á√ÉO GAL√ÅCTICA (igual ao /send)
            cache_key = f"{numero}_{int(time.time())}"
            app_state.activation_cache[cache_key] = flow_name
            print(f"[ASYNC_IMAGE] üéØ Cache: {cache_key} = {flow_name}")
        else:
            print(f"[ASYNC_IMAGE] ‚ö†Ô∏è app_state n√£o fornecido - cache n√£o salvo")
    
    # Configura a URL e cabe√ßalhos
    base_url = url_api_whatsapp.replace(f"/message/sendText/{instancia}", "")
    url = f"{base_url}/message/sendMedia/{instancia}"
    headers = {
        "Content-Type": "application/json",
        "apikey": api_key
    }
    
    # Verificar se temos um cliente HTTP, sen√£o criar um tempor√°rio
    usar_cliente_temporario = http_client is None
    if usar_cliente_temporario:
        print(f"[ASYNC_IMAGE] ‚ö†Ô∏è Criando cliente HTTP tempor√°rio")
        http_client = aiohttp.ClientSession()
    
    try:
        # ===== DOWNLOAD/CARREGAMENTO DA IMAGEM =====
        if caminho_imagem.startswith('http'):
            # Baixa a imagem da URL
            print(f"[ASYNC_IMAGE] üåê Baixando imagem da URL: {caminho_imagem}")
            
            try:
                async with http_client.get(caminho_imagem, timeout=aiohttp.ClientTimeout(total=10)) as response:
                    if response.status != 200:
                        print(f"[ASYNC_IMAGE] ‚ùå Erro ao baixar imagem: HTTP {response.status}")
                        return None
                    
                    imagem_binaria = await response.read()
                    print(f"[ASYNC_IMAGE] ‚úÖ Imagem baixada: {len(imagem_binaria)} bytes")
                    
            except Exception as e:
                print(f"[ASYNC_IMAGE] ‚ùå Exce√ß√£o ao baixar imagem: {str(e)}")
                return None
        else:
            # L√™ a imagem do arquivo local
            print(f"[ASYNC_IMAGE] üìÅ Carregando imagem do arquivo local: {caminho_imagem}")
            
            try:
                with open(caminho_imagem, 'rb') as file:
                    imagem_binaria = file.read()
                print(f"[ASYNC_IMAGE] ‚úÖ Imagem carregada: {len(imagem_binaria)} bytes")
            except Exception as e:
                print(f"[ASYNC_IMAGE] ‚ùå Erro ao ler arquivo: {str(e)}")
                return None
        
        # ===== CONVERS√ÉO PARA BASE64 =====
        try:
            b64_imagem = base64.b64encode(imagem_binaria).decode('utf-8')
            print(f"[ASYNC_IMAGE] üîê Base64 gerado: {len(b64_imagem)} caracteres")
        except Exception as e:
            print(f"[ASYNC_IMAGE] ‚ùå Erro ao converter para base64: {str(e)}")
            return None
        
        # ===== PREPARAR PAYLOAD =====
        payload = {
            "number": numero,
            "mediatype": "image",
            "media": b64_imagem,
            "caption": legenda,
            "delay": delay,
            "presence": presence,
        }
        
        # Log simplificado do payload
        log_payload = payload.copy()
        log_payload["media"] = f"[BASE64_STRING_{len(b64_imagem)}_chars]"
        print(f"[ASYNC_IMAGE] üì¶ Payload preparado: {log_payload}")
        
        # ===== ENVIO DA IMAGEM =====
        print(f"[ASYNC_IMAGE] üöÄ Enviando para: {url}")
        
        try:
            async with http_client.post(
                url, 
                headers=headers, 
                data=json.dumps(payload),
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                response_status = response.status
                print(f"[ASYNC_IMAGE] üì° Status da resposta: {response_status}")
                
                # Verifica se a requisi√ß√£o foi bem-sucedida
                if response_status in [200, 201]:
                    try:
                        response_data = await response.json()
                        print(f"[ASYNC_IMAGE] ‚úÖ Imagem enviada com sucesso para {numero}")
                        
                        # ===== LOG PARA FLUXO DE ATIVA√á√ÉO =====
                        if is_activation_flow:
                            print(f"[ASYNC_IMAGE] üéØ Imagem de ativa√ß√£o enviada")
                            print(f"[ASYNC_IMAGE] üìã Flow: {flow_name}")
                            print(f"[ASYNC_IMAGE] üìù Legenda: {legenda[:50]}...")
                        
                        return response_data
                        
                    except json.JSONDecodeError:
                        # Fallback se n√£o for JSON v√°lido
                        response_text = await response.text()
                        print(f"[ASYNC_IMAGE] ‚úÖ Imagem enviada (resposta n√£o-JSON): {response_text}")
                        return {"status": "success", "response": response_text}
                else:
                    response_text = await response.text()
                    print(f"[ASYNC_IMAGE] ‚ùå Erro ao enviar imagem: {response_status}")
                    print(f"[ASYNC_IMAGE] ‚ùå Resposta: {response_text}")
                    return None
                    
        except Exception as e:
            print(f"[ASYNC_IMAGE] ‚ùå Exce√ß√£o no envio: {str(e)}")
            return None
    
    finally:
        # Fechar cliente tempor√°rio se foi criado aqui
        if usar_cliente_temporario:
            await http_client.close()
            print(f"[ASYNC_IMAGE] üîê Cliente HTTP tempor√°rio fechado")

async def send_presence(number: str, 
                       delay: int = 1200, 
                       presence: str = "composing",
                       base_url: Optional[str] = None,
                       api_key: Optional[str] = None,
                       instance: Optional[str] = None) -> Dict[Any, Any]:
    """
    Envia presen√ßa (status de digita√ß√£o, grava√ß√£o, etc.) para um contato via Evolution API
    
    Args:
        number (str): N√∫mero do telefone (formato: 5531999999999)
        delay (int): Tempo em milissegundos para manter a presen√ßa (padr√£o: 1200)
        presence (str): Tipo de presen√ßa - op√ß√µes:
                       - "composing" (digitando)
                       - "recording" (gravando √°udio)
                       - "paused" (pausado)
        base_url (str, optional): URL base da API (padr√£o: EVOLUTION_URL env var)
        api_key (str, optional): Chave da API (padr√£o: EVOLUTION_API_KEY env var)
        instance (str, optional): ID da inst√¢ncia (padr√£o: WHATSAPP_API_INSTANCE env var)
    
    Returns:
        Dict[Any, Any]: Resposta da API
    
    Raises:
        aiohttp.ClientError: Erro na requisi√ß√£o HTTP
        ValueError: Erro nos par√¢metros fornecidos
    """
    
    # Usa vari√°veis de ambiente como padr√£o
    base_url = base_url or os.getenv('EVOLUTION_URL')
    api_key = api_key or os.getenv('EVOLUTION_API_KEY')
    instance = instance or os.getenv('WHATSAPP_API_INSTANCE')
    
    # Valida√ß√£o b√°sica dos par√¢metros
    if not all([base_url, api_key, instance, number]):
        raise ValueError("Par√¢metros obrigat√≥rios n√£o fornecidos. Verifique as vari√°veis de ambiente EVOLUTION_URL, EVOLUTION_API_KEY e WHATSAPP_API_INSTANCE")
    
    # Monta a URL do endpoint
    url = f"{base_url.rstrip('/')}/chat/sendPresence/{instance}"
    
    # Headers da requisi√ß√£o
    headers = {
        'Content-Type': 'application/json',
        'apikey': api_key
    }
    
    # Corpo da requisi√ß√£o
    payload = {
        "number": number,
        "delay": delay,
        "presence": presence
    }
    
    # Timeout configurado
    timeout = aiohttp.ClientTimeout(total=30)
    
    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.post(url, headers=headers, json=payload) as response:
                
                # Verifica se a requisi√ß√£o foi bem-sucedida
                if response.status >= 400:
                    error_text = await response.text()
                    raise aiohttp.ClientError(f"Erro HTTP {response.status}: {error_text}")
                
                # Retorna a resposta como JSON
                return await response.json()
                
    except asyncio.TimeoutError:
        raise aiohttp.ClientError("Timeout: A requisi√ß√£o demorou muito para responder")
    except aiohttp.ClientConnectorError:
        raise aiohttp.ClientError("Erro de conex√£o com a API")
    except json.JSONDecodeError:
        raise aiohttp.ClientError("Erro ao decodificar a resposta JSON da API")


# Fun√ß√µes para defini√ß√µes dos grafos

def create_new_thread_graph_logging(http_client: aiohttp.ClientSession,
                            app_state: Any):

    class InputState(TypedDict):
        messages: Annotated[list, add_messages]
        name: str
        phone_number: str  # Mudado de int para str
        start_time: int
        thread_id: str
        message_timestamps: Dict[str, int]
        need_classify: bool
        structured_response: Optional[Dict[str, Any]]
        
    class GeneralState(TypedDict):
        messages: Annotated[list, add_messages]
        name: str
        phone_number: str  # Mudado de int para str
        status: str
        start_time: int
        last_update: str
        thread_id: str
        messages_count: int
        collected_data: Dict
        message_timestamps: Dict[str, int]
        classify_status: str
        need_classify: bool
        structured_response: Optional[Dict[str, Any]]
    
    async def start_or_update(state: InputState) -> InputState:
            """
            N√≥ inicial do grafo que configura ou atualiza o estado conforme necess√°rio.
            
            Args:
                state (InputState): O estado atual com os dados recebidos
                
            Returns:
                InputState: O estado atualizado com os campos inicializados
            """

            # Capturar timestamp atual uma vez
            current_time = int(time.time() * 1000)
            
            # ‚úÖ DEBUG ADICIONAL: Ver o que est√° chegando
            #print(f"[DEBUG-START] message_timestamps RECEBIDO: {state.get('message_timestamps', 'CAMPO_NAO_EXISTE')}")
            #print(f"[DEBUG-START] üîß ESTADO COMPLETO RECEBIDO: {list(state.keys())}")
            #print(f"[DEBUG-START] üîß classify_status no InputState: {state.get('classify_status', 'CAMPO_NAO_EXISTE')}")

            # Garantir que temos um campo 'messages' no estado
            if 'messages' not in state:
                state['messages'] = []
            
            # Verificar se √© a primeira execu√ß√£o (sem start_time)
            if 'start_time' not in state:
                state['start_time'] = current_time
            
            # Inicializar dados coletados
            if 'collected_data' not in state:
                state['collected_data'] = {}
            
            # ‚úÖ DEBUG: Verificar se message_timestamps existe
            if 'message_timestamps' not in state:
                #print(f"[DEBUG-START] Criando message_timestamps vazio")
                state['message_timestamps'] = {}
            else:
                print(f"[DEBUG-START] message_timestamps j√° existe: {state['message_timestamps']}")
            
            # Debug para entender o que est√° acontecendo
            #print(f"[DEBUG-START] Total de mensagens: {len(state['messages'])}")
            #print(f"[DEBUG-START] Timestamps existentes: {len(state.get('message_timestamps', {}))}")
            
            # ‚úÖ VERIFICAR SE H√Å MENSAGENS NOVAS PARA ADICIONAR TIMESTAMP
            new_messages_added = False
            
            # S√≥ adicionar timestamp para mensagens REALMENTE novas
            for message in state['messages']:
                message_id = message.id
                message_exists = message_id in state['message_timestamps']
                
                #print(f"[DEBUG-START] Mensagem {message_id[:8]}... j√° existe? {message_exists}")
                
                # S√≥ adiciona timestamp se a mensagem for realmente nova
                if not message_exists:
                    state['message_timestamps'][message_id] = current_time
                    new_messages_added = True
                    #print(f"[DEBUG-START] ‚úÖ Adicionado timestamp para {message_id[:8]}...")
                else:
                    print(f"[DEBUG-START] ‚è≠Ô∏è Pulando {message_id[:8]}... (j√° tem timestamp)")
            
            # Atualizar o contador de mensagens
            state['messages_count'] = len(state['messages'])
            
            # Sempre atualiza o timestamp de √∫ltima atualiza√ß√£o
            state['last_update'] = current_time

            # ‚úÖ VERIFICA√á√ÉO INTELIGENTE DO STATUS - CORRIGIDA PARA REABERTURA
            # üîß CORRE√á√ÉO: Verificar o status nos InputState primeiro, sen√£o pegar do estado existente
            current_classify_status = state.get('classify_status', None)
            
            # üîß ADICIONAR DEBUG DETALHADO
            #print(f"[DEBUG-START] Status da classifica√ß√£o recebido: {current_classify_status}")
            #print(f"[DEBUG-START] Novas mensagens adicionadas? {new_messages_added}")
            #print(f"[DEBUG-START] Total de mensagens no estado: {len(state.get('messages', []))}")
            
            # üîß L√ìGICA CORRIGIDA: Determinar o status baseado na situa√ß√£o atual
            if current_classify_status is None:
                # Primeira execu√ß√£o - nova conversa
                state['classify_status'] = 'opened'
                #print(f"[DEBUG-START] üÜï NOVA CONVERSA - Definindo como 'opened'")
            elif current_classify_status == 'classified' and new_messages_added:
                # üéØ REABERTURA: Conversa classificada recebendo nova mensagem
                state['classify_status'] = 'opened'
                #print(f"[DEBUG-START] üîÑ REABRINDO CONVERSA - Era 'classified', nova mensagem recebida ‚Üí 'opened'")
            elif current_classify_status == 'opened' and new_messages_added:
                # Conversa j√° aberta recebendo nova mensagem - mant√©m aberta
                state['classify_status'] = 'opened'
                #print(f"[DEBUG-START] ‚û°Ô∏è CONTINUANDO CONVERSA ABERTA - Nova mensagem ‚Üí mant√©m 'opened'")
            elif current_classify_status == 'opened' and not new_messages_added:
                # Execu√ß√£o sem mensagens novas em conversa aberta - mant√©m aberta
                state['classify_status'] = 'opened'
                #print(f"[DEBUG-START] ‚û°Ô∏è EXECUTANDO SEM NOVA MENSAGEM - Mant√©m 'opened'")
            elif current_classify_status == 'classified' and not new_messages_added:
                # Execu√ß√£o sem mensagens novas em conversa classificada - mant√©m classificada
                state['classify_status'] = 'classified'
                #print(f"[DEBUG-START] üìã MANTENDO CLASSIFIED - Sem mensagens novas ‚Üí mant√©m 'classified'")
            else:
                # Fallback - for√ßa abertura
                state['classify_status'] = 'opened'
                print(f"[DEBUG-START] ‚ùì FALLBACK - Status '{current_classify_status}' ‚Üí for√ßando 'opened'")
            
            print(f"[DEBUG-START] Status final da classifica√ß√£o: {state['classify_status']}")
            #print(f"[DEBUG-START] Timestamps finais: {len(state['message_timestamps'])}")
            #print(f"[DEBUG-START] IDs dos timestamps: {list(state['message_timestamps'].keys())}")
            
            return state

    async def check_combined_messages_node(state: GeneralState) -> GeneralState:
        """
        N√≥ que verifica se existem mensagens combinadas pendentes.
        
        Dois cen√°rios:
        1. Se detectar que a mensagem atual faz parte de uma mensagem combinada,
        interrompe o processamento.
        2. Se a mensagem atual √© uma mensagem combinada completa, substitui a mensagem
        parcial anterior no hist√≥rico.
        """
        
        # üîç ADICIONAR ESTE DEBUG AQUI:
        print(f"üîç LOGGING GRAPH DEBUG: State keys: {list(state.keys())}")
        print(f"üîç LOGGING GRAPH DEBUG: Phone presente: {'phone_number' in state}")
        print(f"üîç LOGGING GRAPH DEBUG: State completo: {state}")

        phone_number = state.get("phone_number", "PHONE_NOT_FOUND")
        print(f"üîç Phone extra√≠do: {phone_number}")
        
        if phone_number == "PHONE_NOT_FOUND":
            print(f"üö® ERRO: phone_number n√£o encontrado no estado!")
            return state  # Retorna sem processar


        # Garantir que temos mensagens no hist√≥rico
        if not state.get("messages") or len(state["messages"]) == 0:
            return state
        
        current_message = state["messages"][-1].content
        
        # Verificar se existe mensagem combinada para este n√∫mero
        has_combined = False
        is_combined_message = False  # Flag para indicar se esta √© a mensagem combinada completa
        combined_message = None
        
        if hasattr(app_state, 'combined_messages_status') and phone_number in app_state.combined_messages_status:
            combined_status = app_state.combined_messages_status[phone_number]
            has_combined = combined_status.get("has_combined_messages", False)
            combined_message = combined_status.get("combined_message", "")
            
            # Determinar se esta √© a mensagem combinada completa
            is_combined_message = has_combined and current_message == combined_message
        
        # Cen√°rio 1: Esta √© uma mensagem parcial que ser√° combinada
        if has_combined and not is_combined_message:
            print(f"[DEBUG-VERIFY] ‚õî INTERROMPENDO - Mensagem parcial detectada: '{current_message}'")
            print(f"[DEBUG-VERIFY] üîÑ Ser√° parte da mensagem combinada: '{combined_message}'")
            
            # Interromper o processamento - n√£o precisamos salvar estado
            # porque esta mensagem parcial ser√° substitu√≠da na pr√≥xima execu√ß√£o
            raise NodeInterrupt("partial_message_detected")
        
        # Cen√°rio 2: Esta √© a mensagem combinada completa
        if is_combined_message:
            print(f"[DEBUG-VERIFY] üîÑ Processando mensagem combinada: '{combined_message}'")
            
            # Verificar se temos pelo menos duas mensagens no hist√≥rico
            if len(state["messages"]) >= 2:
                # Obter a pen√∫ltima mensagem (a mensagem parcial)
                prev_message = state["messages"][-2].content
                
                # Verificar se a mensagem combinada inclui a mensagem parcial anterior
                if combined_message.startswith(prev_message + " "):
                    print(f"[DEBUG-VERIFY] üîç Mensagem parcial anterior: '{prev_message}'")
                    
                    # ‚úÖ ADICIONAR AQUI: Obter o ID da mensagem parcial antes de remov√™-la
                    removed_message_id = state["messages"][-2].id
                    
                    # Remover a mensagem parcial anterior do hist√≥rico
                    state["messages"].pop(-2)
                    
                    # ‚úÖ ADICIONAR AQUI: Remover o timestamp da mensagem parcial tamb√©m
                    if removed_message_id in state.get("message_timestamps", {}):
                        del state["message_timestamps"][removed_message_id]
                        print(f"[DEBUG-VERIFY] üóëÔ∏è Removido timestamp da mensagem parcial: {removed_message_id}")
                    
                    # Atualizar o contador de mensagens
                    state["messages_count"] = len(state["messages"])
                    
                    print(f"[DEBUG-VERIFY] ‚úÖ Removida mensagem parcial do hist√≥rico")
                    print(f"[DEBUG-VERIFY] üìä Hist√≥rico final: {[m.content for m in state['messages']]}")
        
        # Para qualquer outro caso, continuar normalmente
        return state

    async def check_conversation_status(state: GeneralState) -> GeneralState:
        """
        Determina se a conversa est√° aberta e define o status de classifica√ß√£o.
        """
        current_time = int(time.time() * 1000)
        message_timestamps = state.get('message_timestamps', {})
        
        need_classify = state.get('need_classify', False)
        print(f"Need Classify?: {need_classify}")

        if not message_timestamps:
            # Se n√£o h√° timestamps, considerar como classificada
            state['classify_status'] = 'classified'
            return state
        
        # Pegar o timestamp mais recente
        latest_timestamp = max(message_timestamps.values())
        
        # Calcular diferen√ßa (1 hora = 3600000 ms)
        time_diff = current_time - latest_timestamp
        ONE_HOUR_MS = 3600000
        
        # Determinar status
        if time_diff < ONE_HOUR_MS:
            state['classify_status'] = 'opened'
        else:
            state['classify_status'] = 'classified'
        
        return state

    async def classify_conversation(state: GeneralState) -> GeneralState:
        """
        N√≥ que classifica conversa apenas quando necess√°rio.
        
        Este n√≥ sempre √© executado no fluxo, mas s√≥ efetivamente classifica
        a conversa quando a flag need_classify √© True (indicando que foi
        executado via time travel para classifica√ß√£o).
        
        Args:
            state (GeneralState): O estado atual da conversa
            
        Returns:
            GeneralState: O estado atualizado (com classify_status = 'classified' se necess√°rio)
        """
        need_classify = state.get('need_classify', False)
        thread_id = state.get('thread_id', 'unknown')
        phone_number = state.get('phone_number', 'unknown')
        
        if need_classify:
            # Classificar a conversa
            state['classify_status'] = 'classified'
            
            print(f"[CLASSIFY] üéØ Conversa classificada!")
            print(f"[CLASSIFY] üì± Phone: {phone_number}")
            print(f"[CLASSIFY] üßµ Thread: {thread_id}")
            print(f"[CLASSIFY] üè∑Ô∏è Status: opened ‚Üí classified")
            
            # Log adicional para debug
            messages_count = state.get('messages_count', 0)
            print(f"[CLASSIFY] üìä Total de mensagens na conversa: {messages_count}")
            
        else:
            # Execu√ß√£o normal - n√£o precisa classificar
            print(f"[CLASSIFY] ‚è≠Ô∏è Execu√ß√£o normal - need_classify=False")
            print(f"[CLASSIFY] üì± Phone: {phone_number}")
            print(f"[CLASSIFY] üè∑Ô∏è Status mantido: {state.get('classify_status', 'unknown')}")
        
        return state

    async def log_information(state: GeneralState) -> GeneralState:

        async def upsert_graph_info(
            phone_number: str, 
            data: Dict[str, Any], 
            http_client: aiohttp.ClientSession,  # Adicione o par√¢metro
            base_row_api_token: str = os.getenv("BASEROW_API_TOKEN"),
            table_id: int = os.getenv("BASEROW_GRAPH_TABLE_ID"),
            base_url: str = os.getenv("BASEROW_URL")
        ) -> Dict[str, Any]:
        
            # Verifica√ß√£o de par√¢metros
            if not base_row_api_token:
                raise ValueError("O token de API √© obrigat√≥rio")
            
            if not phone_number:
                raise ValueError("O n√∫mero de telefone √© obrigat√≥rio para o upsert")
            
            if not data or not isinstance(data, dict):
                raise ValueError("Os dados devem ser fornecidos como um dicion√°rio")
            
            # Configurar os cabe√ßalhos
            headers = {
                "Authorization": f"Token {base_row_api_token.strip()}",
                "Content-Type": "application/json"
            }
            
            start_time_func = time.time()
            
            # Preparar dados de atualiza√ß√£o com os nomes corretos dos campos
            update_data = {
                'phoneNumber': data.get('phoneNumber', phone_number),
                'thread_id': data.get('thread_id'),
                'start_timeTimestamp': data.get('start_time', data.get('start_timeTimestamp')),
                'last_updateTimestamp': data.get('last_update', data.get('last_updateTimestamp')),
                'intention': data.get('intention'),
                'collected_data': data.get('collected_data', '{}'),
                'message_timestamps': data.get('message_timestamps', {}),
                'messages_count': data.get('messages_count'),
                'classify_status': data.get('classify_status', 'opened')
            }
            
            # Remover chaves com valor None
            update_data = {k: v for k, v in update_data.items() if v is not None}
            
            try:
                # Buscar se o registro j√° existe usando o n√∫mero de telefone
                search_url = f"{base_url}/api/database/rows/table/{table_id}/?user_field_names=true&filter__phoneNumber__equal={phone_number}&filter__thread_id__equal={data.get('thread_id')}"
                
                async with http_client.get(search_url, headers=headers) as search_response:
                    search_response.raise_for_status()
                    search_result = await search_response.json()
                
                # Verificar se o registro existe
                if search_result.get('count', 0) > 0:
                    # Registro existe, atualizar
                    record_id = search_result['results'][0]['id']
                    update_url = f"{base_url}/api/database/rows/table/{table_id}/{record_id}/?user_field_names=true"
                    
                    async with http_client.patch(update_url, headers=headers, json=update_data) as response:
                        response.raise_for_status()
                        result = await response.json()
                        operation = "atualizado"
                else:
                    # Registro n√£o existe, inserir
                    insert_url = f"{base_url}/api/database/rows/table/{table_id}/?user_field_names=true"
                    
                    async with http_client.post(insert_url, headers=headers, json=update_data) as response:
                        response.raise_for_status()
                        result = await response.json()
                        operation = "inserido"
                
                end_time = time.time()
                processing_time = round((end_time - start_time_func) * 1000, 2)
                print(f"Registro {operation} para {phone_number} em {processing_time:.2f} ms")
                
                # Adicionar tempo de processamento e opera√ß√£o ao resultado
                if isinstance(result, dict):
                    result['processing_time_ms'] = processing_time
                    result['operation'] = operation
                    result['phone_number'] = phone_number
                
                return result
            
            except aiohttp.ClientResponseError as e:
                print(f"Erro HTTP ao realizar upsert: {e}")
                if hasattr(e, 'response') and hasattr(e.response, 'text'):
                    response_text = await e.response.text()
                    print(f"Detalhes do erro: {response_text}")
                raise
            
            except Exception as e:
                print(f"Erro inesperado ao realizar upsert: {e}")
                raise               
        
        state['last_update'] = int(time.time()*1000)

        # Extrair todos os valores do estado no in√≠cio
        phone_number = state["phone_number"]
        thread_id = state["thread_id"]
        start_time = state.get("start_time")
        last_update = state['last_update']
        collected_data = state.get('collected_data', {})
        messages_count = state.get('messages_count', 0)
        message_timestamps = state.get('message_timestamps', {})
        classify_status = state.get('classify_status', 'opened')

        # Montar o objeto de dados de forma limpa
        upsert_data = {
            'phoneNumber': phone_number,
            'thread_id': thread_id,
            'start_timeTimestamp': start_time,
            'last_updateTimestamp': last_update,
            'collected_data': str(collected_data),
            'messages_count': messages_count,
            'message_timestamps': str(message_timestamps),
            'classify_status': classify_status
        }
        
        print(f"Dados que estamos enviando para serem inseridos na tabela de grafos {upsert_data}")
        
        try:
            print(f"Chamando upsert_graph_info para phone_number: {phone_number}")
            resultado = await upsert_graph_info(
                phone_number=phone_number,
                data=upsert_data, 
                http_client=http_client
            )
            print(f"Resultado do upsert_graph_info: {json.dumps(resultado, indent=2)}")
        except Exception as e:
            print(f"ERRO em upsert_graph_info: {e}")
            print(f"Traceback: {traceback.format_exc()}")
        
        print("==== FINALIZANDO N√ì LOG_INFORMATION ====\n")
        
        return state

    async def log_messages(state: GeneralState) -> GeneralState:
        """
        üîß VERS√ÉO CORRIGIDA SIMPLES: Usa sempre o pushName original do webhook
        """
        
        async def upsert_message(
    phone_number: str, 
    message: str, 
    message_type: str,
    event: str,
    http_client: aiohttp.ClientSession,  # Cliente HTTP compartilhado
    push_name: str = None,  # üÜï Novo par√¢metro para pushName correto
    base_row_api_token: str = os.getenv("BASEROW_API_TOKEN"),
    table_id: int = int(os.getenv("BASEROW_MESSAGE_TABLE_ID")),
    base_url: str = os.getenv("BASEROW_URL")
):
            """
            Fun√ß√£o para registrar mensagens diretamente no Baserow sem enviar para o webhook.
            üîß CORRIGIDA: Agora aceita pushName como par√¢metro para usar o nome correto
            
            Args:
                phone_number (str): N√∫mero de telefone associado √† mensagem
                message (str): Conte√∫do da mensagem
                message_type (str): Tipo da mensagem (ex: "SystemMessage", "HumanMessage", "AIMessage")
                http_client (aiohttp.ClientSession): Cliente HTTP compartilhado
                push_name (str): Nome do remetente (se None, usa AGENT_NAME como fallback)
                base_row_api_token (str): Token de API do Baserow
                table_id (int): ID da tabela no Baserow
                base_url (str): URL base do Baserow
                
            Returns:
                Dict[str, Any]: Resultado da opera√ß√£o no Baserow
            """
            # Verifica√ß√£o de par√¢metros
            if not all([phone_number, message, message_type, event]):
                raise ValueError("Todos os par√¢metros s√£o obrigat√≥rios: phone_number, message, message_type, event")
            
            headers = {
                "Authorization": f"Token {base_row_api_token.strip()}",
                "Content-Type": "application/json",
                "Connection": "close",
            }
            
            # üîß CORRE√á√ÉO: Determinar pushName correto
            if push_name:
                sender_name = push_name
                print(f"[LOG-BASEROW] ‚úÖ Usando pushName fornecido: '{sender_name}'")
            else:
                sender_name = os.getenv('AGENT_NAME', 'Sistema')
                print(f"[LOG-BASEROW] ‚ö†Ô∏è PushName n√£o fornecido, usando fallback: '{sender_name}'")

            
            print(f"[DEBUG-EVENT TYPE] ‚ö†Ô∏è Ser√° usado o Event: '{event}'")
            
            
            # Preparar dados para o Baserow
            record_data = {
                "event": event,  # Tipo do evento
                "instance": os.getenv('WHATSAPP_API_INSTANCE'),  # Nome da inst√¢ncia
                "pushName": sender_name,  # üîß CORRIGIDO: Nome do remetente correto
                "message": message,  # Conte√∫do da mensagem
                "messageTimestamp": int(time.time() * 1000),  # Timestamp atual
                "phoneNumber": phone_number,  # N√∫mero de telefone
                "type": message_type  # Tipo de mensagem
            }
            
            print(f"[LOG-BASEROW] üìù Dados preparados:")
            print(f"[LOG-BASEROW]   Event: '{event}'")
            print(f"[LOG-BASEROW]   PushName: '{sender_name}'")
            print(f"[LOG-BASEROW]   Message: '{message[:50]}...'")
            print(f"[LOG-BASEROW]   Type: '{message_type}'")
            print(f"[LOG-BASEROW]   Phone: '{phone_number}'")
            
            print(f"Enviando para Baserow - Dados: {record_data}")
            
            # Definir a URL antes do bloco try
            url = f"{base_url}/api/database/rows/table/{table_id}/?user_field_names=true"
            print(f"URL do Baserow: {url}")
            print(f"Headers: {headers}")
            
            try:
                start_time = time.time()
                # Usar o cliente HTTP compartilhado
                async with http_client.post(url, headers=headers, json=record_data) as response:
                    # Log da resposta bruta para debug
                    response_text = await response.text()
                    print(f"Resposta do Baserow: Status {response.status}, Conte√∫do: {response_text}")
                    
                    # Verificar status da resposta
                    response.raise_for_status()
                    
                    # Converter a resposta para JSON
                    try:
                        result = await response.json()
                    except json.JSONDecodeError:
                        result = {"raw_response": response_text}
                    
                end_time = time.time()
                processing_time = round((end_time - start_time) * 1000, 2)
                print(f"Log registrado no Baserow para {phone_number} em {processing_time:.2f} ms")
                
                # Adicionar informa√ß√µes adicionais ao resultado
                if isinstance(result, dict):
                    result['processing_time_ms'] = processing_time
                    result['phone_number'] = phone_number
                    result['log_type'] = "system_message"
                    result['push_name_used'] = sender_name  # üÜï Log do pushName usado
                
                return result
            
            except aiohttp.ClientResponseError as e:
                print(f"Erro HTTP ao registrar log no Baserow: {e}")
                if hasattr(e, 'response') and hasattr(e.response, 'text'):
                    response_text = await e.response.text()
                    print(f"Detalhes do erro: {response_text}")
                return {
                    "error": str(e),
                    "status_code": e.status if hasattr(e, 'status') else None,
                    "push_name_attempted": sender_name  # üÜï Log do pushName que tentou usar
                }
            
            except Exception as e:
                print(f"Erro inesperado ao registrar log no Baserow: {e}")
                print(f"Traceback: {traceback.format_exc()}")
                return {
                    "error": str(e),
                    "status_code": 500,
                    "push_name_attempted": sender_name  # üÜï Log do pushName que tentou usar
                }
    

        phone_number = state["phone_number"]
        thread_id = state["thread_id"]
        messages = state.get("messages", [])
        message_timestamps = state.get("message_timestamps", {})
        
        # Usar sempre o nome que vem do state (original do webhook)
        #push_name = state.get("name", "Sistema")


        
        print(f"\n[LOG-MESSAGES] üìù Iniciando grava√ß√£o SIMPLES")
        print(f"[LOG-MESSAGES] üì± Phone: {phone_number}")
        print(f"[LOG-MESSAGES] üßµ Thread: {thread_id}")
        #print(f"[LOG-MESSAGES] üë§ Push Name: '{push_name}'")
        print(f"[LOG-MESSAGES] üì® Total de mensagens: {len(messages)}")
        
        # Gravar apenas a √öLTIMA mensagem
        if not messages:
            print(f"[LOG-MESSAGES] ‚è≠Ô∏è Nenhuma mensagem para gravar")
            return state
        
        # Pegar apenas a √∫ltima mensagem
        last_message = messages[-1]
        
        try:
            message_id = last_message.id
            message_content = last_message.content
            message_timestamp = message_timestamps.get(message_id, int(time.time() * 1000))
            
            # Usar o tipo real da mensagem (sem modificar)
            message_type = type(last_message).__name__
            
            if message_type == "AIMessage":
                push_name = os.getenv('AGENT_NAME', 'Sistema')
            else:
                push_name = state.get("name", "Sistema")

            event_type = state.get("event", None)

            print(f"[LOG-MESSAGES] üìù Gravando √öLTIMA mensagem")
            print(f"[LOG-MESSAGES]   ID: {message_id[:8]}...")
            print(f"[LOG-MESSAGES]   Tipo: {message_type}")
            print(f"[LOG-MESSAGES]   Push Name: '{push_name}'")
            print(f"[LOG-MESSAGES]   Conte√∫do: {message_content[:50]}...")
            
            event_type = "send.message" if message_type == "AIMessage" else 'messages.upsert'

            # Gravar no Baserow com pushName original
            await upsert_message(
                phone_number=phone_number,
                message=message_content,
                message_type=message_type,
                event=event_type,
                http_client=http_client,
                push_name=push_name
            )
            
            print(f"[LOG-MESSAGES] ‚úÖ √öltima mensagem gravada com pushName original")
            
        except Exception as e:
            print(f"[LOG-MESSAGES] ‚ùå Erro ao gravar √∫ltima mensagem: {e}")
            print(f"[LOG-MESSAGES] ‚ùå Traceback: {traceback.format_exc()}")
        
        print(f"[LOG-MESSAGES] üèÅ Grava√ß√£o simples conclu√≠da\n")
        
        return state

    def build_graph():
        builder = StateGraph(GeneralState)

        # N√≥s existentes
        builder.add_node("start_or_update", start_or_update)
        builder.add_node("check_combined_messages", check_combined_messages_node)
        builder.add_node("check_conversation_status", check_conversation_status)
        builder.add_node('classify_if_needed', classify_conversation)
        builder.add_node("log_messages", log_messages)
        builder.add_node("log_information", log_information)

        # üîß FLUXO SEQUENCIAL (sem paralelismo)
        builder.add_edge(START, "start_or_update")
        builder.add_edge("start_or_update", "check_combined_messages")
        builder.add_edge("check_combined_messages", "check_conversation_status")
        builder.add_edge("check_conversation_status", "classify_if_needed")
        builder.add_edge("classify_if_needed", "log_messages")       # log_messages primeiro
        builder.add_edge("log_messages", "log_information")          # depois log_information
        builder.add_edge("log_information", END)                     # e termina

        memory = InMemorySaver()
        graph = builder.compile(checkpointer=memory)
        return graph

    compiled = build_graph()

    return compiled

def create_support_graph_template(http_client: aiohttp.ClientSession, app_state: Any):
    """
    Template/Placeholder para cria√ß√£o de grafos de assistente m√©dico
    
    Baseado na arquitetura original, este template fornece:
    - Estrutura completa de estados
    - N√≥s principais configur√°veis
    - Sistema de sub-grafos
    - Controle HIL (Human In The Loop)
    - Sistema de classifica√ß√£o com regex + LLM
    - Observabilidade e logging
    
    Para usar: substitua os placeholders pelos seus casos espec√≠ficos
    """

    # ==========================================
    # 1. DEFINI√á√ÉO DE ESTADOS
    # ==========================================
    
    class Assistant_State(TypedDict):
        # üì± DADOS DO CLIENTE
        messages: Annotated[List[BaseMessage], add_messages]
        phone_number: str           
        name: str                   
        nome_assistente: str        
        specific_information: List  # Configura√ß√µes espec√≠ficas do neg√≥cio
        business_context: str       # Contexto do neg√≥cio
        previous_context: str       # Hist√≥rico do cliente
        
        # Campo para Output Estruturado
        structured_response: Optional[Dict[str, Any]]

        # ‚öôÔ∏è CONTROLE DE ESTADO
        HIL: bool                   # Human In The Loop
        is_updating: bool           # Previne race conditions
        _should_ignore: Optional[bool]  # Context manager pode marcar para ignorar
        
        # üéØ SISTEMA DE ATIVA√á√ÉO DE FLUXOS
        is_activation_flow: bool                          
        activation_flow_name: Optional[str]                 
        flow_to_intention_map: Optional[Dict[str, str]]   
        activation_context: Optional[Dict[str, Any]]      
        context_priming_active: bool                      
        last_activation_timestamp: Optional[int]          

        # üß† CLASSIFICA√á√ÉO E CONTEXTO
        tipo_conversa: Literal["NOVA", "CONTINUACAO", "nao_identificado"]
        confianca_primeira_classificacao_tipo: Literal["Alta", "M√©dia", "Baixa"]
        confianca_primeira_classificacao_intencao: Literal["Alta", "M√©dia", "Baixa"]
        raciocinio_primeira_classificacao: str

        # üéØ INTEN√á√ïES (CUSTOMIZE AQUI)
        intencao: Optional[Literal[
            "PLACEHOLDER_INTENCAO_1",    # Ex: "Consulta para Cirurgias"
            "PLACEHOLDER_INTENCAO_2",    # Ex: "Consulta Problemas Respirat√≥rios"
            "PLACEHOLDER_INTENCAO_3",    # Ex: "Outros"
        ]]
        
        # üìä COMUNICA√á√ÉO ENTRE AGENTES
        _consultas_context: Optional[Dict[str, Any]]  # Context para sub-grafos
        _system_message_data: Optional[Dict[str, str]]  # Dados para SystemMessage

    # ==========================================
    # 2. MODELOS DE CLASSIFICA√á√ÉO
    # ==========================================
    
    class ClassificacaoContexto(BaseModel):
        tipo_conversa: Literal["NOVA", "CONTINUACAO", "nao_identificado"]
        intencao: Literal[
            "PLACEHOLDER_INTENCAO_1",    # Customize suas inten√ß√µes aqui
            "PLACEHOLDER_INTENCAO_2", 
            "PLACEHOLDER_INTENCAO_3",
            "nao_identificado"
        ]
        confianca_tipo: Literal["Alta", "M√©dia", "Baixa"]
        confianca_intencao: Literal["Alta", "M√©dia", "Baixa"]
        raciocinio: str

    class AnaliseContexto(BaseModel):
        precisa_reclassificar: bool = False
        deve_ignorar: bool = False
        motivo: str
        contexto_adicional: List[str] = []

    # ==========================================
    # 3. CONFIGURA√á√ÉO DE LOGGING
    # ==========================================
    
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    def log_state_info(node_name: str, state: Assistant_State):
        """Fun√ß√£o auxiliar para logging detalhado do estado"""
        logger.info(f"\n{'='*50}")
        logger.info(f"üîß N√ì: {node_name}")
        logger.info(f"üì± Phone: {state.get('phone_number', 'N/A')}")
        logger.info(f"üë§ Name: {state.get('name', 'N/A')}")
        logger.info(f"üè∑Ô∏è HIL Status: {state.get('HIL', 'N/A')}")
        logger.info(f"üéØ Inten√ß√£o: {state.get('intencao', 'N/A')}")
        
        messages = state.get('messages', [])
        logger.info(f"üí¨ Total de mensagens: {len(messages)}")
        
        if messages:
            for i, msg in enumerate(messages[-3:], 1):
                msg_type = "üë§" if isinstance(msg, HumanMessage) else "ü§ñ" if isinstance(msg, AIMessage) else "‚öôÔ∏è"
                content_preview = msg.content[:50] + "..." if len(msg.content) > 50 else msg.content
                logger.info(f"   {i}. {msg_type} {content_preview}")
        
        logger.info(f"{'='*50}\n")

    # ==========================================
    # 4. SISTEMA DE PR√â-CLASSIFICA√á√ÉO COM REGEX
    # ==========================================
    
    def pre_classificar_com_regex(mensagem: str) -> Optional[Dict[str, str]]:
        """
        PLACEHOLDER: Adicione seus padr√µes regex espec√≠ficos aqui
        
        Exemplo de uso:
        - Detectar padr√µes espec√≠ficos do seu neg√≥cio
        - Classifica√ß√£o r√°pida sem usar LLM
        - Reduzir lat√™ncia para casos comuns
        """
        import re
        
        texto_original = mensagem.strip()
        
        # ==========================================
        # EXEMPLO: PADR√ÉO PARA AGENDAMENTO
        # ==========================================
        # Padr√£o: (N√öMERO)Ol√°. Gostaria de agendar...
        padrao_agendamento = r'^\(\d{1,2}\)Ol√°\.\s*Gostaria\s+de\s+agendar'
        
        if re.search(padrao_agendamento, texto_original, re.IGNORECASE):
            return {
                'tipo_conversa': 'NOVA',
                'intencao': 'PLACEHOLDER_INTENCAO_1',  # Substitua pela sua inten√ß√£o
                'confianca_tipo': 'Alta',
                'confianca_intencao': 'Alta',
                'raciocinio': 'Regex detectou padr√£o espec√≠fico de agendamento'
            }
        
        # ==========================================
        # ADICIONE MAIS PADR√ïES AQUI
        # ==========================================
        # TODO: Implementar padr√µes espec√≠ficos do seu dom√≠nio
        
        return None  # Fallback para classifica√ß√£o LLM

    # ==========================================
    # 5. AN√ÅLISE DE CONTEXTO INTELIGENTE
    # ==========================================
    
    def should_reevaluate_context(state: Assistant_State) -> tuple[bool, str, List[str], bool]:
        """
        Analisa TODA a conversa para decis√µes contextuais inteligentes
        
        PLACEHOLDER: Customize a l√≥gica de reavalia√ß√£o para seu dom√≠nio
        """
        
        ultima_mensagem = state['messages'][-1]
        if not isinstance(ultima_mensagem, HumanMessage):
            return False, "N√£o √© mensagem humana", [], False
        
        # Construir hist√≥rico completo
        conversa_completa = []
        for msg in state['messages']:
            if isinstance(msg, HumanMessage):
                conversa_completa.append(f"CLIENTE: {msg.content}")
            elif isinstance(msg, AIMessage):
                conversa_completa.append(f"SISTEMA: {msg.content}")
        
        historico = "\n".join(conversa_completa)
        intencao_atual = state.get('intencao', 'n√£o definida')
        
        # PLACEHOLDER: Customize o prompt para seu dom√≠nio
        prompt_sistema = """
        Voc√™ √© um analisador de contexto conversacional para [SEU DOM√çNIO].
        
        Analise TODO o hist√≥rico da conversa e determine:
        1. Se a √∫ltima mensagem indica mudan√ßa real de inten√ß√£o
        2. Se a mensagem deve ser IGNORADA (acumulada sem resposta)
        3. Extraia contexto adicional como lista de observa√ß√µes relevantes
        
        INTEN√á√ïES POSS√çVEIS:
        - PLACEHOLDER_INTENCAO_1: [Descri√ß√£o]
        - PLACEHOLDER_INTENCAO_2: [Descri√ß√£o]  
        - PLACEHOLDER_INTENCAO_3: [Descri√ß√£o]
        
        CASOS PARA IGNORAR:
        - Mensagens muito vagas ("oi", "ol√°", "?")
        - Mensagens duplicadas/repetidas
        - Poss√≠veis testes ou ru√≠do
        - Confirma√ß√µes simples que n√£o agregam contexto
        """
        
        prompt_usuario = f"""
        HIST√ìRICO COMPLETO DA CONVERSA:
        {historico}
        
        INTEN√á√ÉO ATUAL CLASSIFICADA: {intencao_atual}
        
        Analise se a √∫ltima mensagem do cliente indica mudan√ßa de inten√ß√£o.
        """
        
        try:
            # TODO: Implementar chamada para seu LLM
            # completion = your_llm_client.parse(...)
            
            # PLACEHOLDER: Retorna exemplo
            return False, "An√°lise n√£o implementada", [], False
            
        except Exception as e:
            print(f"[CONTEXT_MANAGER] ‚ùå Erro na an√°lise LLM: {e}")
            return False, f"Erro na an√°lise: {str(e)}", [], False

    # ==========================================
    # 6. CLASSIFICA√á√ÉO DE CONTEXTO
    # ==========================================
    
    def classificar_contexto_conversa(
        mensagem: str,
        context: Optional[str] = None,
        previous_context: Optional[str] = None
    ) -> 'ClassificacaoContexto':
        """
        PLACEHOLDER: Implemente sua l√≥gica de classifica√ß√£o
        
        Classifica se uma mensagem √© nova conversa ou continua√ß√£o,
        e identifica a inten√ß√£o do usu√°rio.
        """
        
        try:
            # PLACEHOLDER: Customize o prompt para seu dom√≠nio
            prompt_sistema = f"""
            Voc√™ √© um classificador de contexto conversacional para [SEU DOM√çNIO].

            Sua tarefa √© analisar uma mensagem e determinar:
            1. Se √© uma NOVA conversa ou CONTINUA√á√ÉO de conversa anterior
            2. Qual a inten√ß√£o/assunto da mensagem

            TIPOS DE CONVERSA:
            - NOVA: Cliente iniciando nova solicita√ß√£o ou assunto
            - CONTINUACAO: Resposta ou seguimento de conversa j√° em andamento
            - nao_identificado: N√£o consegue determinar com seguran√ßa

            INTEN√á√ïES POSS√çVEIS:
            - PLACEHOLDER_INTENCAO_1: [Sua descri√ß√£o aqui]
            - PLACEHOLDER_INTENCAO_2: [Sua descri√ß√£o aqui]
            - PLACEHOLDER_INTENCAO_3: [Sua descri√ß√£o aqui]
            - nao_identificado: N√£o consegue identificar a inten√ß√£o
            """

            prompt_usuario = f"""
            CONTEXTO DO NEG√ìCIO: {context or "N√£o dispon√≠vel"}
            HIST√ìRICO DO CLIENTE: {previous_context or "N√£o dispon√≠vel"}
            
            MENSAGEM DO USU√ÅRIO: {mensagem}
            
            Fa√ßa a classifica√ß√£o baseada nas informa√ß√µes dispon√≠veis.
            """

            # TODO: Implementar chamada para seu LLM
            # completion = your_llm_client.parse(...)
            
            # PLACEHOLDER: Retorna classifica√ß√£o padr√£o
            return ClassificacaoContexto(
                tipo_conversa="NOVA",
                intencao="PLACEHOLDER_INTENCAO_3",
                confianca_tipo="Baixa",
                confianca_intencao="Baixa",
                raciocinio="Classifica√ß√£o placeholder - implemente sua l√≥gica"
            )
            
        except Exception as e:
            logger.error(f"Erro ao classificar contexto: {e}")
            
            return ClassificacaoContexto(
                tipo_conversa="nao_identificado",
                intencao="nao_identificado",
                confianca_tipo="Baixa",
                confianca_intencao="Baixa",
                raciocinio=f"Erro na classifica√ß√£o: {str(e)}"
            )

    # ==========================================
    # 7. N√ìS PRINCIPAIS DO GRAFO
    # ==========================================

    def hil_check_node(state: Assistant_State):
        """
        Primeiro n√≥: Filtra mensagens e verifica HIL
        Previne race conditions e verifica ownership
        """
        log_state_info("HIL_CHECK", state)
        
        # Habilitar flag de atualiza√ß√£o
        try:
            state['is_updating'] = True
            logger.info("‚úÖ Flag is_updating habilitada")
        except Exception as e:
            logger.error(f"‚ùå Erro ao habilitar flag: {e}")

        phone_number = state.get('phone_number')
    
        # üïê VERIFICA√á√ÉO TEMPORAL (previne race conditions)
        current_timestamp = int(time.time() * 1000)
        last_timestamp = app_state.last_message_timestamps.get(phone_number, 0)
        
        if current_timestamp <= last_timestamp:
            logger.info(f"‚ö†Ô∏è MENSAGEM FORA DE ORDEM - ignorando")
            return state
        
        app_state.last_message_timestamps[phone_number] = current_timestamp

        # ü§ñ VERIFICA√á√ÉO DE OWNERSHIP (Human In The Loop)
        if hasattr(app_state, 'conversation_ownership') and phone_number in app_state.conversation_ownership:
            ownership = app_state.conversation_ownership[phone_number]
            
            if ownership.get('status') == 'human_active':
                logger.info(f"üë©‚Äçüíº ATENDENTE ATIVO para {phone_number} - parando processamento")
                return state

        # ‚úÖ FILTRO: Verificar se √∫ltima mensagem √© humana
        if not state['messages']:
            logger.info("üö´ Nenhuma mensagem encontrada")
            return state
        
        ultima_mensagem = state['messages'][-1]
        
        if not isinstance(ultima_mensagem, HumanMessage):
            logger.info(f"üö´ √öltima mensagem √© {type(ultima_mensagem).__name__} - n√£o processando")
            return state
        
        logger.info("‚úÖ Filtros passaram - continuando processamento")
        return state

    def context_manager_node(state: Assistant_State):
        """
        N√≥ para gest√£o de contexto - Analisa contexto e toma decis√µes
        """
        log_state_info("CONTEXT_MANAGER", state)
        
        try:
            # An√°lise completa do contexto
            needs_reclassify, reason, additional_context, should_ignore = should_reevaluate_context(state)
            
            print(f"[CONTEXT_MANAGER] üìã An√°lise:")
            print(f"   üîÑ Reclassificar: {needs_reclassify}")
            print(f"   üîá Ignorar: {should_ignore}")
            print(f"   üìù Motivo: {reason}")
            
            # DECIS√ÉO 1: Ignorar mensagem
            if should_ignore:
                state['_should_ignore'] = True
                state['_system_message_data'] = {
                    'phone_number': state.get('phone_number', ''),
                    'content': f"Context Manager: Mensagem ignorada - {reason}"
                }
                return state
            
            # DECIS√ÉO 2: Re-classifica√ß√£o necess√°ria
            if needs_reclassify:
                state['intencao'] = None
                state['raciocinio_primeira_classificacao'] = f"Re-an√°lise: {reason}"
            
            # DECIS√ÉO 3: Contexto adicional
            if additional_context:
                state['_consultas_context'] = {
                    'supervisor_intel': {
                        'context_manager_intel': {
                            'additional_context': additional_context,
                            'analysis_reason': reason,
                            'source': 'context_manager'
                        }
                    }
                }
            
            return state
            
        except Exception as e:
            print(f"[CONTEXT_MANAGER] ‚ùå ERRO: {str(e)}")
            return state

    def supervisor_node(state: Assistant_State):
        """
        Supervisor principal - Coordena fluxo e roteamento
        """
        log_state_info("SUPERVISOR", state)
        
        # üîá Verificar se deve ignorar mensagem
        if state.get('_should_ignore'):
            return state
        
        # üéØ SISTEMA DE ATIVA√á√ÉO DE FLUXOS
        # TODO: Implementar l√≥gica de ativa√ß√£o espec√≠fica
        
        # üîç PR√â-CLASSIFICA√á√ÉO COM REGEX
        ultima_mensagem = state['messages'][-1]
        if isinstance(ultima_mensagem, HumanMessage):
            mensagem_content = ultima_mensagem.content
            phone_number = state.get('phone_number', "")
            
            resultado_regex = pre_classificar_com_regex(mensagem_content)
            
            if resultado_regex:
                # ‚ö° CLASSIFICA√á√ÉO R√ÅPIDA COM REGEX
                state['intencao'] = resultado_regex['intencao']
                state['tipo_conversa'] = resultado_regex['tipo_conversa']
                state['confianca_primeira_classificacao_tipo'] = resultado_regex['confianca_tipo']
                state['confianca_primeira_classificacao_intencao'] = resultado_regex['confianca_intencao']
                state['raciocinio_primeira_classificacao'] = resultado_regex['raciocinio']
                
                state['_system_message_data'] = {
                    'phone_number': phone_number,
                    'content': f"Classifica√ß√£o REGEX: {mensagem_content} ‚Üí {resultado_regex['intencao']}"
                }
                
            else:
                # ü§ñ FALLBACK PARA LLM
                state['intencao'] = "PLACEHOLDER_INTENCAO_3"  # Fallback padr√£o
                state['tipo_conversa'] = "NOVA"
                state['confianca_primeira_classificacao_tipo'] = "Baixa"
                state['confianca_primeira_classificacao_intencao'] = "Baixa"
                state['raciocinio_primeira_classificacao'] = "Fallback: Regex n√£o encontrou padr√£o"
                
                state['_system_message_data'] = {
                    'phone_number': phone_number,
                    'content': f"Fallback LLM: {mensagem_content} ‚Üí classifica√ß√£o padr√£o"
                }
        
        return state

    def classifier_node(state: Assistant_State):
        """
        N√≥ classificador com LLM
        """
        log_state_info("CLASSIFIER", state)
        
        if not state['messages']:
            return state
        
        ultima_mensagem = state['messages'][-1]
        if not isinstance(ultima_mensagem, HumanMessage):
            return state

        try:
            # Executar classifica√ß√£o
            resultado = classificar_contexto_conversa(
                ultima_mensagem.content, 
                state.get('business_context', ''), 
                state.get('previous_context', '')
            )
            
            # Atualizar estado
            state["tipo_conversa"] = resultado.tipo_conversa
            state["confianca_primeira_classificacao_tipo"] = resultado.confianca_tipo
            state['intencao'] = resultado.intencao
            state["confianca_primeira_classificacao_intencao"] = resultado.confianca_intencao
            state['raciocinio_primeira_classificacao'] = resultado.raciocinio
            
            # SystemMessage
            state['_system_message_data'] = {
                'phone_number': state.get('phone_number', ''),
                'content': f"LLM Classifica√ß√£o: {ultima_mensagem.content} ‚Üí {resultado.intencao}"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro na classifica√ß√£o: {e}")
            
            # Fallback
            state["tipo_conversa"] = "nao_identificado"
            state['intencao'] = "nao_identificado"
            state['raciocinio_primeira_classificacao'] = f"Erro: {str(e)}"
        
        return state

    # ==========================================
    # 8. SUB-GRAFOS PLACEHOLDER
    # ==========================================
    
    def placeholder_agent_1(state: Assistant_State):
        """
        PLACEHOLDER: Implemente seu primeiro agente espec√≠fico
        
        Exemplo: Agente de agendamento, vendas, suporte, etc.
        """
        
        # üÜï Inicializar structured_response
        state['structured_response'] = {
            'agent_id': 'placeholder_agent_1',
            'timestamp': int(time.time() * 1000),
            'execution_context': {
                'phone_number': state.get('phone_number'),
                'intencao': state.get('intencao'),
                'thread_id': state.get('thread_id', 'unknown')
            },
            'data': {},
            'status': 'initialized'
        }
        
        # Exemplo b√°sico:
        state['HIL'] = True  # Transfere para humano
        
        # Adicionar resposta
        resposta = "Obrigado pelo contato! Nossa equipe vai te atender em breve."
        state['messages'].append(AIMessage(content=resposta))
        
        return state
    
    def placeholder_agent_2(state: Assistant_State):
        """
        PLACEHOLDER: Implemente seu segundo agente espec√≠fico
        """
        log_state_info("AGENT_2_PLACEHOLDER", state)
        
        # TODO: Implementar l√≥gica espec√≠fica
        state['HIL'] = True
        
        resposta = "Entendi sua solicita√ß√£o. Vou conectar voc√™ com nossa equipe especializada."
        state['messages'].append(AIMessage(content=resposta))
        
        return state
    
    def placeholder_agent_3(state: Assistant_State):
        """
        PLACEHOLDER: Implemente seu terceiro agente espec√≠fico
        """
        log_state_info("AGENT_3_PLACEHOLDER", state)
        
        # TODO: Implementar l√≥gica espec√≠fica
        state['HIL'] = True
        
        #resposta = "Vou direcionar sua mensagem para nossa equipe. Aguarde um momento."
        #state['messages'].append(AIMessage(content=resposta))
        
        return state

    # ==========================================
    # 9. N√ìS DE PROCESSAMENTO E LIMPEZA
    # ==========================================

    async def process_message_node(state: Assistant_State):
        """
        Processa e envia mensagens
        """
        log_state_info("PROCESS_MESSAGE", state)

        messages = state.get('messages', [])
        if not messages:
            return state

        ultima_mensagem = messages[-1]
        if isinstance(ultima_mensagem, AIMessage):
            print(f"üì§ ENVIANDO: {ultima_mensagem.content}")
            # TODO: Implementar envio real
            # await send_message(state["phone_number"], ultima_mensagem.content, http_client)

        state['is_updating'] = False
        return state

    def cleanup_node(state: Assistant_State):
        """
        N√≥ de limpeza final
        """
        logger.info("üßπ Executando cleanup")
        
        try:
            state['is_updating'] = False
        except Exception as e:
            logger.error(f"‚ùå Erro no cleanup: {e}")
        
        return state

    # ==========================================
    # 10. FUN√á√ïES DE DECIS√ÉO
    # ==========================================

    def hil_decision(state: Assistant_State) -> Literal["Human_In_The_Loop", "Continue_Processing"]:
        """
        Decis√£o HIL: Verifica se deve continuar processamento autom√°tico
        """
        if not state['messages']:
            return "Human_In_The_Loop"
        
        ultima_mensagem = state['messages'][-1]
        if not isinstance(ultima_mensagem, HumanMessage):
            return "Human_In_The_Loop"
        
        if state.get('HIL', False):
            return "Human_In_The_Loop"
        
        return "Continue_Processing"

    def supervisor_decision(state: Assistant_State) -> Literal["needs_classification", "agent_1", "agent_2", "agent_3"]:
        """
        Decis√£o do supervisor: Rotea para classifica√ß√£o ou agentes
        """
        # Verificar se precisa classificar
        if not state.get('intencao'):
            return "needs_classification"
        
        # Rotear baseado na inten√ß√£o
        intencao = state.get('intencao')
        
        # PLACEHOLDER: Customize o mapeamento
        intention_routing = {
            "PLACEHOLDER_INTENCAO_1": "agent_1",
            "PLACEHOLDER_INTENCAO_2": "agent_2", 
            "PLACEHOLDER_INTENCAO_3": "agent_3"
        }
        
        return intention_routing.get(intencao, "agent_3")

    def re_hil_decision(state: Assistant_State) -> Literal["Human_In_The_Loop", "Continue_Processing"]:
        """
        Re-verifica√ß√£o HIL antes do envio
        """
        phone_number = state.get('phone_number')
        
        # TODO: Verificar estado global da aplica√ß√£o
        # if app_state.conversation_ownership.get(phone_number, {}).get('status') == 'human_active':
        #     return "Human_In_The_Loop"
        
        return "Continue_Processing"

    # ==========================================
    # 11. CONSTRU√á√ÉO DO GRAFO
    # ==========================================

    def build_graph():
        """
        Constr√≥i o grafo principal com toda a arquitetura
        """
        builder = StateGraph(Assistant_State)
        
        # Adicionar n√≥s
        builder.add_node("hil_check_node", hil_check_node)
        builder.add_node("context_manager_node", context_manager_node)
        builder.add_node("supervisor_node", supervisor_node)
        builder.add_node("classifier_node", classifier_node)
        builder.add_node("placeholder_agent_1", placeholder_agent_1)
        builder.add_node("placeholder_agent_2", placeholder_agent_2)
        builder.add_node("placeholder_agent_3", placeholder_agent_3)
        builder.add_node("process_message_node", process_message_node)
        builder.add_node("re_hil_check_node", lambda x: x)  # Placeholder
        builder.add_node("cleanup_node", cleanup_node)

        # Fluxo principal
        builder.add_edge(START, "hil_check_node")
        
        builder.add_conditional_edges("hil_check_node", hil_decision, {
            "Human_In_The_Loop": "cleanup_node",
            "Continue_Processing": "context_manager_node"
        })

        builder.add_edge("context_manager_node", "supervisor_node")

        builder.add_conditional_edges("supervisor_node", supervisor_decision, {
            'needs_classification': "classifier_node",
            'agent_1': "placeholder_agent_1",
            'agent_2': "placeholder_agent_2",
            'agent_3': "placeholder_agent_3"
        })
        
        builder.add_edge("classifier_node", "supervisor_node")

        # Fluxo p√≥s-agentes
        builder.add_edge("placeholder_agent_1", "re_hil_check_node")
        builder.add_edge("placeholder_agent_2", "re_hil_check_node")
        builder.add_edge("placeholder_agent_3", "re_hil_check_node")

        builder.add_conditional_edges("re_hil_check_node", re_hil_decision, {
            "Human_In_The_Loop": "cleanup_node",
            "Continue_Processing": "process_message_node"
        })

        builder.add_edge('process_message_node', "cleanup_node")
        builder.add_edge('cleanup_node', END)
        
        # Compilar com mem√≥ria
        memory = InMemorySaver()
        graph = builder.compile(checkpointer=memory)

        return graph

    compiled = build_graph()

    return compiled

def create_activation_graph(http_client: aiohttp.ClientSession, app_state: Any):

    class Activation_State(TypedDict):
        # Campos obrigat√≥rios
        messages: Annotated[List[BaseMessage], add_messages]
        phone_number: str           
        name: str                   
        flow_name: str
        activation_context: List        
    
    def supervisor_node(state: Activation_State):
        
        print(f"[ACTIVATION_GRAPH] üöÄ Node Start - Flow: {state.get('flow_name')}")
        print(f"[ACTIVATION_GRAPH] üì± Phone: {state.get('phone_number')}")
        print(f"[ACTIVATION_GRAPH] üì± To -> : {state.get('name')}")
        print(f"[ACTIVATION_GRAPH] üìã Context: {state.get('activation_context')}")
        
        return state
    
    def supervisor_decision(state: Activation_State) -> Literal["aniversarios", "placeholder", "ativacao_masterclass"]:
        
        # Rotear baseado na inten√ß√£o
        flow_name = state.get('flow_name')
        
        # PLACEHOLDER: Customize o mapeamento
        intention_routing = {
            "aniversarios": "aniversarios",
            "indefinido": "placeholder", 
            "ativacao_masterclass": "ativacao_masterclass",
        }
        
        return intention_routing.get(flow_name, "placeholder")


    async def aniversario_flow_node(state: Activation_State):

        phone_number = state.get("phone_number")
        
        context = state.get("activation_context", [{}])
        nome = context[0].get("nome_pessoa", "amigo") if context else "amigo"
        tipo_fluxo = context[0].get("tipo_fluxo", "normal") if context else "normal"
        
        image_path = "/app/monitoring_dr_larissa/aniversarios_folder.jpg"

        # üîß CORRE√á√ÉO: Mesmo dia do PR√ìXIMO M√äS (n√£o +30 dias)
        from datetime import datetime
        from dateutil.relativedelta import relativedelta
        
        hoje = datetime.now()
        # Adicionar exatamente 1 m√™s
        data_validade = (hoje + relativedelta(months=1)).strftime("%d/%m/%y")
        
        legenda_sabado_domingo = f"""Seu anivers√°rio est√° chegando {nome} üéâ

Desejamos que o seu novo ciclo traga ainda mais motivos pra sorrir.

Para comemorar essa data especial, a Dra. Larissa Valadares preparou esse presente exclusivo para voc√™, v√°lido at√© {data_validade} (exceto consulta).

Conte sempre conosco! üíõ"""

        legenda_dias_normais = f"""Parab√©ns {nome} üéâ

Desejamos que o seu novo ciclo traga ainda mais motivos pra sorrir.

Para comemorar essa data especial, a Dra. Larissa Valadares preparou esse presente exclusivo para voc√™, v√°lido at√© {data_validade} (exceto consulta).

Conte sempre conosco! üíõ"""
 

        # ‚úÖ L√ìGICA CONDICIONAL
        if tipo_fluxo == "final_de_semana":
            legenda_escolhida = legenda_sabado_domingo
            print(f"[ANIVERSARIO] üìÖ Usando mensagem de FINAL DE SEMANA para {nome}")
        else:
            legenda_escolhida = legenda_dias_normais
            print(f"[ANIVERSARIO] üìÖ Usando mensagem de DIA NORMAL para {nome}")
        

        print(f"[ANIVERSARIO] üìÖ Data de hoje: {hoje.strftime('%d/%m/%y')}")
        print(f"[ANIVERSARIO] üìÖ Data validade (+1 m√™s): {data_validade}")
        print(f"[ANIVERSARIO] üéØ Nome: {nome}")

        # ===== RESTO DO C√ìDIGO IGUAL =====
        result = await send_base64_image_async(
            url_api_whatsapp=os.getenv("WHATSAPP_API_BASE_URL", "https://evolutionapi.gbstudios.tech"),
            instancia=os.getenv("WHATSAPP_API_INSTANCE"),
            api_key=os.getenv("WHATSAPP_API_TOKEN"),
            numero=phone_number,
            caminho_imagem=image_path,
            legenda=legenda_escolhida,
            http_client=http_client,
            app_state=app_state,
            is_activation_flow=True,
            flow_name=state.get("flow_name")
        )
        
        return state

    async def ativacao_masterclass_flow_node(state: Activation_State):

        phone_number = state.get("phone_number")
        
        context = state.get("activation_context", [{}])
        nome_contexto = context[0].get("nome", "").strip() if context else ""
        
        mensagem = f"""Buenas {nome_contexto}, como vai? 
Sou a Fabricia, mentora aqui do grupo Masterclass em Vendas. Que bom ter voc√™ conosco!

Talvez voc√™ n√£o saiba, mas j√° estou na √°rea de vendas faz um temp√£o e atualmente ajudo v√°rias empresas e profissionais da sa√∫de a crescerem seus neg√≥cios.

Estou aqui conversando com voc√™s para entender melhor o perfil de cada um, assim posso criar materiais que realmente agreguem valor na vida de voc√™s!

Me conta, qual √© a sua √°rea de atua√ß√£o hoje?"""
        
        # ===== RESTO DO C√ìDIGO IGUAL =====
        result = await send_ai_message(phone_number, mensagem, http_client)
        
        return state


    def placeholder_node(state: Activation_State):
        return state
        
    async def clean_up_node(state: Activation_State):
        
        print(f"[ACTIVATION_GRAPH] üéØ Node End - Enviada mensagem de ativa√ß√£o")
        
       
        return state
    
    def build_graph():
    
        # Constru√ß√£o do agente
        builder_activation = StateGraph(Activation_State)
        
        # ‚úÖ CORRE√á√ÉO: N√≥s com nomes consistentes
        builder_activation.add_node("supervisor_node", supervisor_node)
        builder_activation.add_node("aniversario_flow_node", aniversario_flow_node)
        builder_activation.add_node("placeholder_node", placeholder_node)
        builder_activation.add_node("clean_up_node", clean_up_node)
        builder_activation.add_node("ativacao_masterclass_node", ativacao_masterclass_flow_node)
        
        builder_activation.add_edge(START, "supervisor_node")
        builder_activation.add_conditional_edges("supervisor_node", supervisor_decision,
        {'aniversarios': 'aniversario_flow_node',
        'placeholder': 'placeholder_node',
        'ativacao_masterclass': 'ativacao_masterclass_node'})
        
        builder_activation.add_edge("aniversario_flow_node", "clean_up_node")
        builder_activation.add_edge("ativacao_masterclass_node", "clean_up_node")
        builder_activation.add_edge("placeholder_node", "clean_up_node")

        builder_activation.add_edge("clean_up_node", END)
        
        
        activation_memory = InMemorySaver()
        graph = builder_activation.compile(checkpointer=activation_memory)

        return graph

    compiled = build_graph()

    return compiled

async def auto_queue_worker(app_state):
    """
    Worker que processa queue automaticamente a cada 5 segundos
    Usa a mesma l√≥gica do endpoint manual
    """
    print("ü§ñ Auto-worker iniciado")
    
    cycle_count = 0  # Contador de ciclos para debug
    
    while app_state.auto_worker_running:
        try:
            cycle_count += 1
            current_time = int(time.time())
            queue_size = app_state.logging_queue.qsize()
            
            # üÜï LOG DETALHADO A CADA CICLO
            #print(f"ü§ñ Auto-worker [Ciclo {cycle_count}] - {current_time}")
            #print(f"ü§ñ   ‚úÖ Flag running: {app_state.auto_worker_running}")
            #print(f"ü§ñ   üì¶ Queue size: {queue_size}")
            #print(f"ü§ñ   üìä Queue empty: {app_state.logging_queue.empty()}")
            
            # Verificar se h√° itens na fila
            if not app_state.logging_queue.empty():
                print(f"ü§ñ ‚úÖ Auto-worker encontrou {queue_size} itens na fila")
                
                processed = 0
                errors = 0
                
                # Processar todos os itens (mesma l√≥gica do endpoint)
                while not app_state.logging_queue.empty():
                    try:
                        #print(f"ü§ñ   üîÑ Processando item {processed + 1}...")
                        
                        # Pegar item da fila
                        item = app_state.logging_queue.get_nowait()
                        
                        # üîç ADICIONAR ESTE DEBUG AQUI:
                        print(f"üîç DEBUG: Item state keys: {list(item['state'].keys())}")
                        print(f"üîç DEBUG: Phone presente: {'phone_number' in item['state']}")
                        print(f"üîç DEBUG: State completo: {item['state']}")
                        # üÜï LOG DO ITEM
                        #print(f"ü§ñ   üìù Item obtido: {type(item)}")
                        #print(f"ü§ñ   üßµ Thread ID: {item.get('config', {}).get('configurable', {}).get('thread_id', 'N/A')}")
                        #print(f"ü§ñ   üÜï Is new conversation: {item.get('is_new_conversation', 'N/A')}")
                        
                        # ‚úÖ NOVA L√ìGICA: verificar flag
                        if item["is_new_conversation"]:
                            #print(f"ü§ñ   üÜï Nova thread - usando ainvoke direto")
                            logging_result = await app_state.logging_graph.ainvoke(
                                item["state"], 
                                item["config"]
                            )
                        else:
                            #print(f"ü§ñ   üîÑ Thread existente - usando update_state + ainvoke")
                            
                            # üîç DEBUG ANTES do update_state
                            #print(f"üîç DEBUG: Estado ANTES do update_state:")
                            #print(f"üîç   üì± Phone: {item['state'].get('phone_number', 'N/A')}")
                            #print(f"üîç   üë§ Name: {item['state'].get('name', 'N/A')}")
                            #print(f"üîç   üí¨ Messages count: {len(item['state'].get('messages', []))}")
                            #print(f"üîç   üßµ Thread ID: {item['config'].get('configurable', {}).get('thread_id', 'N/A')}")
                            #print(f"üîç   üÜï Is new conversation: {item.get('is_new_conversation', 'N/A')}")
                            
                            if item['state'].get('messages'):
                                last_msg = item['state']['messages'][-1]
                                #print(f"üîç   üìù √öltima mensagem tipo: {type(last_msg).__name__}")
                                #print(f"üîç   üìù √öltima mensagem conte√∫do: {last_msg.content[:50]}...")
                            
                            ########## Campos para fazer o Update ###############
                            new_message = item["state"]["messages"][-1]
                            phone_number = item['state']["phone_number"]
                            thread_id = item['state']["thread_id"]
                            structured_response = item['state']['structured_response']
                            updated_config = app_state.logging_graph.update_state(
                                item["config"], 
                                {
                                    "messages": [new_message],
                                    "phone_number": phone_number,
                                    "thread_id": thread_id,
                                    "structured_response": structured_response
                                }
                            )
                            
                            # üîç DEBUG DEPOIS do update_state
                            #print(f"üîç DEBUG: Configura√ß√£o DEPOIS do update_state:")
                            #print(f"üîç   Config tipo: {type(updated_config)}")
                            #print(f"üîç   Config keys: {list(updated_config.keys()) if isinstance(updated_config, dict) else 'N/A'}")
                            
                            logging_result = await app_state.logging_graph.ainvoke(
                                {}, 
                                updated_config
                            )
                        
                        #print(f"ü§ñ   ‚úÖ Grafo executado com sucesso")
                        
                        processed += 1
                        app_state.logging_queue.task_done()
                        
                        #print(f"ü§ñ   ‚úÖ Item {processed} processado e marcado como done")
                        
                    except asyncio.QueueEmpty:
                        print(f"ü§ñ   üì≠ Queue esvaziou durante processamento")
                        break
                    except Exception as e:
                        errors += 1
                        print(f"ü§ñ   ‚ùå Auto-worker erro no item {processed + errors}: {e}")
                        print(f"ü§ñ   ‚ùå Traceback: {traceback.format_exc()}")
                        try:
                            app_state.logging_queue.task_done()
                        except ValueError:
                            print(f"ü§ñ   ‚ö†Ô∏è task_done() j√° foi chamado para este item")
                
                print(f"ü§ñ ‚úÖ Auto-worker conclu√≠do: {processed} processados, {errors} erros")
                
                # üÜï LOG P√ìS-PROCESSAMENTO
                final_queue_size = app_state.logging_queue.qsize()
                print(f"ü§ñ   üìä Queue size ap√≥s processamento: {final_queue_size}")
                
            else:
                print(f"ü§ñ üì≠ Auto-worker: fila vazia, aguardando pr√≥ximo ciclo...")
            
            # Aguardar 5 segundos antes da pr√≥xima verifica√ß√£o
            print(f"ü§ñ ‚è∞ Auto-worker: dormindo por 5 segundos...")
            await asyncio.sleep(5)
            
        except Exception as e:
            print(f"ü§ñ ‚ùå Erro cr√≠tico no auto-worker [Ciclo {cycle_count}]: {e}")
            print(f"ü§ñ ‚ùå Traceback cr√≠tico: {traceback.format_exc()}")
            print(f"ü§ñ üîÑ Continuando execu√ß√£o ap√≥s erro...")
            # Continua rodando mesmo com erro
            await asyncio.sleep(5)
    
    print(f"ü§ñ üõë Auto-worker finalizado ap√≥s {cycle_count} ciclos")
    print(f"ü§ñ üõë Flag final: auto_worker_running={app_state.auto_worker_running}")


@asynccontextmanager
async def lifespan(app: FastAPI):
    
    # Inicializa o cliente HTTP no app.state
    app.state.http_client = aiohttp.ClientSession(
    connector=aiohttp.TCPConnector(
        limit=30,                    # Pool total moderado
        limit_per_host=6,            # 3 apps √ó 2 conex√µes cada = suficiente
        ttl_dns_cache=300,           # 5min cache DNS
        force_close=False,           # Reutiliza conex√µes
        enable_cleanup_closed=True,  # üîß CR√çTICO para seu caso
        keepalive_timeout=60,        # 1min balance
    ),
    timeout=aiohttp.ClientTimeout(
        total=10,                    # Seu baseline: 130ms
        connect=5,                   
        sock_read=8                  
    ),
    # Par√¢metros do ClientSession (n√£o TCPConnector):
    auto_decompress=True,           # Compress√£o autom√°tica
    trust_env=True,                 # Usa vars de ambiente
)
    
    app.state.webhook_forward_endpoint = os.getenv('WEBHOOK_FORWARD_ENDPOINT')

    # Inicializa o estado na app.state
    app.state.threads = {}
    
    app.state.last_messages = {}
    
    app.state.combined_messages_status = {}
    
    app.state.background_tasks = {}

    app.state.conversation_ownership = {} # Para determinar se a conversa j√° est√° em HIL (Human in The Loop)

    app.state.last_message_timestamps = {}  # Para gravar timestamp da √∫ltima mensagem enviada ou recebida
    
    app.state.thread = int(time.time()*1000)

    app.state.processing_locks = {}

    # Inicializar Apscheduler 
    try:
        scheduler = start_apscheduler()
        if scheduler:
            app.state.scheduler = scheduler
    except:
        print("N√£o foi poss√≠vel iniciar o Apscheduler")

    # üåå INICIALIZAR CACHE PARA IDENTIFICAR GATILHOS DE DISPARO DE FLUXO VIA MENSAGENS DE ATIVA√á√ÉO
    if not hasattr(app.state, 'activation_cache'):
        app.state.activation_cache = {}
        print("‚úÖ Cache de ativa√ß√£o inicializado")

    #####################################################################
    # O GRAFO DE LOGGING √â COMPILADO AQUI 
    app.state.logging_graph = create_new_thread_graph_logging(http_client=app.state.http_client,
                                              app_state=app.state)
    #####################################################################

    ############################################################################
    # O GRAFO DE ATENDIMENTO √â COMPILADO AQUI 
    app.state.support_graph = create_support_graph_template(
        http_client=app.state.http_client,
        app_state=app.state
    )
    ###########################################################################
    
    ###########################################################################
    # O GRAFO DE ATENDIMENTO √â COMPILADO AQUI

    app.state.activation_graph = create_activation_graph(
        http_client=app.state.http_client,
        app_state=app.state
    )

    ###########################################################################



    ####### FILA √â INICIADA AQUI ###########################################
    try:
        app.state.logging_queue = asyncio.Queue()
        print("Fila iniciada com sucesso")
    except:
        print("Problema ao iniciar a fila")
    ########################################################################
    
    # ‚úÖ NOVO: Auto-worker setup
    app.state.auto_worker_running = True
    print("‚úÖ Auto-worker flag ativada")
        
    # ‚úÖ NOVO: Iniciar auto-worker
    app.state.auto_worker_task = asyncio.create_task(
        auto_queue_worker(app.state)
    )
    print("‚úÖ Auto-worker iniciado (polling a cada 5s)")   
    ######################################
    
    

    yield

    # ‚úÖ PROCESSAR ITENS RESTANTES NA FILA
    remaining_items = app.state.logging_queue.qsize()
    if remaining_items > 0:
        print(f"üì¶ Processando {remaining_items} itens restantes na fila...")
        
        processed = 0
        while not app.state.logging_queue.empty():
            try:
                item = app.state.logging_queue.get_nowait()
                await app.state.logging_graph.ainvoke(item["state"], item["config"])
                processed += 1
                print(f"‚úÖ Item restante {processed} processado")
                
            except asyncio.QueueEmpty:
                break
            except Exception as e:
                print(f"‚ùå Erro ao processar item restante: {e}")
        
        print(f"‚úÖ {processed} itens restantes processados")
    else:
        print("‚úÖ Fila vazia - nada para processar")

    # # ‚úÖ FECHAR CLIENTE HTTP
    if hasattr(app.state, "http_client") and not app.state.http_client.closed:
        await app.state.http_client.close()
    ####################################################################

    # Limpeza ao encerrar
    if hasattr(app.state, "http_client") and not app.state.http_client.closed:
        await app.state.http_client.close()
    print("Application shutting down")

@asynccontextmanager
async def processing_lock(phone_number: str, app_state):
    if phone_number not in app_state.processing_locks:
        app_state.processing_locks[phone_number] = asyncio.Lock()
    
    lock = app_state.processing_locks[phone_number]
    print(f"üîí [LOCK] Aguardando lock para {phone_number}")
    
    async with lock:
        print(f"üîì [LOCK] Lock obtido para {phone_number}")
        try:
            yield
        finally:
            print(f"üîí [LOCK] Lock liberado para {phone_number}")

# Crie a aplica√ß√£o com o lifespan
app = FastAPI(lifespan=lifespan, default_response_class=ORJSONResponse)

###### Rotas ###############
chat_router = APIRouter()

debug_router = APIRouter()

tasks_router = APIRouter()
#############################

async def send_text_message_async(instance_name: str,
                                  api_key: str,
                                  phone_number: str, 
                                  message: str, 
                                  http_client: aiohttp.ClientSession) -> Dict[str, Any]:
    """
    Vers√£o ass√≠ncrona da fun√ß√£o send_text_message
    """
    # Inicializa o dicion√°rio de resultado
    result = {
        'success': False,
        'status_code': None,
        'message': '',
        'data': None
    }
    
    # Verifica√ß√£o de par√¢metros
    if not all([instance_name, api_key, phone_number, message]):
        result['message'] = "Todos os par√¢metros s√£o obrigat√≥rios: instance_name, api_key, phone_number, message"
        raise ValueError(result['message'])
    
    # URL do endpoint
    url = os.getenv("WHATSAPP_API_URL")
    
    # Cabe√ßalhos da requisi√ß√£o
    headers = {
        "Content-Type": "application/json",
        "apikey": api_key
    }
    
    # Dados para envio
    payload = {
        "number": phone_number,
        "text": message
    }
    

    try:
        start_time = time.time()
        # Usa o cliente HTTP passado como par√¢metro
        async with http_client.post(url, headers=headers, json=payload, timeout=15) as response:
            # Atualiza o c√≥digo de status no resultado
            result['status_code'] = response.status
            
            # Verifica se a requisi√ß√£o foi bem-sucedida (c√≥digo 2xx)
            if 200 <= response.status < 300:
                result['success'] = True
                result['message'] = "Mensagem enviada com sucesso"
                
                try:
                    # Tenta converter o JSON para dicion√°rio
                    result['data'] = await response.json()
                except:
                    result['success'] = False
                    result['message'] = "Resposta recebida, mas n√£o √© um JSON v√°lido"
                    result['data'] = {'raw_response': await response.text()}
            else:
                # Se n√£o foi bem-sucedida, tenta obter a mensagem de erro
                result['message'] = f"Erro na requisi√ß√£o: {response.status}"
                try:
                    result['data'] = await response.json()
                except:
                    result['data'] = {'raw_response': await response.text()}
        
        end_time = time.time()
        result['processing_time_ms'] = round((end_time - start_time) * 1000, 2)
        print(f"Tempo para envio ass√≠ncrono da mensagem: {result['processing_time_ms']:.2f} ms")
        
    except aiohttp.ClientError as e:
        result['message'] = f"Erro de conex√£o: {str(e)}"
        result['data'] = {'error_type': type(e).__name__}
    
    return result

async def insert_baserow_record_async(base_row_api_token: str, table_id: int, data: Dict[str, Any], base_url: str, http_client) -> Dict[str, Any]:
    """
    Vers√£o ass√≠ncrona da fun√ß√£o insert_baserow_record que utiliza um cliente HTTP compartilhado
    """
    # Verifica√ß√£o de par√¢metros
    if not base_row_api_token:
        raise ValueError("O token de API √© obrigat√≥rio")
    
    if not table_id:
        raise ValueError("O ID da tabela √© obrigat√≥rio")
    
    if not data or not isinstance(data, dict):
        raise ValueError("Os dados devem ser fornecidos como um dicion√°rio")
    
    # Configurar os cabe√ßalhos
    headers = {
        "Authorization": f"Token {base_row_api_token}",
        "Content-Type": "application/json"
    }
    
    # URL para cria√ß√£o do registro
    # Adicionar par√¢metro user_field_names=true
    url = f"{base_url}/api/database/rows/table/{table_id}/?user_field_names=true"

    # Log detalhado antes da requisi√ß√£o
    print("\n==== TENTATIVA DE INSER√á√ÉO NO BASEROW ====")
    print(f"URL: {url}")
    print(f"Dados a inserir:")
    print(json.dumps(data, indent=2))

    # ADICIONE ESTES LOGS DETALHADOS AQUI
    print(f"COMPLETO - URL: {url}")
    print(f"COMPLETO - Dados: {json.dumps(data, indent=2)}")
    print(f"COMPLETO - Cabe√ßalhos: {headers}")
    
    try:
        start_time = time.time()
        # Usar o cliente HTTP compartilhado em vez de criar uma nova sess√£o
        async with http_client.post(url, headers=headers, json=data, timeout=15) as response:
            # Capturar o texto da resposta antes de levantar exce√ß√£o
            response_text = await response.text()
            try:
                response_json = json.loads(response_text)
            except:
                response_json = {"raw_text": response_text}
                
            print(f"Status da resposta: {response.status}")
            print(f"Resposta do Baserow: {json.dumps(response_json, indent=2)}")
            
            # Agora levantar exce√ß√£o se houver erro
            response.raise_for_status()
            
            # Se chegou aqui, n√£o houve erro, converter a resposta para JSON
            result = response_json
            
        end_time = time.time()
        processing_time = round((end_time - start_time) * 1000, 2)
        print(f"Tempo para inserir registro ass√≠ncrono no Baserow: {processing_time:.2f} ms")
        
        # Adicionar tempo de processamento ao resultado
        if isinstance(result, dict):
            result['processing_time_ms'] = processing_time
        
        return result
    
    except aiohttp.ClientResponseError as e:
        print(f"Erro HTTP ao inserir registro: {e}")
        print(f"Detalhes completos do erro: {response_json}")
        # Retornar o erro em vez de levantar exce√ß√£o para n√£o interromper o processamento
        
            # Captura detalhes do erro
        try:
            error_details = await response.json()
        except:
            error_details = await response.text()
        
        print(f"Erro HTTP ao inserir registro: {e}")
        print(f"Detalhes completos do erro: {error_details}")
        
        print(f"Erro HTTP ao inserir registro: {e}")
    
        return {"error": str(e)}
    
    except aiohttp.ClientError as e:
        print(f"Erro de conex√£o ao inserir registro: {e}")
        return {"error": str(e)}
        
    except Exception as e:
        print(f"Erro inesperado ao inserir registro: {e}")
        return {"error": str(e)}

async def log_baserow_task(task):
    try:
        await task
    except Exception as e:
        print(f"Erro ao registrar no Baserow em segundo plano: {e}")

async def should_create_new_thread(phone_number: str, app_state):
   """
   Cria nova thread se n√£o existe thread ou se houve inatividade > 8 horas
   """
   current_time = int(time.time() * 1000)
   inactivity_threshold = 8 * 60 * 60 * 1000  # 8 horas

   print(f"[THREAD-DEBUG] üìû should_create_new_thread({phone_number})")
   print(f"[THREAD-DEBUG]   ‚è∞ Current time: {current_time}")
   print(f"[THREAD-DEBUG]   ‚è±Ô∏è Threshold: {inactivity_threshold}ms ({inactivity_threshold//3600000}h)")

   # Se n√£o tem thread registrada, criar nova
   if phone_number not in app_state.threads:
       print(f"[THREAD-DEBUG]   ‚úÖ DECIS√ÉO: CRIAR NOVA THREAD (sem thread anterior)")
       return True

   existing_thread_id = app_state.threads[phone_number]
   print(f"[THREAD-DEBUG]   ‚úÖ Thread existente encontrada: {existing_thread_id}")

   # Inicializar dicion√°rio de atividade se n√£o existir
   if not hasattr(app_state, 'last_thread_activity'):
       app_state.last_thread_activity = {}
   
   # Se n√£o tem registro de atividade, considerar como expirada
   if phone_number not in app_state.last_thread_activity:
       return True
   
   # Verificar inatividade
   last_activity = app_state.last_thread_activity[phone_number]
   inactive_time = current_time - last_activity
   
   if inactive_time > inactivity_threshold:
       return True  # Nova thread
   else:
       return False  # Manter thread existente

def determine_hil_status(
    is_outbound: bool, 
    is_from_human_agent: bool, 
    create_new_thread: bool, 
    current_hil_status: bool
) -> tuple[bool, str]:
    """
    Determina o status HIL baseado no contexto da mensagem.
    HIL = True √© IRREVERS√çVEL. Uma vez ativo, sistema NUNCA mais responde automaticamente.
    VERS√ÉO v1: IA √© puramente reativa (s√≥ responde, nunca inicia conversa)
    """
    
    # üö® REGRA CR√çTICA: HIL √© irrevers√≠vel
    if current_hil_status:
        return True, "HIL ativo - sistema PERMANENTEMENTE silencioso (irrevers√≠vel)"
    
    if not is_outbound and create_new_thread:
        # Cen√°rio 1: Cliente inicia nova conversa
        return False, "Cliente iniciou nova conversa - sistema processa automaticamente"
    
    elif not is_outbound and not create_new_thread:
        # Cen√°rio 2: Cliente continua conversa autom√°tica  
        return False, "Conversa autom√°tica ativa - sistema continua processando"
    
    elif is_outbound and is_from_human_agent:
        # Cen√°rio 3 + 4: Atendente interv√©m OU inicia conversa
        if create_new_thread:
            return True, "üö® ATENDENTE INICIOU conversa - Thread NASCE em HIL permanente"
        else:
            return True, "üö® ATENDENTE ASSUMIU controle - HIL permanente (irrevers√≠vel)"
    
    elif is_outbound and not is_from_human_agent:
        if create_new_thread:
            return False, "IA iniciando conversa proativa - sistema ativo para responder"
        else:
            return False, "IA enviando em conversa existente - sistema continua ativo"
    
    else:
        return True, "Cen√°rio n√£o mapeado - modo seguro (silencioso permanente)"

async def insert_messages_into_graph(
   phone_number: str,
   message: str,
   name: str,
   app_state: Any,
   support_graph: Any,
   thread_id: str,
   is_new_conversation: bool,
   is_outbound: bool = False,
   is_from_human_agent: bool = False,
   message_type: str = "HumanMessage",
   is_activation_flow: bool = False,
   activation_flow_name: Optional[str] = None,
   flow_to_intention_map: Optional[Dict[str, str]] = None
) -> Dict[str, Any]:
   """
   üîß TEMPLATE GEN√âRICO: Inser√ß√£o de mensagens em qualquer grafo
   
   Baseado na arquitetura medical assistant, mas adaptado para qualquer dom√≠nio.
   
   Args:
       phone_number: Identificador do cliente
       message: Conte√∫do da mensagem
       name: Nome do cliente
       app_state: Estado global da aplica√ß√£o
       support_graph: Grafo principal (nome gen√©rico para qualquer dom√≠nio)
       thread_id: ID da thread/conversa
       is_new_conversation: Se √© nova conversa
       is_outbound: Se mensagem √© sa√≠da
       is_from_human_agent: Se vem de atendente humano
       message_type: Tipo da mensagem (Human/AI/System)
       is_activation_flow: Se √© fluxo de ativa√ß√£o
       activation_flow_name: Nome do fluxo de ativa√ß√£o
       flow_to_intention_map: Mapeamento fluxo ‚Üí inten√ß√£o
   
   Returns:
       Dict com resultado da execu√ß√£o
       
   Note: 
       ASSISTANT_NAME, BUSINESS_CONTEXT e SPECIFIC_INFORMATION 
       devem ser configurados como constantes no template espec√≠fico
   """
   
   async with processing_lock(phone_number, app_state):
       
       # üõ°Ô∏è FILTRO DE SEGURAN√áA (OPCIONAL)
       # Descomente e customize conforme necess√°rio:
       # authorized_numbers = getattr(app_state, 'authorized_numbers', None)
       # if authorized_numbers and phone_number not in authorized_numbers:
       #     print(f"[SECURITY] ‚ùå N√∫mero {phone_number} n√£o autorizado")
       #     return {
       #         "status": "unauthorized",
       #         "phone_number": phone_number,
       #         "reason": "number_not_in_whitelist",
       #         "timestamp": int(time.time() * 1000)
       #     }
       
       print(f"[SECURITY] ‚úÖ N√∫mero autorizado - processando...")

       # üìã LOG DE ENTRADA
       print(f"\n[GRAPH-INSERT] üì• Iniciando inser√ß√£o de mensagem")
       print(f"[GRAPH-INSERT] üì± Phone: {phone_number}")
       print(f"[GRAPH-INSERT] üí¨ Message: {message[:50]}...")
       print(f"[GRAPH-INSERT] üë§ Name: {name}")
       print(f"[GRAPH-INSERT] üÜï Message Type: {message_type}")
       print(f"[GRAPH-INSERT] üîÑ Is Outbound: {is_outbound}")
       print(f"[GRAPH-INSERT] üë©‚Äçüíº Is From Human Agent: {is_from_human_agent}")
       print(f"[GRAPH-INSERT] üßµ Thread ID: {thread_id}")
       print(f"[GRAPH-INSERT] üÜï Nova conversa: {is_new_conversation}")
       print(f"[GRAPH-INSERT] üéØ Activation Flow: {is_activation_flow}")
       
       # ===== CONFIGURA√á√ÉO DA THREAD =====
       thread_config = {"configurable": {"thread_id": thread_id}}
       print(f"[GRAPH-INSERT] üîß Thread config: {thread_config}")
       
       try:
           # ===== DETERMINAR STATUS HIL =====
           if is_new_conversation:
               hil_status, hil_reason = determine_hil_status(
                   is_outbound=is_outbound,
                   is_from_human_agent=is_from_human_agent,
                   create_new_thread=True,
                   current_hil_status=False
               )
           else:
               # Consultar HIL atual da thread existente
               current_state = support_graph.get_state(thread_config)
               print(f"üîç DEBUG current_state type: {type(current_state)}")
               current_hil_status = current_state.values.get('HIL', False)

               if is_from_human_agent:
                   hil_status = True
                   hil_reason = "üö® ATENDENTE assumiu controle"
               else:
                   hil_status = current_hil_status
                   hil_reason = "HIL mantido do estado anterior"
           
           print(f"[GRAPH-INSERT] üè∑Ô∏è HIL DECIS√ÉO: {hil_status}")
           print(f"[GRAPH-INSERT] üìù RAZ√ÉO: {hil_reason}")
           
           # ===== CRIAR MENSAGEM BASEADA NO TIPO =====
           if message_type == "HumanMessage":
               graph_message = HumanMessage(content=message)
           elif message_type == "AIMessage":
               graph_message = AIMessage(content=message)
           elif message_type == "SystemMessage":
               graph_message = SystemMessage(content=message)
           else:
               # Fallback para HumanMessage
               graph_message = HumanMessage(content=message)
               print(f"[GRAPH-INSERT] ‚ö†Ô∏è Tipo desconhecido {message_type}, usando HumanMessage")
           
           # ===== PREPARAR INFORMA√á√ïES ESPEC√çFICAS DO DOM√çNIO =====
           # üéØ PLACEHOLDER: Configure estas constantes no seu template espec√≠fico
           ASSISTANT_NAME = "PLACEHOLDER_ASSISTANT_NAME"        # Ex: "Dra. C√°tia", "Suporte Tech"
           BUSINESS_CONTEXT = "PLACEHOLDER_BUSINESS_CONTEXT"    # Ex: "Cl√≠nica m√©dica..."
           SPECIFIC_INFORMATION = []  # Ex: [{"agenda": {...}}, {"produtos": [...]}]
           
           # ===== EXECU√á√ÉO DO GRAFO PRINCIPAL =====
           if is_new_conversation:
               # ===== CRIA√á√ÉO DE NOVA THREAD =====
               print(f"[GRAPH-INSERT] üÜï NOVA THREAD - CRIA√á√ÉO INICIAL")
               
               # üéØ ESTADO INICIAL GEN√âRICO
               initial_state = {
                   "messages": [graph_message],
                   "phone_number": phone_number,
                   "name": name,
                   "nome_assistente": ASSISTANT_NAME,           # ‚Üê Constante do template
                   "specific_information": SPECIFIC_INFORMATION, # ‚Üê Constante do template
                   "HIL": hil_status,
                   "business_context": BUSINESS_CONTEXT,        # ‚Üê Constante do template
                   "is_activation_flow": is_activation_flow,
                   "activation_flow_name": activation_flow_name,
                   "flow_to_intention_map": flow_to_intention_map,
                   # üÜï CAMPOS ADICIONAIS GEN√âRICOS
                   "previous_context": "",  # Pode ser preenchido conforme necess√°rio
                   "is_updating": False,
                   "_should_ignore": False,
                   "tipo_conversa": "nao_identificado",
                   "intencao": None,
                   "structured_response": None
                }
               
               print(f"[GRAPH-INSERT] üÜï Payload de cria√ß√£o inicial:")
               print(f"[GRAPH-INSERT]   üì± phone_number: {phone_number}")
               print(f"[GRAPH-INSERT]   üë§ name: {name}")
               print(f"[GRAPH-INSERT]   üè• assistente: {ASSISTANT_NAME}")
               print(f"[GRAPH-INSERT]   üßµ thread_id: {thread_id}")
               print(f"[GRAPH-INSERT]   üè∑Ô∏è HIL: {hil_status}")
               print(f"[GRAPH-INSERT]   üéØ activation_flow: {is_activation_flow}")
               
               print(f"[GRAPH-TIMING] ‚è±Ô∏è ANTES ainvoke: {int(time.time() * 1000)}")
               
               # ‚úÖ EXECUTAR GRAFO PRINCIPAL
               main_result = await support_graph.ainvoke(initial_state, thread_config)
               
               print(f"[GRAPH-TIMING] ‚è±Ô∏è DEPOIS ainvoke: {int(time.time() * 1000)}")
               
           else:
               # ===== ATUALIZA√á√ÉO DE THREAD EXISTENTE =====
               print(f"[GRAPH-INSERT] üîÑ THREAD EXISTENTE - ATUALIZA√á√ÉO")
               
               # üîç DEBUG ANTES DO UPDATE
               print(f"üîç DEBUG: ANTES do update_state")
               print(f"üîç   üì± Phone: {phone_number}")
               print(f"üîç   üßµ Thread ID: {thread_id}")
               print(f"üîç   üí¨ Mensagem tipo: {type(graph_message).__name__}")
               print(f"üîç   üí¨ Mensagem: {graph_message.content[:50]}...")

               # ‚è≥ AGUARDAR SE GRAFO ESTIVER OCUPADO
               print(f"üîÑ Verificando se grafo est√° livre...")
               while True:
                   fresh_state = support_graph.get_state(thread_config)
                   is_updating = fresh_state.values.get('is_updating', False)
                   
                   if not is_updating:
                       print(f"‚úÖ Grafo livre - pode atualizar")
                       break
                       
                   print(f"‚è≥ Grafo ocupado (is_updating=True) - aguardando...")
                   await asyncio.sleep(0.1)

               # ‚úÖ UPDATE STATE
               updated_config = support_graph.update_state(thread_config, {
                   "messages": [graph_message],
                   "HIL": hil_status,
                   "is_activation_flow": is_activation_flow,
                   "activation_flow_name": activation_flow_name,
                   "flow_to_intention_map": flow_to_intention_map
               })

               post_update_state = support_graph.get_state(updated_config)
               messages_after_update = post_update_state.values.get('messages', [])
               print(f"üîç AP√ìS UPDATE_STATE: {len(messages_after_update)} mensagens")
               for i, msg in enumerate(messages_after_update[-3:], 1):
                msg_type = "üë§" if hasattr(msg, 'type') and msg.type == 'human' else "ü§ñ"
                print(f"   {i}. {msg_type} {msg.content[:50]}...")   

            
               main_result = await support_graph.ainvoke({}, updated_config)

                # ‚úÖ ADICIONAR ESTE LOG TAMB√âM:
               final_state = support_graph.get_state(updated_config)
               final_messages = final_state.values.get('messages', [])
               print(f"üîç AP√ìS AINVOKE: {len(final_messages)} mensagens")


               #main_result = {"status": "updated", "config": updated_config}
           
           # ===== SISTEMA DE LOGGING ASS√çNCRONO =====
           logging_result = {"status": "error", "error": "not_processed"}
           
           try:
               # üìä PREPARAR ESTADO PARA LOGGING
               logging_name = os.getenv('AGENT_NAME', 'Sistema') if (is_outbound and not is_from_human_agent) else name
               print(f"[DEBUG PushName no Grafo] - {logging_name}")
               
               if is_new_conversation:
                   logging_state = {
                       "messages": [graph_message],
                       "phone_number": phone_number,
                       "name": logging_name,
                       "start_time": int(time.time() * 1000),
                       "thread_id": thread_id,
                       "message_timestamps": {},
                       "need_classify": False,
                       # üÜï CAMPOS GEN√âRICOS PARA LOGGING
                       "assistant_name": ASSISTANT_NAME,
                       "business_context": BUSINESS_CONTEXT,
                       "domain": getattr(app_state, 'domain_name', 'generic'),
                       "structured_response": main_result.get('structured_response')
                   }
               else:
                   logging_state = {
                       "messages": [graph_message],
                       "phone_number": phone_number,
                       "name": logging_name,
                       "need_classify": False,
                       "thread_id": thread_id,
                       "assistant_name": ASSISTANT_NAME,
                       "domain": getattr(app_state, 'domain_name', 'generic'),
                       "structured_response": main_result.get('structured_response')
                   }
               
               # üöÄ ADICIONAR √Ä FILA (N√ÉO BLOQUEIA)
               logging_item = {
                   "state": logging_state,
                   "config": thread_config,
                   "is_new_conversation": is_new_conversation,
                   "domain": getattr(app_state, 'domain_name', 'generic'),
                   "timestamp": int(time.time() * 1000)
               }
               
               print(f"[DEBUG-QUEUE] üîç ANTES de adicionar √† fila:")
               print(f"[DEBUG-QUEUE]   üì± Phone: {logging_state.get('phone_number')}")
               print(f"[DEBUG-QUEUE]   üë§ Name: {logging_state.get('name')}")
               print(f"[DEBUG-QUEUE]   üÜï Nova conversa: {is_new_conversation}")
               print(f"[DEBUG-QUEUE]   üè∑Ô∏è Dom√≠nio: {logging_item.get('domain')}")

               # ‚úÖ VERIFICAR SE FILA DE LOGGING EXISTE
               if hasattr(app_state, 'logging_queue'):
                   app_state.logging_queue.put_nowait(logging_item)
                   
                   print(f"[GRAPH-INSERT] ‚úÖ Item adicionado √† fila de logging")
                   print(f"[GRAPH-INSERT] üìä Fila agora tem {app_state.logging_queue.qsize()} itens")
                   
                   logging_result = {
                       "status": "queued",
                       "queue_size": app_state.logging_queue.qsize(),
                       "message": "Adicionado √† fila de logging"
                   }
               else:
                   print(f"[GRAPH-INSERT] ‚ö†Ô∏è Fila de logging n√£o configurada")
                   logging_result = {
                       "status": "no_queue",
                       "message": "Sistema de logging n√£o configurado"
                   }
               
           except asyncio.QueueFull:
               print(f"[GRAPH-INSERT] ‚ö†Ô∏è Fila cheia - item perdido")
               logging_result = {
                   "status": "queue_full",
                   "error": "Fila de logging cheia",
                   "queue_size": app_state.logging_queue.qsize()
               }
               
           except Exception as e:
               print(f"[GRAPH-INSERT] ‚ùå Erro ao adicionar √† fila: {e}")
               logging_result = {
                   "status": "error",
                   "error": str(e),
                   "queue_size": getattr(app_state.logging_queue, 'qsize', lambda: 0)()
               }
           
           # ===== RESULTADO FINAL =====
           result = {
               "main_result": main_result,
               "logging_result": logging_result,
               "thread_id": thread_id,
               "is_outbound": is_outbound,
               "is_from_human_agent": is_from_human_agent,
               "hil_status": hil_status,
               "hil_reason": hil_reason,
               "phone_number": phone_number,
               "thread_created": is_new_conversation,
               "execution_type": "activation_flow_skipped" if is_activation_flow else "support_sync_logging_queued",
               "message_type": message_type,
               "timestamp": int(time.time() * 1000),
               # üÜï CAMPOS GEN√âRICOS ADICIONAIS
               "assistant_name": ASSISTANT_NAME,
               "domain": getattr(app_state, 'domain_name', 'generic')
           }
           
           print(f"[GRAPH-INSERT] üéØ Inser√ß√£o conclu√≠da")
           print(f"[GRAPH-INSERT] üìä Grafo principal: {'pulado' if is_activation_flow else 'executado'}")
           print(f"[GRAPH-INSERT] üì¶ Logging: {'na fila' if hasattr(app_state, 'logging_queue') else 'n√£o configurado'}")
           
           return result
           
       except Exception as e:
           print(f"[GRAPH-INSERT] ‚ùå Erro cr√≠tico na inser√ß√£o: {e}")
           print(f"[GRAPH-INSERT] ‚ùå Traceback: {traceback.format_exc()}")
           return {
               "error": str(e),
               "phone_number": phone_number,
               "thread_id": thread_id,
               "hil_status": hil_status if 'hil_status' in locals() else None,
               "message_type": message_type,
               "timestamp": int(time.time() * 1000),
               "domain": getattr(app_state, 'domain_name', 'generic')
           }

@chat_router.post("/send", response_model=None)
async def send_message(payload: dict, request: Request):
    try:
        start_time = time.time()

        # üÜï ADICIONAR AQUI (ap√≥s start_time):
        is_activation_flow = 'activation_flow' in payload
        flow_name = payload.get('flow_name', 'default') if is_activation_flow else 'normal'

        print(f"[/send] üéØ Tipo de fluxo: {'ATIVA√á√ÉO' if is_activation_flow else 'NORMAL'}")
        if is_activation_flow:
            print(f"[/send] üìã Flow Name: {flow_name}")
            
            # üåå CACHE PARA DOMINA√á√ÉO GAL√ÅCTICA
            phone_number = payload.get('phone_number')  # ‚Üê PEGAR DO PAYLOAD
            cache_key = f"{phone_number}_{int(time.time())}"
            request.app.state.activation_cache[cache_key] = flow_name
            print(f"[/send] üéØ Cache: {cache_key} = {flow_name}")
        
        # Obter o cliente HTTP compartilhado
        http_client = request.app.state.http_client
        print(f"Cliente HTTP obtido da app.state: {http_client is not None}")
        
        # Obter valores das vari√°veis de ambiente
        instance_name = os.getenv("WHATSAPP_API_INSTANCE")
        api_key = os.getenv("WHATSAPP_API_TOKEN")
        
        # Criar uma c√≥pia do payload para n√£o modificar o original
        payload_completo = payload.copy()
        
        # Adicionar os valores das vari√°veis de ambiente ao payload
        # Apenas se n√£o foram fornecidos na requisi√ß√£o
        if "evolution_api_key" not in payload_completo:
            payload_completo["evolution_api_key"] = api_key
        if "instance_name" not in payload_completo:
            payload_completo["instance_name"] = instance_name
        
        # Valida√ß√£o manual m√≠nima apenas do essencial
        if not all(k in payload_completo for k in ['phone_number', 'message', 'type']):
            print("ERRO: Par√¢metros obrigat√≥rios ausentes")
            return JSONResponse(status_code=400, content={"error": "Par√¢metros obrigat√≥rios ausentes (phone_number, message, type)"})
        
        # Determinar o ID da tabela a ser usado
        conversas_table_id = os.getenv("BASEROW_MESSAGE_TABLE_ID")
        grafos_table_id = os.getenv("BASEROW_GRAPH_TABLE_ID")
        instance_name = payload_completo.get('instance_name')
        
        #print(f"‚ö†Ô∏è Usando inst√¢ncia: {instance_name}, tabela de mensagens: {conversas_table_id} | tabela de grafos: {grafos_table_id}")

        # Envio da mensagem (agora passando o http_client)
        #print("\n--- Iniciando envio da mensagem via Evolution API ---")
        message_result = await send_text_message_async(
            payload_completo.get('instance_name'),
            payload_completo.get('evolution_api_key'),
            payload_completo.get('phone_number'),
            payload_completo.get('message'),
            http_client=http_client
        )
        print(f"Resultado do envio da mensagem: {message_result}")

        # ‚úÖ CORRE√á√ÉO APLICADA: Remover processamento do /send
        # O webhook receber√° o evento 'send.message' e processar√° automaticamente
        print(f"[/send] ‚úÖ Mensagem enviada - processamento ser√° feito pelo webhook")
        print(f"[/send] üéØ Webhook processar√° com pushName correto e sem duplica√ß√£o")

        # Retorna o resultado padronizado
        end_time = time.time()
        processing_time = round((end_time - start_time) * 1000, 2)
        print(f"\nTempo total de processamento: {processing_time} ms")
        print("==== FIM DE PROCESSAMENTO DO ENDPOINT /send ====\n")
        
        return JSONResponse(content={
        "message_result": message_result,
        "baserow_logged": "delegated_to_webhook",
        "baserow_result": {"message": "Processamento delegado ao webhook"},
        "processing_delegated": True,
        "processing_time_ms": processing_time,
        "is_activation_flow": is_activation_flow,
        "flow_name": flow_name,
    })
        
    except Exception as e:
        print(f"ERRO CR√çTICO em /send: {e}")
        print(f"Detalhes do erro: {traceback.format_exc()}")
        return JSONResponse(status_code=500, content={"error": str(e)})

@chat_router.post("/webhook", response_model=None)
async def process_whatsapp_webhook(request: Request):
    try:
        start_time = time.time()
        
        # Obt√©m o payload da requisi√ß√£o
        payload = await request.json()

        # S√ì para SystemMessage:
        #if payload.get('type') == 'SystemMessage':
        #    print(f"[WEBHOOK-SYSTEM-DEBUG] üì• Payload recebido de SystemMessage:")
        #    print(f"[WEBHOOK-SYSTEM-DEBUG] Keys no payload: {list(payload.keys())}")
        #    print(f"[WEBHOOK-SYSTEM-DEBUG] Phone number extra√≠do: {payload.get('data', {}).get('key', {}).get('remoteJid', 'N√ÉO_ENCONTRADO')}")

        #print(f"[/webhook] RECEBIDO EVENTO: {payload.get('event')}")

        # LOG ADICIONAL PARA DEBUG
        #print("[/webhook] Payload completo:", json.dumps(payload, indent=2))
        
        # Obter o cliente HTTP compartilhado
        http_client = request.app.state.http_client
        
        # Obt√©m o endpoint de encaminhamento do estado da aplica√ß√£o
        forward_endpoint = request.app.state.webhook_forward_endpoint
        
        
        # Extrair os campos espec√≠ficos necess√°rios
        event = payload.get('event', '')
        instance = payload.get('instance', '')
        
        # Extrair dados aninhados
        data = payload.get('data', {})
        push_name = data.get('pushName', '')

        #print(f"[/webhook] pushName final: '{push_name}'")
        
        # Verificar se √© uma mensagem do pr√≥prio sistema
        original_from_me = data.get('key', {}).get('fromMe', False)
        
        # Distinguir entre mensagens do bot e mensagens de atendentes humanos
        # ‚úÖ NOVA L√ìGICA (CORRETA):
        if event == 'send.message':
            # Sistema autom√°tico (/send)
            push_name = os.getenv('AGENT_NAME', 'Sistema')
            print(f"[DEBUG-PUSHNAME] üîç Evento: {event}")
            print(f"[DEBUG-PUSHNAME] üîç pushName original: '{push_name}'")
            print(f"[DEBUG-PUSHNAME] üîç fromMe: {original_from_me}")
            is_from_human_agent = False
            is_bot_message = True
        elif event == 'messages.upsert' and original_from_me:
            # Atendente humano
            is_from_human_agent = True
            is_bot_message = False
        else:
            # Cliente (messages.upsert + fromMe=false)
            is_from_human_agent = False
            is_bot_message = False

        # O resto do c√≥digo permanece EXATAMENTE igual:
        from_me = original_from_me

        #print(f"[/webhook] FromMe original: {original_from_me}, Mensagem de atendente: {is_from_human_agent}, Mensagem do bot: {is_bot_message}, FromMe ajustado: {from_me}")
        
        # Extrair remoteJid (n√∫mero do telefone)
        raw_remote_jid = data.get('key', {}).get('remoteJid', '').split('@')[0]
        
        # Normalizar o n√∫mero de telefone
        def normalize_phone_number(phone: str):
            """
            Normaliza o n√∫mero de telefone para um formato padr√£o:
            - Remove caracteres n√£o num√©ricos
            - Verifica se o n√∫mero come√ßa com 55 (Brasil)
            - Garante que h√° o 9 na posi√ß√£o correta para celulares
            """
            # Remover todos os caracteres n√£o num√©ricos
            digits_only = re.sub(r'\D', '', phone)
            
            # Se n√£o come√ßa com 55 (Brasil), adicionar
            if not digits_only.startswith('55'):
                digits_only = '55' + digits_only
            
            # Para celulares, garantir que o nono d√≠gito (9) est√° presente
            # Se o n√∫mero tiver DDD + 8 d√≠gitos, inserir o 9
            if len(digits_only) == 12 and digits_only.startswith('55'):  # 55 + DDD (2) + n√∫mero (8)
                ddd = digits_only[2:4]
                number = digits_only[4:]
                digits_only = '55' + ddd + '9' + number
            
            return digits_only
        
        # Aplicar a normaliza√ß√£o
        remote_jid = normalize_phone_number(raw_remote_jid)
        
        # Adicionar logs para debug
        #print(f"[/webhook] N√∫mero original: {raw_remote_jid}, Normalizado: {remote_jid}")
        #print(f"[/webhook] FromMe original: {original_from_me}, Mensagem de atendente: {is_from_human_agent}, Mensagem do bot: {is_bot_message}, FromMe ajustado: {from_me}")
        
        
        # No seu webhook onde detectamos o √°udio
        # Dentro da fun√ß√£o process_whatsapp_webhook
        # Ap√≥s extrair os dados da mensagem

        message_data = data.get('message', {})
        conversation = message_data.get('conversation', '')

        #Verificar se √© uma mensagem com imagem
        if 'imageMessage' in message_data:
            caption = message_data['imageMessage'].get('caption', '')
            if caption:
                conversation = f"[Imagem recebida: {caption}]"
            else:
                conversation = "[Imagem recebida]"
            print(f"[IMAGEM] Processada: {conversation}")
        else:
            # Processar normalmente para outros tipos
            conversation = message_data.get('conversation', '')
        
        # Verificar se √© uma mensagem de √°udio
        if 'audioMessage' in message_data:
            # Extrair dados do √°udio
            audio_data = message_data.get('audioMessage', {})
            
            # Extrair metadados importantes
            seconds = audio_data.get('seconds', 0)
            
            # Formatar a dura√ß√£o de forma amig√°vel
            if seconds < 60:
                duration_text = f"{seconds} segundo{'s' if seconds != 1 else ''}"
            else:
                minutes = seconds // 60
                remaining_seconds = seconds % 60
                if remaining_seconds == 0:
                    duration_text = f"{minutes} minuto{'s' if minutes > 1 else ''}"
                else:
                    duration_text = f"{minutes} minuto{'s' if minutes > 1 else ''} e {remaining_seconds} segundo{'s' if remaining_seconds != 1 else ''}"
            
            # Criar mensagem amig√°vel
            conversation = f"[√Åudio de {duration_text}]"
            
            # Gerar ID √∫nico para refer√™ncia futura se necess√°rio
            audio_id = str(uuid.uuid4())
            
            print(f"[√ÅUDIO] Detectado √°udio de {duration_text}. ID: {audio_id}")
        
                # üìπ V√≠deos
        
        if 'videoMessage' in message_data:
            video_data = message_data.get('videoMessage', {})
            caption = video_data.get('caption', '')
            seconds = video_data.get('seconds', 0)
            
            if caption:
                conversation = f"[V√≠deo de {seconds}s recebido: {caption}]"
            else:
                conversation = f"[V√≠deo de {seconds}s recebido]"

        # üìÑ Documentos
        if 'documentMessage' in message_data:
            doc_data = message_data.get('documentMessage', {})
            filename = doc_data.get('fileName', 'documento')
            
            conversation = f"[Documento recebido: {filename}]"

        # üìç Localiza√ß√£o
        if 'locationMessage' in message_data:
            conversation = "[Localiza√ß√£o compartilhada]"


        # Extrair timestamp da mensagem
        message_timestamp = int(time.time()*1000)

        # ‚úÖ CORRE√á√ÉO: Determinar message_type - VERIFICAR PAYLOAD PRIMEIRO
        payload_type = payload.get('type')  # SystemMessage vem aqui!
        
        if payload_type:
            # Se veio tipo espec√≠fico no payload (ex: SystemMessage)
            message_type = payload_type
            print(f"[/webhook] Tipo de mensagem do payload: {message_type}")
        elif event == 'send.message':
            # Fallback para eventos send.message sem tipo espec√≠fico
            message_type = "AIMessage"
            print(f"[/webhook] Tipo de mensagem por evento: {message_type} (send.message)")
        else:  # messages.upsert
            # Mensagens recebidas de usu√°rios
            message_type = "HumanMessage"
            print(f"[/webhook] Tipo de mensagem por evento: {message_type} (messages.upsert)")

        # ‚úÖ MANTER: Verifica√ß√£o adicional em message_data (para casos espec√≠ficos)
        if message_data and isinstance(message_data, dict) and "type" in message_data:
            message_data_type = message_data.get("type")
            print(f"[/webhook] Tipo tamb√©m encontrado em message_data: {message_data_type}")
            # S√≥ sobrescrever se n√£o t√≠nhamos tipo no payload
            if not payload_type:
                message_type = message_data_type

        print(f"[/webhook] Tipo de mensagem FINAL determinado: {message_type}")

        # Verificar se h√° um endpoint de encaminhamento configurado
        forwarding_result = None
        if forward_endpoint and conversation:
            try:
                # Configurar a requisi√ß√£o para o endpoint de destino com n√∫mero normalizado
                forward_payload = {
                    "conversation": conversation,
                    "phone_number": remote_jid,  # Usando o n√∫mero normalizado
                    "push_name": push_name,
                    "from_me": from_me,          # TRUE apenas para mensagens de atendentes humanos
                    "is_bot_message": is_bot_message,  # TRUE para mensagens autom√°ticas do bot
                    "original_from_me": original_from_me,
                    "raw_phoneNumber": raw_remote_jid,
                    "message_type": message_type,
                    "message_timestamp": message_timestamp,
                      # O valor original para refer√™ncia
                }
                
                #print(f"[/webhook] Encaminhando para {forward_endpoint} com n√∫mero {remote_jid}")
                
                async with http_client.post(forward_endpoint, json=forward_payload, timeout=10) as forward_response:
                    forwarding_result = {
                        "status_code": forward_response.status,
                        "response": await forward_response.json() if forward_response.content_type == 'application/json' else None
                    }
                    
            except Exception as forward_error:
                print(f"[/webhook] Erro ao encaminhar: {str(forward_error)}")
                forwarding_result = {
                    "error": str(forward_error)
                }
        
        # Inicializar vari√°veis para o resultado da inser√ß√£o no Baserow
        baserow_logged = False
        baserow_result = None
        
        # Retorna o resultado padronizado - IMPORTANTE: este return est√° FORA do bloco except do Baserow
        end_time = time.time()
        return JSONResponse(content={
            "baserow_logged": baserow_logged,
            "baserow_result": baserow_result,
            "forwarded": bool(forward_endpoint),
            "forwarding_result": forwarding_result,
            "original_phone": raw_remote_jid,
            "normalized_phone": remote_jid,
            "is_bot_message": is_bot_message,
            "is_from_human_agent": is_from_human_agent,
            "from_me_original": original_from_me,
            "from_me_adjusted": from_me,
            "processing_time_ms": round((end_time - start_time) * 1000, 2)
        })
    
    except json.JSONDecodeError:
        return JSONResponse(status_code=400, content={"error": "Payload inv√°lido - JSON mal formatado"})
    
    except Exception as e:
        return JSONResponse(status_code=500, content={
            "error": str(e),
            "details": traceback.format_exc()
        })

@chat_router.post("/agent", response_model=None)
async def receive_return_messages(request: Request):
    
    # Tempo m√°ximo de intervalo para combinar mensagens (5 segundos)
    message_combine_threshold = 5 * 1000

    try:
        payload = await request.json()
        #print("[/agent] Payload completo:", json.dumps(payload, indent=2))
        
        http_client = request.app.state.http_client

        conversation = payload.get('conversation')
        phone_number = payload.get('phone_number', '')
        raw_phone_number = payload.get("raw_phoneNumber")
        
        pushName = (os.getenv('AGENT_NAME', "guardIA agente IA") 
                   if payload.get('is_bot_message', False) 
                   else payload.get('push_name', "Cliente"))
        
        # ‚úÖ ADICIONE ESTES LOGS DE DEBUG:
        print(f"[DEBUG-PUSHNAME-AGENT] üîç is_bot_message: {payload.get('is_bot_message', False)}")
        print(f"[DEBUG-PUSHNAME-AGENT] üîç pushName original: {payload.get('push_name', 'VAZIO')}")
        print(f"[DEBUG-PUSHNAME-AGENT] üîç pushName FINAL: {pushName}")
        print(f"[DEBUG-PUSHNAME-AGENT] üîç AGENT_NAME env: {os.getenv('AGENT_NAME', 'NAO_DEFINIDO')}")

        message_timestamp = payload.get('message_timestamp')

        # Gravar timestamp da √∫ltima mensagem
        if message_timestamp:
            # Salvar no app.state
            request.app.state.last_message_timestamps[phone_number] = message_timestamp
            print(f"üïê Timestamp salvo: {phone_number} ‚Üí {message_timestamp}")

        # üåå VERIFICAR CACHE FLUXO DE ATIVA√á√ÉO
        is_activation_flow = False
        flow_name = "normal"

        for key in list(request.app.state.activation_cache.keys()):
            if key.startswith(f"{phone_number}_"):
                flow_name = request.app.state.activation_cache.pop(key)
                is_activation_flow = True
                print(f"[/agent] üéØ Detectado: {flow_name}")
                break
        
        # üÜï OBTER O message_type DO WEBHOOK
        webhook_message_type = payload.get('message_type', 'HumanMessage')
        
        # üÜï IDENTIFICA√á√ÉO CORRETA DE ORIGEM DAS MENSAGENS
        from_me = payload.get('from_me', False)  # TRUE apenas para mensagens de atendentes humanos
        is_bot_message = payload.get('is_bot_message', False)  # TRUE para mensagens autom√°ticas do bot
        original_from_me = payload.get('original_from_me', False)  # Valor original de fromMe

        # üÜï L√ìGICA CLARA DE CLASSIFICA√á√ÉO
        is_human_agent_message = from_me and not is_bot_message
        is_system_message = from_me and is_bot_message
        is_client_message = not from_me

        #print(f"[/agent] üìù An√°lise da mensagem:")
        #print(f"[/agent] üì± Phone: {phone_number}")
        #print(f"[/agent] üë§ Push Name: {pushName}")
        print(f"[/agent] üí¨ Message: {conversation[:50]}...")
        #print(f"[/agent] üÜï Message Type (webhook): {webhook_message_type}")  # üÜï LOG NOVO
        #print(f"[/agent] üè∑Ô∏è from_me: {from_me}")
        #print(f"[/agent] ü§ñ is_bot_message: {is_bot_message}")
        #print(f"[/agent] üë©‚Äçüíº Is Human Agent: {is_human_agent_message}")
        #print(f"[/agent] üîß Is System Message: {is_system_message}")
        #print(f"[/agent] üë§ Is Client Message: {is_client_message}")

        # Verificar inicializa√ß√£o de estado
        if not hasattr(request.app.state, 'threads'):
            request.app.state.threads = {}
        if not hasattr(request.app.state, 'last_messages'):
            request.app.state.last_messages = {}
        if not hasattr(request.app.state, 'combined_messages_status'):
            request.app.state.combined_messages_status = {}
        if not hasattr(request.app.state, 'conversation_ownership'):
            request.app.state.conversation_ownership = {}
        # üïê TIMESTAMP TRACKING (se ainda n√£o existe)
        if not hasattr(app.state, 'last_message_timestamps'):
            request.app.state.last_message_timestamps = {}

        # ===== L√ìGICA DE COMBINA√á√ÉO DE MENSAGENS (MANTIDA IGUAL) =====
        current_time = int(time.time() * 1000)
        combined_message = conversation
        should_combine = False
        message_to_process = conversation
        
        # üÜï S√ì COMBINAR MENSAGENS DE CLIENTES (n√£o de atendentes ou sistema)
        if is_client_message:
            # Limpar status anterior
            if phone_number in request.app.state.combined_messages_status:
                #print(f"[DEBUG-COMBINE] Limpando status anterior para {phone_number}")
                del request.app.state.combined_messages_status[phone_number]
            
            if phone_number in request.app.state.last_messages:
                last_message = request.app.state.last_messages[phone_number]
                time_diff = current_time - last_message["timestamp"]
                
                #print(f"[DEBUG-COMBINE] √öltima mensagem: '{last_message['text']}'")
                #print(f"[DEBUG-COMBINE] Intervalo: {time_diff} ms")
                
                # Combinar mensagens se intervalo <= threshold
                if time_diff <= message_combine_threshold:
                    combined_message = f"{last_message['text']} {conversation}"
                    should_combine = True
                    #print(f"[DEBUG-COMBINE] Combinando: '{combined_message}'")

                    request.app.state.combined_messages_status[phone_number] = {
                        "has_combined_messages": True,
                        "combined_message": combined_message,
                        "timestamp": current_time,
                        "time_diff_ms": time_diff
                    }

                    message_to_process = combined_message
                    #print(f"[DEBUG-COMBINE] Flag definida: has_combined_messages=True")
            
            # Atualizar registro da √∫ltima mensagem (s√≥ para clientes)
            request.app.state.last_messages[phone_number] = {
                "text": conversation,  # Mensagem original, n√£o combinada
                "timestamp": current_time
            }
        else:
            print(f"[DEBUG-COMBINE] Mensagem de atendente/sistema - n√£o combinando")

        # ===== PROCESSAMENTO UNIFICADO (NOVA ABORDAGEM) =====
        
        # Determinar message_to_process final
        if is_client_message:
            final_message = message_to_process  # J√° definido na l√≥gica de combina√ß√£o
        else:
            final_message = conversation  # Atendente/Sistema usam mensagem original

        # Determinar par√¢metros da fun√ß√£o
        if is_human_agent_message:
            print("[/agent] #### MENSAGEM DE ATENDENTE HUMANO #####")
            process_is_outbound = True
            process_is_from_human_agent = True

            request.app.state.conversation_ownership[phone_number] = {
                'status': 'human_active',
                'timestamp': int(time.time() * 1000),
                'agent_detected': True
            } #Gravando no estado que est√° em atendimento humano

            
        elif is_system_message:
            print("[/agent] #### MENSAGEM DO SISTEMA (BOT) #####")
            process_is_outbound = True
            process_is_from_human_agent = False
            
        else:  # is_client_message
            print("[/agent] #### MENSAGEM DE CLIENTE REGULAR #####")
            process_is_outbound = False
            process_is_from_human_agent = False


         #Verificar se threads foi inicializado
        if not hasattr(request.app.state, 'threads'):
            request.app.state.threads = {}
            #print("üîß Inicializando dicion√°rio de threads")

        # ‚úÖ USAR A FUN√á√ÉO should_create_new_thread QUE J√Å EXISTE
        should_create_new = await should_create_new_thread(
            phone_number, 
            request.app.state)
        
        print(f"[THREAD-DEBUG] Should create new: {should_create_new}")

        if should_create_new or phone_number not in request.app.state.threads:
            # Criar nova thread
            thread_id = generate_uuid()
            request.app.state.threads[phone_number] = thread_id
            
            # üîß CORRE√á√ÉO: Atualizar atividade imediatamente
            if not hasattr(request.app.state, 'last_thread_activity'):
                request.app.state.last_thread_activity = {}
            request.app.state.last_thread_activity[phone_number] = int(time.time() * 1000)
            
            print(f"üÜï Nova thread criada para {phone_number}: {thread_id}")
            is_new_conversation = True
        else:
            # Usar thread existente
            thread_id = request.app.state.threads[phone_number]
            print(f"‚ôªÔ∏è Usando thread existente para {phone_number}: {thread_id}")
            is_new_conversation = False


        is_activation_flow_value=is_activation_flow

        # ===== UMA √öNICA CHAMADA UNIFICADA =====
        result = await insert_messages_into_graph(
            phone_number=phone_number,
            message=final_message,
            name=pushName,
            app_state=request.app.state,
            support_graph=request.app.state.support_graph,
            thread_id=thread_id,  # ‚úÖ OBRIGAT√ìRIO
            is_new_conversation=is_new_conversation,  # ‚úÖ OBRIGAT√ìRIO
            is_outbound=process_is_outbound,  # ‚úÖ OPCIONAL
            is_from_human_agent=process_is_from_human_agent,  # ‚úÖ OPCIONAL
            message_type=webhook_message_type,
            is_activation_flow=is_activation_flow_value,
            activation_flow_name=flow_name,
            flow_to_intention_map=FLOW_TO_INTENTION_MAP,  # ‚úÖ OPCIONAL
            # ‚úÖ ADICIONAR: Campos do Guga com valores padr√£o
        )

        # Atualizar atividade da thread
        if not hasattr(request.app.state, 'last_thread_activity'):
            request.app.state.last_thread_activity = {}
        request.app.state.last_thread_activity[phone_number] = int(time.time() * 1000)

        # Log de confirma√ß√£o
        message_types = ["Cliente", "Sistema", "Atendente"]
        type_index = int(process_is_outbound) + int(process_is_from_human_agent)
        print(f"[/agent] ‚úÖ {message_types[type_index]} processado")

        # ===== PREPARAR RESPOSTA (MANTIDA IGUAL) =====
        
        has_combined_messages = False
        combined_status = None
        if phone_number in request.app.state.combined_messages_status:
            has_combined_messages = request.app.state.combined_messages_status[phone_number].get("has_combined_messages", False)
            combined_status = request.app.state.combined_messages_status[phone_number]

        return {
            "status": "success", 
            "conversation": conversation, 
            "phone_number": phone_number, 
            "result": result,
            "has_combined_messages": has_combined_messages,
            "combined_status": combined_status,
            "combined_message": combined_message if should_combine else None,
            "is_human_agent": is_human_agent_message,
            "is_system_message": is_system_message,
            "is_client_message": is_client_message,
            "message_processed": message_to_process,
            # üÜï Informa√ß√µes HIL para debug
            "hil_info": {
                "hil_status": result.get("hil_status") if isinstance(result, dict) else None,
                "hil_reason": result.get("hil_reason") if isinstance(result, dict) else None
            }
        }
    
    except Exception as e:
        print(f"[/agent] ‚ùå Erro ao processar: {str(e)}")
        print(f"[/agent] ‚ùå Traceback: {traceback.format_exc()}")
        return {
            "status": "error",
            "error": str(e),
            "traceback": traceback.format_exc()
        }
    finally:
        print("[/agent] üèÅ Processamento finalizado")

@chat_router.post("/test-system-message", response_model=None)
async def test_system_message(request: Request):
    """
    Endpoint de teste para validar se SystemMessages entram corretamente no grafo
    
    Body esperado:
    {
        "phone_number": "5511999999999",
        "message": "Teste de SystemMessage - usu√°rio conectado ao sistema"
    }
    """
    try:
        start_time = time.time()
        
        # Obter payload da requisi√ß√£o
        payload = await request.json()
        
        # Validar par√¢metros obrigat√≥rios
        phone_number = payload.get('phone_number')
        message = payload.get('message')
        
        if not phone_number or not message:
            return JSONResponse(
                status_code=400, 
                content={
                    "error": "Par√¢metros obrigat√≥rios: phone_number, message",
                    "example": {
                        "phone_number": "5511999999999",
                        "message": "Teste de SystemMessage"
                    }
                }
            )
        
        # Obter cliente HTTP compartilhado
        http_client = request.app.state.http_client
        
        print(f"[TEST-SYSTEM] üß™ Iniciando teste de SystemMessage")
        print(f"[TEST-SYSTEM] üì± Phone: {phone_number}")
        print(f"[TEST-SYSTEM] üí¨ Message: {message}")
        
        # Chamar a fun√ß√£o send_system_message
        result = await send_system_message(
            phone_number=phone_number,
            message=message,
            http_client=http_client
        )
        
        # Verificar se houve erro
        if "error" in result:
            print(f"[TEST-SYSTEM] ‚ùå Erro na send_system_message: {result['error']}")
            return JSONResponse(
                status_code=500,
                content={
                    "test_status": "FAILED",
                    "error": result["error"],
                    "step_failed": "send_system_message"
                }
            )
        
        # Aguardar um pouco para o processamento ass√≠ncrono
        print(f"[TEST-SYSTEM] ‚è≥ Aguardando processamento ass√≠ncrono...")
        await asyncio.sleep(2)  # 2 segundos para garantir que processou
        
        # Verificar se a mensagem entrou no grafo
        # (Aqui voc√™ pode adicionar uma consulta ao grafo se tiver uma fun√ß√£o para isso)
        
        end_time = time.time()
        processing_time = round((end_time - start_time) * 1000, 2)
        
        print(f"[TEST-SYSTEM] ‚úÖ Teste conclu√≠do em {processing_time}ms")
        
        return JSONResponse(content={
            "test_status": "SUCCESS",
            "message": "SystemMessage enviada com sucesso! üéØ",
            "phone_number": phone_number,
            "test_message": message,
            "send_system_message_result": result,
            "processing_time_ms": processing_time,
            "logs_to_watch": [
                "üîç PROCURE ESTES LOGS:",
                "[send_system_message] üì§ Enviando para webhook",
                "[/webhook] RECEBIDO EVENTO: send.message", 
                "[/webhook] Tipo de mensagem FINAL determinado: SystemMessage",
                "[/agent] #### MENSAGEM DO SISTEMA (BOT) #####",
                "[/agent] ‚úÖ Sistema processado"
            ],
            "success_criteria": "‚úÖ Se todos os logs acima aparecerem, o teste foi bem-sucedido!"
        })
        
    except Exception as e:
        print(f"[TEST-SYSTEM] üí• Erro cr√≠tico: {str(e)}")
        print(f"[TEST-SYSTEM] üìã Traceback: {traceback.format_exc()}")
        
        return JSONResponse(
            status_code=500,
            content={
                "test_status": "FAILED", 
                "error": str(e),
                "traceback": traceback.format_exc(),
                "step_failed": "endpoint_execution"
            }
        )

@chat_router.post("/graph-state")
async def get_graph_state(payload: dict, request: Request):
    # Validar se thread_id est√° presente
    if "thread_id" not in payload:
        return {
            "error": "thread_id √© obrigat√≥rio",
            "exemplo": {
                "thread_id": "uuid-da-thread",
                "graph": "support"
            }
        }
    
    thread_id = payload["thread_id"]
    graph = payload.get("graph", "support")
    
    # Validar se thread_id n√£o est√° vazio
    if not thread_id or str(thread_id).strip() == "":
        return {
            "error": "thread_id n√£o pode estar vazio",
            "thread_id_recebido": thread_id
        }
    
    config = {"configurable": {"thread_id": thread_id}}
    
    try:
        if graph == "support":
            return request.app.state.support_graph.get_state(config).values
        elif graph == "logging":
            return request.app.state.logging_graph.get_state(config).values
        elif graph == "activation":
            return request.app.state.activation_graph.get_state(config).values
        else:
            return {
                "error": "graph deve ser: support, logging ou activation",
                "graph_recebido": graph,
                "opcoes_validas": ["support", "logging", "activation"]
            }
    
    except Exception as e:
        return {
            "error": f"Erro ao obter estado do grafo: {str(e)}",
            "thread_id": thread_id,
            "graph": graph
        }

@app.post("/process-logging-queue")
async def process_logging_queue() -> Dict[str, Any]:
    """
    Processa todos os itens da fila de logging
    Acionado sob demanda
    
    Returns:
        Dict com estat√≠sticas do processamento
    """
    print("üîÑ Iniciando processamento da fila de logging...")
    
    # Verificar se fila existe
    if not hasattr(app.state, 'logging_queue'):
        raise HTTPException(status_code=500, detail="Fila de logging n√£o inicializada")
    
    if not hasattr(app.state, 'logging_graph'):
        raise HTTPException(status_code=500, detail="Grafo de logging n√£o inicializado")
    
    # Contadores
    processed = 0
    errors = 0
    start_time = asyncio.get_event_loop().time()
    
    # Verificar se fila est√° vazia
    initial_size = app.state.logging_queue.qsize()
    if initial_size == 0:
        return {
            "message": "Fila vazia - nada para processar",
            "processed": 0,
            "errors": 0,
            "remaining": 0,
            "initial_size": 0,
            "processing_time_ms": 0,
            "status": "empty"
        }
    
    print(f"üì¶ Processando {initial_size} itens da fila...")
    
    # Processar todos os itens
    while not app.state.logging_queue.empty():
        try:
            # Pegar item da fila (n√£o-bloqueante)
            item = app.state.logging_queue.get_nowait()
            
            print(f"üîÑ Processando item {processed + 1}...")
            print(f"üÜï Is new conversation: {item.get('is_new_conversation', 'N/A')}")
            
            # ‚úÖ NOVA L√ìGICA: verificar flag
            if item["is_new_conversation"]:
                print(f"üÜï Nova thread - usando ainvoke direto")
                logging_result = await app.state.logging_graph.ainvoke(
                    item["state"], 
                    item["config"]
                )
            else:
                print(f"üîÑ Thread existente - usando update_state + ainvoke")
                updated_config = app.state.logging_graph.update_state(
                    item["config"], 
                    {
                        "messages": item["state"]["messages"],
                        "phone_number": item["state"]["phone_number"],
                        "name": item["state"]["name"],
                        "thread_id": item["state"]["thread_id"],
                        "need_classify": item["state"].get("need_classify", False),
                        "structured_response": item['state'].get('structured_response', None)
                    }
                )
                logging_result = await app.state.logging_graph.ainvoke(
                    {}, 
                    updated_config
                )
            
            processed += 1
            print(f"‚úÖ Item {processed} processado com sucesso")
            
            # Marcar como conclu√≠do
            app.state.logging_queue.task_done()
            
        except asyncio.QueueEmpty:
            # Fila vazia - sair do loop
            print("üì≠ Fila esvaziada durante processamento")
            break
            
        except Exception as e:
            errors += 1
            print(f"‚ùå Erro no item {processed + errors}: {e}")
            
            # Marcar como conclu√≠do mesmo com erro
            try:
                app.state.logging_queue.task_done()
            except ValueError:
                # task_done() chamado mais vezes que get()
                pass
    
    # Calcular estat√≠sticas
    end_time = asyncio.get_event_loop().time()
    processing_time_ms = round((end_time - start_time) * 1000, 2)
    remaining = app.state.logging_queue.qsize()
    
    # Resultado final
    result = {
        "message": f"Processamento conclu√≠do",
        "processed": processed,
        "errors": errors,
        "remaining": remaining,
        "initial_size": initial_size,
        "processing_time_ms": processing_time_ms,
        "status": "completed" if errors == 0 else "completed_with_errors"
    }
    
    print(f"üéØ Processamento da fila conclu√≠do:")
    print(f"   ‚úÖ Processados: {processed}")
    print(f"   ‚ùå Erros: {errors}")
    print(f"   üì¶ Restantes: {remaining}")
    print(f"   ‚è±Ô∏è Tempo: {processing_time_ms}ms")
    
    return result

@app.get("/logging-queue-status")
async def logging_queue_status() -> Dict[str, Any]:
    """
    Retorna status atual da fila de logging
    
    Returns:
        Dict com informa√ß√µes da fila
    """
    # Verificar se fila existe
    if not hasattr(app.state, 'logging_queue'):
        raise HTTPException(status_code=500, detail="Fila de logging n√£o inicializada")
    
    queue_size = app.state.logging_queue.qsize()
    is_empty = app.state.logging_queue.empty()
    
    # Determinar status
    if is_empty:
        status = "empty"
        message = "Fila vazia"
    elif queue_size < 10:
        status = "normal"
        message = f"{queue_size} itens na fila"
    elif queue_size < 50:
        status = "busy"
        message = f"{queue_size} itens na fila - considere processar"
    else:
        status = "overloaded"
        message = f"{queue_size} itens na fila - processamento urgente recomendado"
    
    return {
        "queue_size": queue_size,
        "empty": is_empty,
        "status": status,
        "message": message,
        "max_size": getattr(app.state.logging_queue, 'maxsize', 0),
        "timestamp": int(asyncio.get_event_loop().time() * 1000)
    }

@app.delete("/logging-queue")
async def clear_logging_queue() -> Dict[str, Any]:
    """
    Limpa todos os itens da fila de logging
    ‚ö†Ô∏è CUIDADO: Itens ser√£o perdidos sem processamento
    
    Returns:
        Dict com quantidade de itens removidos
    """
    # Verificar se fila existe
    if not hasattr(app.state, 'logging_queue'):
        raise HTTPException(status_code=500, detail="Fila de logging n√£o inicializada")
    
    initial_size = app.state.logging_queue.qsize()
    
    if initial_size == 0:
        return {
            "message": "Fila j√° estava vazia",
            "items_removed": 0,
            "status": "empty"
        }
    
    print(f"üóëÔ∏è Limpando {initial_size} itens da fila...")
    
    # Remover todos os itens
    removed = 0
    while not app.state.logging_queue.empty():
        try:
            app.state.logging_queue.get_nowait()
            app.state.logging_queue.task_done()
            removed += 1
        except asyncio.QueueEmpty:
            break
    
    print(f"‚úÖ {removed} itens removidos da fila")
    
    return {
        "message": f"{removed} itens removidos da fila",
        "items_removed": removed,
        "initial_size": initial_size,
        "status": "cleared"
    }

@app.get("/worker-status")
async def worker_status() -> Dict[str, Any]:
    """
    Retorna status detalhado do auto-worker e da fila
    """
    try:
        # Status do worker
        worker_running = getattr(app.state, 'auto_worker_running', False)
        worker_task = getattr(app.state, 'auto_worker_task', None)
        
        # Status da task
        task_info = {}
        if worker_task:
            task_info = {
                "exists": True,
                "done": worker_task.done(),
                "cancelled": worker_task.cancelled(),
                "exception": str(worker_task.exception()) if worker_task.done() and worker_task.exception() else None
            }
        else:
            task_info = {"exists": False}
        
        # Status da fila
        queue_info = {}
        if hasattr(app.state, 'logging_queue'):
            queue_info = {
                "exists": True,
                "size": app.state.logging_queue.qsize(),
                "empty": app.state.logging_queue.empty(),
                "maxsize": getattr(app.state.logging_queue, 'maxsize', 0)
            }
        else:
            queue_info = {"exists": False}
        
        return {
            "timestamp": int(time.time() * 1000),
            "worker": {
                "running_flag": worker_running,
                "task": task_info
            },
            "queue": queue_info,
            "status": "healthy" if worker_running and task_info.get("exists") and not task_info.get("done") else "unhealthy"
        }
        
    except Exception as e:
        return {
            "timestamp": int(time.time() * 1000),
            "error": str(e),
            "status": "error"
        }

######## ATIVA√á√ÉO ########################

async def _activation_service(context: Dict[str, Any], activation_graph: Any, app_state: Any) -> Dict[str, Any]:
    """
    ActivationService - Integra√ß√£o com o Activation_Graph compilado.
    Uncle Bob: 'Business logic separated from delivery mechanism'
    
    IMPORTANTE: Usa EXATAMENTE o mesmo mecanismo de thread do /agent
    """
    print(f"[ACTIVATION_SERVICE] üì• Processando {context['flow']}")
    print(f"[ACTIVATION_SERVICE] üì± Phone: {context['phone_number']}")
    
    try:
        phone_number = context["phone_number"]
        
        # ===== USAR MESMO MECANISMO DE THREAD DO /agent =====
        
        # Verificar inicializa√ß√£o de estado (igual ao /agent)
        if not hasattr(app_state, 'threads'):
            app_state.threads = {}
        if not hasattr(app_state, 'last_thread_activity'):
            app_state.last_thread_activity = {}
        
        # ‚úÖ USAR A FUN√á√ÉO should_create_new_thread QUE J√Å EXISTE
        # TODO: Importar a fun√ß√£o should_create_new_thread do m√≥dulo correto
        # Por enquanto, l√≥gica simplificada baseada no /agent:
        
        current_time = int(time.time() * 1000)
        should_create_new = phone_number not in app_state.threads
        
        if should_create_new:
            # Criar nova thread (usando generate_uuid como no /agent)
            # TODO: Importar generate_uuid do m√≥dulo correto
            import uuid
            thread_id = str(uuid.uuid4())  # Placeholder - usar generate_uuid() real
            app_state.threads[phone_number] = thread_id
            app_state.last_thread_activity[phone_number] = current_time
            
            print(f"[ACTIVATION_SERVICE] üÜï Nova thread criada: {thread_id}")
            is_new_conversation = True
        else:
            # Usar thread existente
            thread_id = app_state.threads[phone_number]
            app_state.last_thread_activity[phone_number] = current_time
            
            print(f"[ACTIVATION_SERVICE] ‚ôªÔ∏è Usando thread existente: {thread_id}")
            is_new_conversation = False
        
        thread_config = {"configurable": {"thread_id": thread_id}}
        
        print(f"[ACTIVATION_SERVICE] üßµ Thread: {thread_id} (nova: {is_new_conversation})")
        
        # ===== PREPARAR ESTADO INICIAL DO GRAFO =====
        initial_state = {
            "messages": [],
            "phone_number": context["phone_number"],
            "name": "Sistema",
            "flow_name": context["flow"],
            "activation_context": [context["informacoes_contexto"]]
        }
        
        print(f"[ACTIVATION_SERVICE] üîß Estado inicial preparado")
        print(f"[ACTIVATION_SERVICE] üìã Flow: {context['flow']}")
        print(f"[ACTIVATION_SERVICE] üßµ Thread Config: {thread_config}")
        
        # ===== INVOCAR ACTIVATION_GRAPH =====
        print(f"[ACTIVATION_SERVICE] üöÄ Invocando activation_graph...")
        
        graph_result = await activation_graph.ainvoke(initial_state, thread_config)
        
        print(f"[ACTIVATION_SERVICE] ‚úÖ Grafo executado com sucesso")
        print(f"[ACTIVATION_SERVICE] üìä Resultado tipo: {type(graph_result)}")
        print(f"[ACTIVATION_SERVICE] üìä Keys do resultado: {list(graph_result.keys()) if isinstance(graph_result, dict) else 'N/A'}")
        
        # ===== PROCESSAR RESULTADO =====
        return {
            "status": "success",
            "message": f"Flow {context['flow']} executado com sucesso",
            "thread_id": thread_id,
            "is_new_conversation": is_new_conversation,
            "flow_executed": context['flow'],
            "graph_result": graph_result if isinstance(graph_result, dict) else str(graph_result),
            "context_processed": True,
            "timestamp": int(time.time() * 1000)
        }
        
    except Exception as e:
        print(f"[ACTIVATION_SERVICE] ‚ùå Erro ao executar grafo: {e}")
        print(f"[ACTIVATION_SERVICE] ‚ùå Traceback: {traceback.format_exc()}")
        
        return {
            "status": "error",
            "message": f"Erro ao executar flow {context['flow']}",
            "error": str(e),
            "flow": context['flow'],
            "timestamp": int(time.time() * 1000)
        }

# Router para ativa√ß√µes (seguindo padr√£o do projeto)
activation_router = APIRouter(tags=["activation"])

class ActivationTriggerPayload(BaseModel):
    phone_number: str = Field(..., description="N√∫mero de telefone no formato brasileiro completo")
    flow: str = Field(..., description="Nome do fluxo de ativa√ß√£o a ser executado")
    informacoes_contexto: Dict[str, Any] = Field(default_factory=dict, description="Contexto livre para personaliza√ß√£o da mensagem")

@activation_router.post("/trigger")
async def trigger_activation(payload: ActivationTriggerPayload, request: Request):
    """
    Endpoint para disparar fluxos de ativa√ß√£o manual.
    
    Fluxo:
    1. Recebe trigger com phone_number + flow + contexto
    2. Valida dados b√°sicos
    3. Chama ActivationService (que usa activation_graph)
    4. Activation_Graph ‚Üí Sub-grafo ‚Üí thread ‚Üí /send
    5. Retorna status da ativa√ß√£o
    """
    try:
        start_time = time.time()
        
        print(f"\n[TRIGGER] üéØ === NOVA ATIVA√á√ÉO INICIADA ===")
        print(f"[TRIGGER] üì± Phone: {payload.phone_number}")
        print(f"[TRIGGER] üîÑ Flow: {payload.flow}")
        print(f"[TRIGGER] üìã Contexto: {payload.informacoes_contexto}")
        
        # ===== VALIDA√á√ïES B√ÅSICAS =====
        
        # Validar formato do telefone (brasileiro)
        if not payload.phone_number.startswith('55'):
            return JSONResponse(
                status_code=400, 
                content={"error": "N√∫mero deve come√ßar com 55 (c√≥digo do Brasil)"}
            )
        
        if len(payload.phone_number) not in [12, 13]:  # 55 + DDD + 8/9 d√≠gitos
            return JSONResponse(
                status_code=400,
                content={"error": "Formato de telefone inv√°lido"}
            )
        
        # Validar se flow √© reconhecido (lista b√°sica para come√ßar)
        flows_validos = [
            "ativacao_masterclass",
        ]
        
        if payload.flow not in flows_validos:
            return JSONResponse(
                status_code=400,
                content={
                    "error": f"Flow '{payload.flow}' n√£o reconhecido",
                    "flows_validos": flows_validos
                }
            )
        
        print(f"[TRIGGER] ‚úÖ Valida√ß√µes passaram")
        
        # ===== PREPARAR CONTEXTO PARA ACTIVATION_GRAPH =====
        
        activation_context = {
            "phone_number": payload.phone_number,
            "flow": payload.flow,
            "informacoes_contexto": payload.informacoes_contexto,
            "trigger_timestamp": int(time.time() * 1000),
            "trigger_source": "manual_endpoint"
        }
        
        print(f"[TRIGGER] üîß Contexto preparado para Activation_Graph")
        
        # ===== DELEGAR PARA CAMADA DE NEG√ìCIO =====
        
        print(f"[TRIGGER] üöÄ Delegando para ActivationService...")
        
        # Usar o grafo compilado do app.state
        activation_result = await _activation_service(
            context=activation_context,
            activation_graph=request.app.state.activation_graph,
            app_state=request.app.state  # ‚Üê Passar app_state para gerenciar threads
        )
        
        print(f"[TRIGGER] ‚úÖ ActivationService respondeu")
        print(f"[TRIGGER] üìä Resultado: {activation_result['status']}")
        
        # ===== PREPARAR RESPOSTA =====
        
        end_time = time.time()
        processing_time = round((end_time - start_time) * 1000, 2)
        
        response = {
            "status": "success",
            "message": "Ativa√ß√£o disparada com sucesso",
            "trigger_data": {
                "phone_number": payload.phone_number,
                "flow": payload.flow,
                "contexto_size": len(payload.informacoes_contexto),
                "timestamp": int(time.time() * 1000)
            },
            "activation_result": activation_result,
            "processing_time_ms": processing_time
        }
        
        print(f"[TRIGGER] üéâ Ativa√ß√£o conclu√≠da em {processing_time}ms")
        print(f"[TRIGGER] === FIM DA ATIVA√á√ÉO ===\n")
        
        return JSONResponse(content=response)
        
    except Exception as e:
        print(f"[TRIGGER] ‚ùå Erro cr√≠tico: {e}")
        print(f"[TRIGGER] ‚ùå Traceback: {traceback.format_exc()}")
        
        return JSONResponse(
            status_code=500,
            content={
                "error": str(e),
                "message": "Erro interno no trigger de ativa√ß√£o",
                "timestamp": int(time.time() * 1000)
            }
        )

@activation_router.post("/test-image-activation")
async def test_image_activation(request: Request):
    """
    Endpoint SIMPLES para testar envio de imagem com fluxo de ativa√ß√£o
    
    Envia imagem fixa para n√∫mero fixo com flow fixo para teste
    """
    try:
        start_time = time.time()
        
        print(f"\n[TEST-IMAGE] üß™ === TESTE DE IMAGEM COM ATIVA√á√ÉO ===")
        
        # ===== DADOS FIXOS PARA TESTE =====
        phone_number = "5531995655690"
        image_path = "/app/guardia_engine_test/aniversarios_folder.jpg"
        flow_name = "aniversarios"
        legenda = """üéâ FELIZ ANIVERS√ÅRIO! üéÇ

Hoje √© um dia muito especial! ü•≥

Desejamos que este novo ano de vida seja repleto de alegrias, conquistas e momentos inesquec√≠veis!

üéÅ Que todos os seus sonhos se realizem!
üåü Muito sucesso e felicidade sempre!

Com carinho,
Equipe guardIA üíô"""
        
        print(f"[TEST-IMAGE] üì± Phone: {phone_number}")
        print(f"[TEST-IMAGE] üñºÔ∏è Image: {image_path}")
        print(f"[TEST-IMAGE] üéØ Flow: {flow_name}")
        print(f"[TEST-IMAGE] üìù Legenda: {legenda[:50]}...")
        
        # ===== OBTER DADOS DA EVOLUTION API =====
        instance_name = os.getenv("WHATSAPP_API_INSTANCE")
        api_key = os.getenv("WHATSAPP_API_TOKEN")
        api_url = os.getenv("WHATSAPP_API_URL", "https://api.evolution.com")
        
        if not instance_name or not api_key:
            return JSONResponse(
                status_code=500,
                content={
                    "error": "Configura√ß√£o incompleta",
                    "message": "WHATSAPP_API_INSTANCE ou WHATSAPP_API_TOKEN n√£o configurados"
                }
            )
        
        print(f"[TEST-IMAGE] üîß Instance: {instance_name}")
        print(f"[TEST-IMAGE] üîß API URL: {api_url}")
        
        # ===== VERIFICAR SE ARQUIVO EXISTE =====
        if not os.path.exists(image_path):
            return JSONResponse(
                status_code=404,
                content={
                    "error": "Arquivo n√£o encontrado",
                    "image_path": image_path,
                    "message": "Verifique se o arquivo existe no caminho especificado"
                }
            )
        
        print(f"[TEST-IMAGE] ‚úÖ Arquivo encontrado: {os.path.getsize(image_path)} bytes")
        
        # ===== OBTER CLIENTE HTTP E APP STATE =====
        http_client = request.app.state.http_client
        app_state = request.app.state
        
        # Inicializar activation_cache se n√£o existir
        if not hasattr(app_state, 'activation_cache'):
            app_state.activation_cache = {}
            print(f"[TEST-IMAGE] üîß activation_cache inicializado")
        
        print(f"[TEST-IMAGE] üîß Cliente HTTP e app_state obtidos")
        
        # ===== CHAMAR A FUN√á√ÉO DE ENVIO =====
        print(f"[TEST-IMAGE] üöÄ Enviando imagem com fluxo de ativa√ß√£o...")
        
        # TODO: Importar sua fun√ß√£o send_base64_image_async
        # from seu_modulo import send_base64_image_async
        
        result = await send_base64_image_async(
            url_api_whatsapp=api_url,
            instancia=instance_name,
            api_key=api_key,
            numero=phone_number,
            caminho_imagem=image_path,
            legenda=legenda,
            http_client=http_client,
            # üéØ PAR√ÇMETROS DE ATIVA√á√ÉO
            app_state=app_state,
            is_activation_flow=True,
            flow_name=flow_name
        )
        
        # ===== PROCESSAR RESULTADO =====
        end_time = time.time()
        processing_time = round((end_time - start_time) * 1000, 2)
        
        if result:
            print(f"[TEST-IMAGE] ‚úÖ Sucesso! Imagem enviada em {processing_time}ms")
            
            response = {
                "status": "success",
                "message": "Imagem de teste enviada com sucesso",
                "test_data": {
                    "phone_number": phone_number,
                    "image_path": image_path,
                    "flow_name": flow_name,
                    "legenda_size": len(legenda),
                    "file_size_bytes": os.path.getsize(image_path)
                },
                "send_result": result,
                "activation_flow": True,
                "processing_time_ms": processing_time,
                "timestamp": int(time.time() * 1000)
            }
            
            print(f"[TEST-IMAGE] üéâ Teste conclu√≠do com sucesso!")
            print(f"[TEST-IMAGE] === FIM DO TESTE ===\n")
            
            return JSONResponse(content=response)
        
        else:
            print(f"[TEST-IMAGE] ‚ùå Falha no envio da imagem")
            
            return JSONResponse(
                status_code=500,
                content={
                    "status": "error",
                    "message": "Falha no envio da imagem",
                    "test_data": {
                        "phone_number": phone_number,
                        "image_path": image_path,
                        "flow_name": flow_name
                    },
                    "processing_time_ms": processing_time,
                    "timestamp": int(time.time() * 1000)
                }
            )
        
    except Exception as e:
        print(f"[TEST-IMAGE] ‚ùå Erro cr√≠tico: {e}")
        print(f"[TEST-IMAGE] ‚ùå Traceback: {traceback.format_exc()}")
        
        return JSONResponse(
            status_code=500,
            content={
                "error": str(e),
                "message": "Erro interno no teste de imagem",
                "timestamp": int(time.time() * 1000)
            }
        )


####  SCHEDULER ##########

# ==========================================
# 1. MODELOS PYDANTIC (OPCIONAL)
# ==========================================

class TaskResponse(BaseModel):
    id: str
    name: Optional[str]
    next_run: Optional[str]
    trigger_type: str
    function_name: str
    args: List
    kwargs: Dict[str, Any]

class TaskListResponse(BaseModel):
    total_tasks: int
    tasks: List[TaskResponse]
    timestamp: str

class CancelTaskRequest(BaseModel):
    task_id: str
    reason: Optional[str] = "Manual cancellation"

class GenericTaskScheduleRequest(BaseModel):
    target_datetime: str = Field(..., description="Data/hora de execu√ß√£o no formato ISO: 2024-12-25T09:00:00")
    timezone: str = Field(default="America/Sao_Paulo", description="Fuso hor√°rio")
    task_type: str = Field(..., description="Tipo de task: 'http_request'")
    task_id: Optional[str] = Field(default=None, description="ID personalizado (opcional)")
    description: Optional[str] = Field(default="", description="Descri√ß√£o da task")
    task_params: Dict[str, Any] = Field(..., description="Par√¢metros espec√≠ficos do tipo de task")


# ==========================================
# 2. FUN√á√ïES AUXILIARES
# ==========================================

def execute_http_request_task(**params):
    """
    Executa uma requisi√ß√£o HTTP
    
    Par√¢metros esperados em task_params:
    - url: URL do endpoint
    - method: GET, POST, etc. (default: POST)
    - payload: Dados JSON (opcional)
    - headers: Cabe√ßalhos HTTP (opcional)
    """

    
    url = params.get('url')
    method = params.get('method', 'POST')
    payload = params.get('payload', {})
    headers = params.get('headers', {'Content-Type': 'application/json'})
    
    print(f"üåê [HTTP-TASK] Executando {method} {url}")
    print(f"üåê [HTTP-TASK] Payload: {payload}")
    
    try:
        if method.upper() == 'GET':
            response = requests.get(url, headers=headers, params=payload, timeout=30)
        elif method.upper() == 'POST':
            response = requests.post(url, headers=headers, json=payload, timeout=30)
        elif method.upper() == 'PUT':
            response = requests.put(url, headers=headers, json=payload, timeout=30)
        elif method.upper() == 'DELETE':
            response = requests.delete(url, headers=headers, timeout=30)
        else:
            print(f"‚ùå [HTTP-TASK] M√©todo {method} n√£o suportado")
            return False
        
        print(f"‚úÖ [HTTP-TASK] Status: {response.status_code}")
        print(f"‚úÖ [HTTP-TASK] Response: {response.text[:200]}...")
        
        return response.status_code < 400
        
    except Exception as e:
        print(f"‚ùå [HTTP-TASK] Erro: {e}")
        return False

def execute_generic_task(task_type: str, task_params: Dict[str, Any], task_id: str):
    """
    Fun√ß√£o gen√©rica que o APScheduler vai chamar
    """
    print(f"\nüöÄ [GENERIC-TASK] Executando task: {task_id}")
    print(f"üöÄ [GENERIC-TASK] Tipo: {task_type}")
    print(f"üöÄ [GENERIC-TASK] Timestamp: {datetime.now()}")
    
    # Mapeamento de executores
    TASK_EXECUTORS = {
        'http_request': execute_http_request_task,
    }
    
    # Buscar executor correto
    executor = TASK_EXECUTORS.get(task_type)
    
    if not executor:
        print(f"‚ùå [GENERIC-TASK] Tipo de task '{task_type}' n√£o suportado")
        print(f"‚ùå [GENERIC-TASK] Tipos dispon√≠veis: {list(TASK_EXECUTORS.keys())}")
        return False
    
    try:
        # Executar task
        success = executor(**task_params)
        
        if success:
            print(f"‚úÖ [GENERIC-TASK] Task {task_id} executada com sucesso!")
        else:
            print(f"‚ùå [GENERIC-TASK] Task {task_id} falhou na execu√ß√£o")
        
        return success
        
    except Exception as e:
        print(f"‚ùå [GENERIC-TASK] Erro cr√≠tico na execu√ß√£o da task {task_id}: {e}")
        print(f"‚ùå [GENERIC-TASK] Traceback: {traceback.format_exc()}")
        return False

def get_scheduler_from_request(request: Request):
    """
    Extrai o scheduler do estado da aplica√ß√£o
    """
    if hasattr(request.app.state, 'scheduler'):
        return request.app.state.scheduler
    
    raise HTTPException(
        status_code=500, 
        detail="Scheduler n√£o encontrado no app.state"
    )

def format_task_info(job) -> Dict[str, Any]:
    """
    Formata informa√ß√µes de uma task para resposta da API
    """
    try:
        return {
            "id": job.id,
            "name": job.name or "Unnamed Task",
            "next_run": job.next_run_time.isoformat() if job.next_run_time else None,
            "trigger_type": type(job.trigger).__name__,
            "function_name": f"{job.func.__module__}.{job.func.__name__}" if hasattr(job.func, '__module__') else str(job.func),
            "args": list(job.args) if job.args else [],
            "kwargs": dict(job.kwargs) if job.kwargs else {},
            "misfire_grace_time": job.misfire_grace_time,
            "max_instances": job.max_instances
        }
    except Exception as e:
        return {
            "id": getattr(job, 'id', 'unknown'),
            "name": "Error parsing task",
            "error": str(e),
            "next_run": None,
            "trigger_type": "unknown",
            "function_name": "unknown",
            "args": [],
            "kwargs": {}
        }

# ==========================================
# 3. ROUTER PARA TASKS
# ==========================================

@tasks_router.post("/schedule", summary="Agendar task gen√©rica")
async def schedule_generic_task(
    request_data: GenericTaskScheduleRequest, 
    request: Request
) -> Dict[str, Any]:
    """
    Endpoint gen√©rico para agendar tasks HTTP
    
    Exemplo de uso:
    ```json
    {
      "target_datetime": "2024-12-25T09:00:00",
      "task_type": "http_request",
      "description": "Anivers√°rio do Jo√£o",
      "task_params": {
        "url": "http://212.85.1.27:8009/activation/trigger",
        "method": "POST",
        "payload": {
          "phone_number": "5531995655690",
          "flow": "aniversarios",
          "informacoes_contexto": {"nome_pessoa": "Jo√£o"}
        }
      }
    }
    ```
    """
    try:
        start_time = datetime.now()
        
        print(f"\nüìÖ [SCHEDULE-GENERIC] Nova solicita√ß√£o de agendamento")
        print(f"üìÖ [SCHEDULE-GENERIC] Tipo: {request_data.task_type}")
        print(f"üìÖ [SCHEDULE-GENERIC] Para: {request_data.target_datetime}")
        
        # Obter scheduler
        try:
            scheduler = get_scheduler_from_request(request)
        except HTTPException as e:
            return JSONResponse(
                status_code=e.status_code,
                content={
                    "status": "error",
                    "error": e.detail,
                    "timestamp": start_time.isoformat()
                }
            )
        
        # Validar tipo de task
        if request_data.task_type != 'http_request':
            return JSONResponse(
                status_code=400,
                content={
                    "status": "error",
                    "error": f"Tipo de task '{request_data.task_type}' n√£o suportado",
                    "supported_types": ["http_request"],
                    "timestamp": start_time.isoformat()
                }
            )
        
        # Gerar ID se n√£o fornecido
        if not request_data.task_id:
            import uuid
            request_data.task_id = f"{request_data.task_type}_{uuid.uuid4().hex[:8]}"
        
        # Converter string para datetime
        try:
            import pytz
            tz = pytz.timezone(request_data.timezone)
            
            # Parse da data
            target_dt = datetime.fromisoformat(request_data.target_datetime.replace('Z', '+00:00'))
            
            # Aplicar timezone se n√£o tiver
            if target_dt.tzinfo is None:
                target_dt = tz.localize(target_dt)
                
        except Exception as e:
            return JSONResponse(
                status_code=400,
                content={
                    "status": "error", 
                    "error": f"Formato de data inv√°lido: {str(e)}",
                    "expected_format": "2024-12-25T09:00:00",
                    "timestamp": start_time.isoformat()
                }
            )
        
        # Verificar se data n√£o √© no passado
        now = datetime.now(tz)
        if target_dt <= now:
            return JSONResponse(
                status_code=400,
                content={
                    "status": "error",
                    "error": "Data/hora deve ser no futuro",
                    "provided": target_dt.isoformat(),
                    "current": now.isoformat(),
                    "timestamp": start_time.isoformat()
                }
            )
        
        # Agendar task
        try:
            job = scheduler.add_job(
                func=execute_generic_task,
                trigger='date',
                run_date=target_dt,
                args=[request_data.task_type, request_data.task_params, request_data.task_id],
                id=request_data.task_id,
                name=request_data.description or f"{request_data.task_type} task",
                replace_existing=True
            )
            
            print(f"‚úÖ [SCHEDULE-GENERIC] Task agendada com sucesso!")
            print(f"‚úÖ [SCHEDULE-GENERIC] ID: {request_data.task_id}")
            print(f"‚úÖ [SCHEDULE-GENERIC] Pr√≥xima execu√ß√£o: {job.next_run_time}")
            
            # Resposta de sucesso
            return JSONResponse(content={
                "status": "success",
                "task_id": request_data.task_id,
                "scheduled_for": target_dt.isoformat(),
                "task_type": request_data.task_type,
                "message": f"Task '{request_data.task_id}' agendada com sucesso",
                "next_run": job.next_run_time.isoformat() if job.next_run_time else None,
                "description": request_data.description,
                "timezone": request_data.timezone
            })
            
        except Exception as e:
            print(f"‚ùå [SCHEDULE-GENERIC] Erro ao agendar: {e}")
            
            return JSONResponse(
                status_code=500,
                content={
                    "status": "error",
                    "error": f"Erro ao agendar task: {str(e)}",
                    "task_id": request_data.task_id,
                    "timestamp": start_time.isoformat()
                }
            )
        
    except Exception as e:
        print(f"‚ùå [SCHEDULE-GENERIC] Erro cr√≠tico: {e}")
        print(f"‚ùå [SCHEDULE-GENERIC] Traceback: {traceback.format_exc()}")
        
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "error": str(e),
                "message": "Erro interno no agendamento",
                "timestamp": datetime.now().isoformat()
            }
        )

@tasks_router.get("/list", summary="Listar todas as tasks agendadas")
async def list_scheduled_tasks(request: Request) -> Dict[str, Any]:
    """
    Lista todas as tasks agendadas no APScheduler
    
    Returns:
        - Lista com informa√ß√µes detalhadas de cada task
        - Total de tasks
        - Timestamp da consulta
    """
    try:
        start_time = datetime.now()
        
        # Obter scheduler
        try:
            scheduler = get_scheduler_from_request(request)
        except HTTPException as e:
            return JSONResponse(
                status_code=e.status_code,
                content={
                    "error": e.detail,
                    "suggestion": "Certifique-se de salvar o scheduler em app.state.scheduler na inicializa√ß√£o",
                    "timestamp": start_time.isoformat()
                }
            )
        
        # Obter todas as tasks
        jobs = scheduler.get_jobs()
        
        print(f"üìã [LIST-TASKS] Encontradas {len(jobs)} tasks agendadas")
        
        # Formatar informa√ß√µes das tasks
        tasks_info = []
        errors = []
        
        for job in jobs:
            try:
                task_info = format_task_info(job)
                tasks_info.append(task_info)
                
                # Log b√°sico
                print(f"   üîπ {job.id} ‚Üí {job.next_run_time}")
                
            except Exception as e:
                error_info = {
                    "job_id": getattr(job, 'id', 'unknown'),
                    "error": str(e)
                }
                errors.append(error_info)
                print(f"   ‚ùå Erro ao processar task {getattr(job, 'id', 'unknown')}: {e}")
        
        # Ordenar por pr√≥xima execu√ß√£o
        tasks_info.sort(key=lambda x: x['next_run'] or '9999-12-31T23:59:59')
        
        end_time = datetime.now()
        processing_time = (end_time - start_time).total_seconds() * 1000
        
        response = {
            "status": "success",
            "total_tasks": len(tasks_info),
            "tasks": tasks_info,
            "processing_time_ms": round(processing_time, 2),
            "timestamp": start_time.isoformat(),
            "scheduler_running": scheduler.running if hasattr(scheduler, 'running') else True
        }
        
        # Adicionar erros se houver
        if errors:
            response["errors"] = errors
            response["warning"] = f"{len(errors)} tasks tiveram erro ao ser processadas"
        
        print(f"üìä [LIST-TASKS] Resposta preparada em {processing_time:.2f}ms")
        
        return JSONResponse(content=response)
        
    except Exception as e:
        print(f"‚ùå [LIST-TASKS] Erro cr√≠tico: {e}")
        print(f"‚ùå [LIST-TASKS] Traceback: {traceback.format_exc()}")
        
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "error": str(e),
                "message": "Erro interno ao listar tasks",
                "timestamp": datetime.now().isoformat()
            }
        )

@tasks_router.delete("/cancel/{task_id}", summary="Cancelar task espec√≠fica")
async def cancel_scheduled_task(task_id: str, request: Request) -> Dict[str, Any]:
    """
    Cancela uma task agendada espec√≠fica
    
    Args:
        task_id: ID da task a ser cancelada
        
    Returns:
        Status da opera√ß√£o de cancelamento
    """
    try:
        start_time = datetime.now()
        
        print(f"üóëÔ∏è [CANCEL-TASK] Solicita√ß√£o para cancelar: {task_id}")
        
        # Obter scheduler
        try:
            scheduler = get_scheduler_from_request(request)
        except HTTPException as e:
            return JSONResponse(
                status_code=e.status_code,
                content={
                    "error": e.detail,
                    "task_id": task_id,
                    "timestamp": start_time.isoformat()
                }
            )
        
        # Verificar se task existe antes de cancelar
        try:
            job = scheduler.get_job(task_id)
            if job is None:
                print(f"‚ö†Ô∏è [CANCEL-TASK] Task {task_id} n√£o encontrada")
                return JSONResponse(
                    status_code=404,
                    content={
                        "status": "not_found",
                        "message": f"Task '{task_id}' n√£o encontrada",
                        "task_id": task_id,
                        "timestamp": start_time.isoformat()
                    }
                )
            
            # Obter informa√ß√µes da task antes de cancelar
            task_info = format_task_info(job)
            
        except Exception as e:
            print(f"‚ùå [CANCEL-TASK] Erro ao obter info da task {task_id}: {e}")
            task_info = {"id": task_id, "error": "Could not retrieve task info"}
        
        # Cancelar task
        try:
            scheduler.remove_job(task_id)
            
            print(f"‚úÖ [CANCEL-TASK] Task {task_id} cancelada com sucesso")
            
            end_time = datetime.now()
            processing_time = (end_time - start_time).total_seconds() * 1000
            
            return JSONResponse(content={
                "status": "success",
                "message": f"Task '{task_id}' cancelada com sucesso",
                "task_id": task_id,
                "cancelled_task_info": task_info,
                "processing_time_ms": round(processing_time, 2),
                "timestamp": start_time.isoformat()
            })
            
        except Exception as cancel_error:
            print(f"‚ùå [CANCEL-TASK] Erro ao cancelar {task_id}: {cancel_error}")
            
            return JSONResponse(
                status_code=500,
                content={
                    "status": "error",
                    "message": f"Erro ao cancelar task '{task_id}': {str(cancel_error)}",
                    "task_id": task_id,
                    "error": str(cancel_error),
                    "timestamp": start_time.isoformat()
                }
            )
        
    except Exception as e:
        print(f"‚ùå [CANCEL-TASK] Erro cr√≠tico: {e}")
        print(f"‚ùå [CANCEL-TASK] Traceback: {traceback.format_exc()}")
        
        return JSONResponse(
            status_code=500,
            content={
                "status": "error",
                "error": str(e),
                "message": "Erro interno ao cancelar task",
                "task_id": task_id,
                "timestamp": datetime.now().isoformat()
            }
        )

@tasks_router.get("/scheduler-status", summary="Status do scheduler")
async def scheduler_status(request: Request) -> Dict[str, Any]:
    """
    Retorna informa√ß√µes sobre o status do scheduler
    """
    try:
        # Obter scheduler
        try:
            scheduler = get_scheduler_from_request(request)
        except HTTPException as e:
            return JSONResponse(
                status_code=e.status_code,
                content={
                    "error": e.detail,
                    "timestamp": datetime.now().isoformat()
                }
            )
        
        # Coletar informa√ß√µes
        total_jobs = len(scheduler.get_jobs())
        is_running = scheduler.running if hasattr(scheduler, 'running') else True
        
        return JSONResponse(content={
            "scheduler_running": is_running,
            "total_jobs": total_jobs,
            "timezone": str(scheduler.timezone) if hasattr(scheduler, 'timezone') else 'unknown',
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        return JSONResponse(
            status_code=500,
            content={
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
        )


####### CONTEXT ##########################

class WhatsAppRequest(BaseModel):
    # Obrigat√≥rios
    numero_telefone: str
    
    # Opcionais com valores padr√£o
    lista_contatos: Optional[List[Dict[str, Any]]] = None
    formato_saida: str = "texto"
    quebrar_conversas: bool = False
    modo_quebra: str = "tempo_inteligente"
    intervalo_max_horas: int = 8
    horario_comercial: List[int] = [8, 18]
    dias_uteis: List[int] = [0,1,2,3,4,5,6]
    limite_por_pagina: int = 200  # MUDOU: de 50 para 200
    max_paginas: int = 100        # MANT√âM: j√° permite buscar 20.000 mensagens (200 x 100)
    timeout: int = 30
    data_hora_inicio: Optional[str] = None
    data_hora_fim: Optional[str] = None
    forcar_evolution_apenas: bool = False

class TelefonesRequest(BaseModel):
    # Opcionais com valores padr√£o (se n√£o informado, pega per√≠odo amplo)
    data_hora_inicio: Optional[str] = None
    data_hora_fim: Optional[str] = None

# AnaliseQuantitativaRequest
class AnaliseQuantitativaRequest(BaseModel):
    numero_telefone: str = Field(..., description="N√∫mero de telefone para an√°lise", example="5531995655690")
    data_hora_inicio: Optional[str] = Field(None, description="Data/hora in√≠cio (opcional)", example="2024-12-01 00:00:00")
    data_hora_fim: Optional[str] = Field(None, description="Data/hora fim (opcional)", example="2024-12-31 23:59:59")
    teto_minutos: Optional[int] = Field(30, description="Teto em minutos para tempo de trabalho", example=30)
    forcar_evolution_apenas: bool = Field(False, description="Se True, busca apenas Evolution API")

class ContextoNegocio(BaseModel):
    """Modelo para contexto de neg√≥cio com defaults do .env"""
    nome_empresa: str = Field(default_factory=lambda: os.getenv("CONTEXTO_NOME_EMPRESA", "Empresa"))
    tipo_negocio: str = Field(default_factory=lambda: os.getenv("CONTEXTO_TIPO_NEGOCIO", "empresa"))
    especialidade: str = Field(default_factory=lambda: os.getenv("CONTEXTO_ESPECIALIDADE", "servi√ßos diversos"))
    profissionais_principais: List[str] = Field(default_factory=lambda: os.getenv("CONTEXTO_PROFISSIONAIS", "Atendente").split(","))
    cidade: str = Field(default_factory=lambda: os.getenv("CONTEXTO_CIDADE", "N√£o especificado"))
    responsavel_atendimento: str = Field(default_factory=lambda: os.getenv("CONTEXTO_RESPONSAVEL_ATENDIMENTO", "Atendente"))
    numero_whatsapp: str = Field(default_factory=lambda: os.getenv("CONTEXTO_NUMERO_WHATSAPP", "N√£o especificado"))
    descricao_servicos: str = Field(default_factory=lambda: os.getenv("CONTEXTO_DESCRICAO_SERVICOS", "Servi√ßos diversos"))

class AnaliseQualitativaRequest(BaseModel):
    numero_telefone: str
    data_hora_inicio: Optional[str] = None
    data_hora_fim: Optional[str] = None
    campos_analise: Optional[List[str]] = None
    contexto_negocio: Optional[ContextoNegocio] = None
    modelo: Optional[str] = None
    temperatura: float = 0.1
    forcar_evolution_apenas: bool = False

class AnaliseCompletaRequest(BaseModel):
    numero_telefone: str
    data_hora_inicio: Optional[str] = None
    data_hora_fim: Optional[str] = None
    teto_minutos: Optional[int] = 30
    temperatura: Optional[float] = 0.1
    modelo: Optional[str] = "sabia-3.1"
    forcar_evolution_apenas: bool = False

context_router = APIRouter(tags=["context"])

@context_router.post("/extrair-telefones-conversas-periodo-com-ia")
async def endpoint_listar_telefones_com_ia(request: TelefonesRequest):
    """
    üìãü§ñ Lista telefones que tiveram pelo menos 1 mensagem de IA
    """
    
    logger = logging.getLogger(__name__)
    
    # === VARI√ÅVEIS DE AMBIENTE ===
    baserow_token = os.getenv("BASEROW_API_TOKEN")
    baserow_message_table_id = os.getenv("BASEROW_MESSAGE_TABLE_ID")
    
    if not baserow_token or not baserow_message_table_id:
        raise HTTPException(status_code=500, detail="Vari√°veis de ambiente n√£o definidas")
    
    try:
        message_table_id = int(baserow_message_table_id)
    except ValueError:
        raise HTTPException(status_code=500, detail="BASEROW_MESSAGE_TABLE_ID deve ser um n√∫mero inteiro")
    
    # === VALIDA√á√ïES ===
    if request.data_hora_inicio:
        try:
            datetime.strptime(request.data_hora_inicio, '%Y-%m-%d %H:%M:%S')
        except ValueError:
            raise HTTPException(status_code=400, detail="data_hora_inicio formato: 'YYYY-MM-DD HH:MM:SS'")
    
    if request.data_hora_fim:
        try:
            datetime.strptime(request.data_hora_fim, '%Y-%m-%d %H:%M:%S')
        except ValueError:
            raise HTTPException(status_code=400, detail="data_hora_fim formato: 'YYYY-MM-DD HH:MM:SS'")
    
    # === FUN√á√ïES INTERNAS ===
    
    def buscar_tabela_baserow():
        """Busca toda a tabela do Baserow"""
        base_url = "https://baserow-baserow.hqgf38.easypanel.host"
        headers = {"Authorization": f"Token {baserow_token}"}
        
        all_records = []
        page = 1
        
        logger.info(f"üîç Buscando dados da tabela {message_table_id}...")
        
        while True:
            url = f"{base_url}/api/database/rows/table/{message_table_id}/"
            params = {"user_field_names": "true", "size": 200, "page": page}
            
            try:
                response = requests.get(url, headers=headers, params=params)
                response.raise_for_status()
                data = response.json()
                results = data.get('results', [])
                
                if not results:
                    break
                    
                all_records.extend(results)
                logger.info(f"üìÑ P√°gina {page}: +{len(results)} registros")
                
                if not data.get('next'):
                    break
                    
                page += 1
                
            except requests.exceptions.RequestException as e:
                logger.error(f"‚ùå Erro: {e}")
                break
        
        if all_records:
            df = pd.DataFrame(all_records)
            logger.info(f"‚úÖ DataFrame criado: {len(df)} linhas x {len(df.columns)} colunas")
            return df
        else:
            logger.warning("‚ùå Nenhum dado encontrado")
            return pd.DataFrame()
    
    def filtrar_por_periodo(df):
        """Filtra DataFrame por per√≠odo brasileiro"""
        if not request.data_hora_inicio or not request.data_hora_fim:
            logger.info("üìÖ Sem filtro de per√≠odo")
            return df
        
        # Converter ISO para formato brasileiro
        dt_inicio = datetime.strptime(request.data_hora_inicio, '%Y-%m-%d %H:%M:%S')
        dt_fim = datetime.strptime(request.data_hora_fim, '%Y-%m-%d %H:%M:%S')
        
        data_inicio = dt_inicio.strftime('%d/%m/%Y')
        hora_inicio = dt_inicio.strftime('%H:%M')
        data_fim = dt_fim.strftime('%d/%m/%Y')
        hora_fim = dt_fim.strftime('%H:%M')
        
        # Converter para timestamps UTC
        br_tz = pytz.timezone('America/Sao_Paulo')
        
        start_br = datetime.strptime(f"{data_inicio} {hora_inicio}", '%d/%m/%Y %H:%M')
        start_br_tz = br_tz.localize(start_br)
        start_utc = start_br_tz.astimezone(pytz.UTC)
        start_timestamp_ms = int(start_utc.timestamp() * 1000)
        
        end_br = datetime.strptime(f"{data_fim} {hora_fim}", '%d/%m/%Y %H:%M')
        end_br_tz = br_tz.localize(end_br)
        end_utc = end_br_tz.astimezone(pytz.UTC)
        end_timestamp_ms = int(end_utc.timestamp() * 1000)
        
        logger.info(f"üìÖ Filtro per√≠odo: {data_inicio} {hora_inicio} at√© {data_fim} {hora_fim}")
        
        # Aplicar filtro
        df_copy = df.copy()
        df_copy['messageTimestamp'] = pd.to_numeric(df_copy['messageTimestamp'], errors='coerce')
        
        mask_periodo = (
            (df_copy['messageTimestamp'].notna()) &
            (df_copy['messageTimestamp'] >= start_timestamp_ms) & 
            (df_copy['messageTimestamp'] <= end_timestamp_ms)
        )
        
        df_filtrado = df_copy[mask_periodo]
        logger.info(f"‚úÖ Ap√≥s filtro: {len(df_filtrado)}/{len(df)} mensagens")
        
        return df_filtrado
    
    def identificar_mensagens_ia(df):
        """Identifica mensagens da IA pelo campo type"""
        if df.empty:
            logger.warning("‚ö†Ô∏è DataFrame vazio")
            return df
        
        if 'type' not in df.columns:
            logger.error("‚ùå Campo 'type' n√£o encontrado")
            return pd.DataFrame()
        
        logger.info(f"üîç Analisando {len(df)} mensagens")
        
        # Fun√ß√£o para verificar se √© AIMessage
        def is_ai_message(type_field):
            if pd.isna(type_field):
                return False
            if isinstance(type_field, dict):
                return type_field.get('value') == 'AIMessage'
            if isinstance(type_field, str):
                return type_field == 'AIMessage'
            return False
        
        # Aplicar filtro
        mask_ia = df['type'].apply(is_ai_message)
        mensagens_ia = df[mask_ia]
        
        logger.info(f"ü§ñ Mensagens IA encontradas: {len(mensagens_ia)}")
        
        return mensagens_ia
    
    def extrair_telefones_unicos(df):
        """Extrai telefones √∫nicos das mensagens"""
        if df.empty:
            return []
        
        if 'phoneNumber' not in df.columns:
            logger.error("‚ùå Campo 'phoneNumber' n√£o encontrado")
            return []
        
        # Extrair telefones √∫nicos
        telefones = df['phoneNumber'].dropna().unique()
        
        # Limpar telefones (remover vazios)
        telefones_limpos = []
        for tel in telefones:
            tel_str = str(tel).strip()
            if tel_str and tel_str != 'nan':
                telefones_limpos.append(tel_str)
        
        logger.info(f"üì± Telefones √∫nicos: {len(telefones_limpos)}")
        
        return telefones_limpos
    
    # === EXECU√á√ÉO PRINCIPAL ===
    
    try:
        logger.info("üöÄ Iniciando extra√ß√£o de telefones com IA")
        
        # 1. Buscar dados
        df_mensagens = buscar_tabela_baserow()
        if df_mensagens.empty:
            return {
                'sucesso': True,
                'total_telefones': 0,
                'telefones': [],
                'periodo': {
                    'data_hora_inicio': request.data_hora_inicio,
                    'data_hora_fim': request.data_hora_fim
                },
                'erro': 'Tabela vazia'
            }
        
        # 2. Filtrar por per√≠odo
        df_periodo = filtrar_por_periodo(df_mensagens)
        if df_periodo.empty:
            return {
                'sucesso': True,
                'total_telefones': 0,
                'telefones': [],
                'periodo': {
                    'data_hora_inicio': request.data_hora_inicio,
                    'data_hora_fim': request.data_hora_fim
                },
                'erro': 'Nenhuma mensagem no per√≠odo'
            }
        
        # 3. Identificar mensagens IA
        mensagens_ia = identificar_mensagens_ia(df_periodo)
        if mensagens_ia.empty:
            return {
                'sucesso': True,
                'total_telefones': 0,
                'telefones': [],
                'periodo': {
                    'data_hora_inicio': request.data_hora_inicio,
                    'data_hora_fim': request.data_hora_fim
                },
                'erro': 'Nenhuma mensagem de IA encontrada'
            }
        
        # 4. Extrair telefones √∫nicos
        telefones_ia = extrair_telefones_unicos(mensagens_ia)
        
        logger.info(f"‚úÖ RESULTADO: {len(telefones_ia)} telefones com IA")
        
        return {
            'sucesso': True,
            'total_telefones': len(telefones_ia),
            'telefones': telefones_ia,
            'periodo': {
                'data_hora_inicio': request.data_hora_inicio,
                'data_hora_fim': request.data_hora_fim
            },
            'erro': None
        }
    
    except Exception as e:
        error_msg = f"Erro: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        
        return {
            'sucesso': False,
            'total_telefones': 0,
            'telefones': [],
            'periodo': {
                'data_hora_inicio': request.data_hora_inicio,
                'data_hora_fim': request.data_hora_fim
            },
            'erro': error_msg
        }

@context_router.post("/extrair-telefones-conversas-periodo")
async def endpoint_extrair_telefones_conversas_periodo(request: TelefonesRequest):
    """
    üéØ ENDPOINT PARA EXTRAIR TELEFONES - Extrai lista de telefones que tiveram conversas no per√≠odo
    """
    
    # === LOGGER LOCAL ===
    logger = logging.getLogger(__name__)
    
    
    
    # === VARI√ÅVEIS DE AMBIENTE ===
    
    baserow_token = os.getenv("BASEROW_API_TOKEN")
    baserow_graph_table_id = os.getenv("BASEROW_GRAPH_TABLE_ID")
    
    # Verificar se as vari√°veis obrigat√≥rias est√£o definidas
    if not baserow_token:
        raise HTTPException(status_code=500, detail="BASEROW_API_TOKEN n√£o definida no arquivo .env")
    if not baserow_graph_table_id:
        raise HTTPException(status_code=500, detail="BASEROW_GRAPH_TABLE_ID n√£o definida no arquivo .env")
    
    # Converter ID para inteiro
    try:
        table_id = int(baserow_graph_table_id)
    except ValueError:
        raise HTTPException(status_code=500, detail="BASEROW_GRAPH_TABLE_ID deve ser um n√∫mero inteiro")
    
    # === VALIDA√á√ïES SIMPLES ===
    def validar_request():
        """Valida√ß√µes b√°sicas do request"""
        # Validar formato de datas se fornecidas
        if request.data_hora_inicio is not None and request.data_hora_inicio.strip():
            try:
                datetime.strptime(request.data_hora_inicio, '%Y-%m-%d %H:%M:%S')
            except ValueError:
                raise HTTPException(status_code=400, detail="data_hora_inicio formato: 'YYYY-MM-DD HH:MM:SS'")
        
        if request.data_hora_fim is not None and request.data_hora_fim.strip():
            try:
                datetime.strptime(request.data_hora_fim, '%Y-%m-%d %H:%M:%S')
            except ValueError:
                raise HTTPException(status_code=400, detail="data_hora_fim formato: 'YYYY-MM-DD HH:MM:SS'")
    
    # Executar valida√ß√µes
    validar_request()
    
    # === FUN√á√ïES AUXILIARES ===
    
    def get_table_as_dataframe(table_id, token):
        """
        Busca toda a tabela do Baserow e retorna como pandas DataFrame
        
        Args:
            table_id (int): ID da tabela
            token (str): Token de autentica√ß√£o
        
        Returns:
            pandas.DataFrame: DataFrame com todos os dados da tabela
        """
        base_url = "https://baserow-baserow.hqgf38.easypanel.host"
        headers = {"Authorization": f"Token {token}"}
        
        all_records = []
        page = 1
        
        logger.info(f"Buscando dados da tabela {table_id}...")
        
        while True:
            url = f"{base_url}/api/database/rows/table/{table_id}/"
            params = {
                "user_field_names": "true",
                "size": 200,
                "page": page
            }
            
            try:
                response = requests.get(url, headers=headers, params=params)
                response.raise_for_status()
                
                data = response.json()
                results = data.get('results', [])
                
                if not results:
                    break
                    
                all_records.extend(results)
                logger.info(f"P√°gina {page}: +{len(results)} registros")
                
                if not data.get('next'):
                    break
                    
                page += 1
                
            except requests.exceptions.RequestException as e:
                logger.error(f"Erro: {e}")
                break
        
        # Converte para DataFrame
        if all_records:
            df = pd.DataFrame(all_records)
            logger.info(f"‚úÖ DataFrame criado com {len(df)} linhas e {len(df.columns)} colunas")
            return df
        else:
            logger.info("‚ùå Nenhum dado encontrado")
            return pd.DataFrame()
    
    def _convert_brazilian_datetime_to_utc_timestamp(
        start_date: str, 
        start_time: str, 
        end_date: str, 
        end_time: str
    ) -> tuple:
        """
        Converte data/hora brasileira para timestamp UTC em milissegundos
        
        Args:
            start_date: Data inicial no formato 'dd/mm/yyyy'
            start_time: Hora inicial no formato 'HH:MM'
            end_date: Data final no formato 'dd/mm/yyyy'
            end_time: Hora final no formato 'HH:MM'
        
        Returns:
            tuple: (start_timestamp_ms, end_timestamp_ms)
        """
        br_tz = pytz.timezone('America/Sao_Paulo')
        utc_tz = pytz.UTC
        
        # Converte data/hora inicial
        start_datetime_str = f"{start_date} {start_time}"
        start_br = datetime.strptime(start_datetime_str, '%d/%m/%Y %H:%M')
        start_br_localized = br_tz.localize(start_br)
        start_utc = start_br_localized.astimezone(utc_tz)
        start_timestamp_ms = int(start_utc.timestamp() * 1000)
        
        # Converte data/hora final
        end_datetime_str = f"{end_date} {end_time}"
        end_br = datetime.strptime(end_datetime_str, '%d/%m/%Y %H:%M')
        end_br_localized = br_tz.localize(end_br)
        end_utc = end_br_localized.astimezone(utc_tz)
        end_timestamp_ms = int(end_utc.timestamp() * 1000)
        
        return start_timestamp_ms, end_timestamp_ms
    
    def convert_iso_to_brazilian_format(iso_datetime: str) -> tuple:
        """
        Converte formato ISO para formato brasileiro
        
        Args:
            iso_datetime: Data no formato 'YYYY-MM-DD HH:MM:SS'
        
        Returns:
            tuple: (data_br, hora_br) no formato ('dd/mm/yyyy', 'HH:MM')
        """
        dt = datetime.strptime(iso_datetime, '%Y-%m-%d %H:%M:%S')
        data_br = dt.strftime('%d/%m/%Y')
        hora_br = dt.strftime('%H:%M')
        return data_br, hora_br
    
    def new_filter_by_brazilian_datetime_or(
        df: pd.DataFrame, 
        start_date: str, 
        start_time: str, 
        end_date: str, 
        end_time: str,
        timestamp_fields: Union[str, List[str]] = ['start_timeTimestamp', 'last_updateTimestamp'],
        verbose: bool = True
    ) -> pd.DataFrame:
        """
        Filtra DataFrame por intervalo de data/hora brasileira usando l√≥gica OR
        Retorna registros que tenham pelo menos um dos campos de timestamp no per√≠odo especificado
        
        Args:
            df: DataFrame para filtrar
            start_date: Data inicial no formato 'dd/mm/yyyy'
            start_time: Hora inicial no formato 'HH:MM'
            end_date: Data final no formato 'dd/mm/yyyy'
            end_time: Hora final no formato 'HH:MM'
            timestamp_fields: Campo(s) de timestamp para filtrar. Pode ser:
                - str: nome de um campo √∫nico
                - List[str]: lista de campos para aplicar l√≥gica OR
            verbose: Se True, imprime informa√ß√µes de debug
        
        Returns:
            DataFrame filtrado
            
        Raises:
            ValueError: Se os campos especificados n√£o existirem no DataFrame
            ValueError: Se o formato de data/hora for inv√°lido
        """
        
        # Normaliza timestamp_fields para sempre ser uma lista
        if isinstance(timestamp_fields, str):
            timestamp_fields = [timestamp_fields]
        
        # Valida se os campos existem no DataFrame
        missing_fields = [field for field in timestamp_fields if field not in df.columns]
        if missing_fields:
            raise ValueError(f"Campos n√£o encontrados no DataFrame: {missing_fields}")
        
        # Cria c√≥pia do DataFrame
        df_copy = df.copy()
        
        # Converte campos para num√©rico, for√ßando valores inv√°lidos para NaN
        for field in timestamp_fields:
            df_copy[field] = pd.to_numeric(df_copy[field], errors='coerce')
            if verbose:
                logger.info(f"Campo '{field}' convertido para tipo: {df_copy[field].dtype}")
        
        # Converte datas brasileiras para timestamps UTC
        try:
            start_timestamp_ms, end_timestamp_ms = _convert_brazilian_datetime_to_utc_timestamp(
                start_date, start_time, end_date, end_time
            )
        except ValueError as e:
            raise ValueError(f"Erro na convers√£o de data/hora: {e}")
        
        if verbose:
            logger.info(f"Filtro brasileiro: {start_date} {start_time} at√© {end_date} {end_time}")
            logger.info(f"Convertido para UTC timestamp: {start_timestamp_ms} at√© {end_timestamp_ms}")
        
        # Aplica filtro OR para todos os campos especificados
        conditions = []
        field_counts = {}
        
        for field in timestamp_fields:
            condition = (
                (df_copy[field].notna()) &
                (df_copy[field] >= start_timestamp_ms) & 
                (df_copy[field] <= end_timestamp_ms)
            )
            conditions.append(condition)
            field_counts[field] = condition.sum()
            
            if verbose:
                logger.info(f"Registros com '{field}' no per√≠odo: {field_counts[field]}")
        
        # Combina todas as condi√ß√µes com OR
        combined_condition = conditions[0]
        for condition in conditions[1:]:
            combined_condition = combined_condition | condition
        
        # Aplica filtro
        filtered_df = df_copy[combined_condition]
        
        if verbose:
            logger.info(f"Total de registros √∫nicos (OR entre {len(timestamp_fields)} campos): {len(filtered_df)}")
            
            # Mostra estat√≠sticas detalhadas se mais de um campo
            if len(timestamp_fields) > 1:
                logger.info(f"Campos utilizados: {', '.join(timestamp_fields)}")
        
        return filtered_df
    
    # === EXECU√á√ÉO PRINCIPAL ===
    
    try:
        logger.info("üöÄ Iniciando extra√ß√£o de telefones por per√≠odo")
        
        # === BUSCAR DADOS DA TABELA DE GRAFOS ===
        df_grafos = get_table_as_dataframe(table_id, baserow_token)
        
        if df_grafos.empty:
            return {
                'sucesso': True,
                'total_telefones': 0,
                'telefones': [],
                'periodo': {
                    'data_hora_inicio': request.data_hora_inicio,
                    'data_hora_fim': request.data_hora_fim
                },
                'erro': None
            }
        
        # === DEFINIR PER√çODO DE BUSCA ===
        if request.data_hora_inicio and request.data_hora_fim:
            # Converter formato ISO para brasileiro
            data_inicio, hora_inicio = convert_iso_to_brazilian_format(request.data_hora_inicio)
            data_fim, hora_fim = convert_iso_to_brazilian_format(request.data_hora_fim)
            
            logger.info(f"Per√≠odo especificado: {data_inicio} {hora_inicio} at√© {data_fim} {hora_fim}")
            
            # === FILTRAR DADOS POR PER√çODO ===
            filtered_df_grafos = new_filter_by_brazilian_datetime_or(
                df_grafos, 
                data_inicio, 
                hora_inicio, 
                data_fim, 
                hora_fim, 
                ['start_timeTimestamp', 'last_updateTimestamp']
            )
        else:
            # Se n√£o especificar per√≠odo, retorna todos
            logger.info("Nenhum per√≠odo especificado, retornando todos os telefones")
            filtered_df_grafos = df_grafos
        
        # === EXTRAIR TELEFONES ===
        if 'phoneNumber' not in filtered_df_grafos.columns:
            raise HTTPException(status_code=500, detail="Coluna 'phoneNumber' n√£o encontrada na tabela de grafos")
        
        # Extrair telefones √∫nicos e n√£o nulos
        telefones_series = filtered_df_grafos['phoneNumber'].dropna().astype(str)
        telefones_unicos = telefones_series.unique().tolist()
        
        # Remover strings vazias
        telefones_limpos = [tel for tel in telefones_unicos if tel.strip()]
        
        logger.info(f"‚úÖ {len(telefones_limpos)} telefones √∫nicos encontrados no per√≠odo")
        
        return {
            'sucesso': True,
            'total_telefones': len(telefones_limpos),
            'telefones': telefones_limpos,
            'periodo': {
                'data_hora_inicio': request.data_hora_inicio,
                'data_hora_fim': request.data_hora_fim
            },
            'erro': None
        }
    
    except Exception as e:
        error_msg = f"Erro na extra√ß√£o de telefones: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        
        return {
            'sucesso': False,
            'total_telefones': 0,
            'telefones': [],
            'periodo': {
                'data_hora_inicio': request.data_hora_inicio,
                'data_hora_fim': request.data_hora_fim
            },
            'erro': error_msg
        }


@context_router.post("/buscar-conversas-numero-com-fallback")
async def endpoint_buscar_conversas_numero_com_fallback(request: WhatsAppRequest):
    """
    üéØ ENDPOINT V2 - Pipeline WhatsApp com Fallback para Baserow
    
    Tenta Evolution API primeiro, se falhar ou retornar 0 mensagens,
    faz fallback para tabela de conversas do Baserow
    
    NOVO: Se forcar_evolution_apenas=True, busca APENAS na Evolution (sem fallback)
    """
    
    # === LOGGER LOCAL ===

    logger = logging.getLogger(__name__)
    
    
    
    # === VARI√ÅVEIS DE AMBIENTE ===
    
    evolution_url = os.getenv("EVOLUTION_URL")
    evolution_api_key = os.getenv("EVOLUTION_API_KEY") 
    evolution_instance_name = os.getenv("WHATSAPP_API_INSTANCE")
    agent_name = os.getenv("AGENT_NAME")
    baserow_token = os.getenv("BASEROW_API_TOKEN")
    baserow_message_table_id = os.getenv("BASEROW_MESSAGE_TABLE_ID")
    
    # Verificar vari√°veis obrigat√≥rias
    if not evolution_url:
        raise HTTPException(status_code=500, detail="EVOLUTION_URL n√£o definida no arquivo .env")
    if not evolution_api_key:
        raise HTTPException(status_code=500, detail="EVOLUTION_API_KEY n√£o definida no arquivo .env")
    if not evolution_instance_name:
        raise HTTPException(status_code=500, detail="WHATSAPP_API_INSTANCE n√£o definida no arquivo .env")
    if not agent_name:
        raise HTTPException(status_code=500, detail="AGENT_NAME n√£o definida no arquivo .env")
    if not baserow_token:
        raise HTTPException(status_code=500, detail="BASEROW_API_TOKEN n√£o definida no arquivo .env")
    if not baserow_message_table_id:
        raise HTTPException(status_code=500, detail="BASEROW_MESSAGE_TABLE_ID n√£o definida no arquivo .env")
    
    # Converter ID para inteiro
    try:
        message_table_id = int(baserow_message_table_id)
    except ValueError:
        raise HTTPException(status_code=500, detail="BASEROW_MESSAGE_TABLE_ID deve ser um n√∫mero inteiro")
    
    # === VALIDA√á√ïES SIMPLES ===
    def validar_request():
        """Valida√ß√µes b√°sicas do request"""
        # Validar hor√°rio comercial
        if len(request.horario_comercial) != 2:
            raise HTTPException(status_code=400, detail='horario_comercial deve ter 2 elementos [inicio, fim]')
        
        inicio, fim = request.horario_comercial
        if not (0 <= inicio <= 23 and 0 <= fim <= 23 and inicio < fim):
            raise HTTPException(status_code=400, detail='Hor√°rio comercial inv√°lido')
        
        # Validar dias √∫teis
        if not all(0 <= dia <= 6 for dia in request.dias_uteis):
            raise HTTPException(status_code=400, detail='Dias √∫teis devem estar entre 0 e 6')
        
        # Validar datas se fornecidas
        if request.data_hora_inicio is not None and request.data_hora_inicio.strip():
            try:
                datetime.strptime(request.data_hora_inicio, '%Y-%m-%d %H:%M:%S')
            except ValueError:
                raise HTTPException(status_code=400, detail="data_hora_inicio formato: 'YYYY-MM-DD HH:MM:SS'")
        
        if request.data_hora_fim is not None and request.data_hora_fim.strip():
            try:
                datetime.strptime(request.data_hora_fim, '%Y-%m-%d %H:%M:%S')
            except ValueError:
                raise HTTPException(status_code=400, detail="data_hora_fim formato: 'YYYY-MM-DD HH:MM:SS'")
    
    # Executar valida√ß√µes
    validar_request()
    
    # === FUN√á√ïES AUXILIARES (EVOLUTION) ===
    
    def converter_data_para_timestamp(data_str: str) -> int:
        """Converte string de data para timestamp"""
        try:
            dt = datetime.strptime(data_str, '%Y-%m-%d %H:%M:%S')
            return int(dt.timestamp())
        except ValueError:
            raise ValueError(f"Formato de data inv√°lido: {data_str}")
    
    def filtrar_mensagens_por_periodo(mensagens: List[Dict]) -> List[Dict]:
        """Filtra mensagens pelo per√≠odo especificado"""
        if not request.data_hora_inicio and not request.data_hora_fim:
            return mensagens
        
        mensagens_filtradas = []
        timestamp_inicio = None
        timestamp_fim = None
        
        if request.data_hora_inicio:
            timestamp_inicio = converter_data_para_timestamp(request.data_hora_inicio)
        
        if request.data_hora_fim:
            timestamp_fim = converter_data_para_timestamp(request.data_hora_fim)
        
        for msg in mensagens:
            timestamp_msg = msg.get('messageTimestamp', 0)
            
            if timestamp_inicio and timestamp_msg < timestamp_inicio:
                continue
                
            if timestamp_fim and timestamp_msg > timestamp_fim:
                continue
            
            mensagens_filtradas.append(msg)
        
        return mensagens_filtradas
    
    def buscar_nome_na_agenda(numero: str) -> str:
        """Busca nome do contato na agenda"""
        if not request.lista_contatos:
            return None
            
        def normalizar_numero(num: str) -> str:
            return ''.join(filter(str.isdigit, num))
        
        def extrair_numero_jid(jid: str) -> str:
            return jid.split('@')[0] if '@' in jid else jid
        
        def buscar_contato(numero_busca: str) -> str:
            numero_busca_norm = normalizar_numero(numero_busca)
            
            for contato in request.lista_contatos:
                numero_contato = None
                
                if 'remoteJid' in contato:
                    numero_contato = extrair_numero_jid(contato['remoteJid'])
                elif 'id' in contato:
                    numero_contato = extrair_numero_jid(contato['id'])
                
                if numero_contato:
                    numero_contato_norm = normalizar_numero(numero_contato)
                    
                    if numero_contato_norm == numero_busca_norm:
                        return contato.get('pushName') or contato.get('name') or contato.get('notify')
            return None
        
        numero_original = normalizar_numero(numero)
        
        # Tentativas de busca
        nome = buscar_contato(numero_original)
        if nome:
            return nome
        
        # Tentativas com varia√ß√µes brasileiras
        if numero_original.startswith('55'):
            if len(numero_original) == 13:
                numero_sem_9 = numero_original[:4] + numero_original[5:]
                nome = buscar_contato(numero_sem_9)
                if nome:
                    return nome
            
            elif len(numero_original) == 12:
                numero_com_9 = numero_original[:4] + '9' + numero_original[4:]
                nome = buscar_contato(numero_com_9)
                if nome:
                    return nome
            
            if len(numero_original) >= 10:
                numero_sem_pais = numero_original[2:]
                nome = buscar_contato(numero_sem_pais)
                if nome:
                    return nome
        
        return None
    
    def obter_nome_remetente(numero: str, push_name: str) -> str:
        """Obt√©m nome do remetente seguindo hierarquia de prioridade - VERS√ÉO CORRIGIDA"""
        
        # 1Ô∏è‚É£ PRIORIDADE 1: Nome salvo na agenda (busca inteligente)
        if request.lista_contatos:
            nome_salvo = buscar_nome_na_agenda(numero)
            if nome_salvo:
                return f"{nome_salvo} (contato salvo)"
        
        # 2Ô∏è‚É£ PRIORIDADE 2: pushName da mensagem
        if push_name and push_name != numero:
            # Se pushName √© diferente do n√∫mero, significa que o contato EST√Å salvo no WhatsApp
            return f"{push_name} (contato salvo)"
        
        # 3Ô∏è‚É£ PRIORIDADE 3: Fallback - contato n√£o salvo
        return f"({numero}) (remetente n√£o salvo)"


    def extrair_conteudo_mensagem(msg: Dict[str, Any], remetente: str) -> str:
        """Extrai conte√∫do da mensagem baseado no tipo"""
        message_type = msg.get('messageType', '')
        message_data = msg.get('message', {})
        
        if message_type in ['conversation', 'extendedTextMessage']:
            return message_data.get('conversation', '')
        
        elif message_type == 'documentMessage':
            doc_data = message_data.get('documentMessage', {})
            file_name = doc_data.get('fileName') or doc_data.get('title', 'arquivo')
            return f'[Documento "{file_name}" enviado por {remetente}]'
        
        elif message_type == 'audioMessage':
            audio_data = message_data.get('audioMessage', {})
            seconds = audio_data.get('seconds', 0)
            if seconds > 0:
                return f'[√Åudio de {seconds} segundos enviado por {remetente}]'
            else:
                return f'[Mensagem de √°udio enviada por {remetente}]'
        
        elif message_type == 'imageMessage':
            return f'[Imagem enviada por {remetente}]'
        
        elif message_type == 'videoMessage':
            return f'[V√≠deo enviado por {remetente}]'
        
        elif message_type == 'stickerMessage':
            return f'[Sticker enviado por {remetente}]'
        
        elif message_type == 'contactMessage':
            contact_data = message_data.get('contactMessage', {})
            display_name = contact_data.get('displayName', '')
            if display_name:
                return f'[Contato "{display_name}" compartilhado por {remetente}]'
            else:
                return f'[Contato compartilhado por {remetente}]'
        
        else:
            return f'[Mensagem de tipo {message_type} enviada por {remetente}]'
    
    def calcular_tempo_comercial(timestamp_inicio: int, timestamp_fim: int) -> float:
        """Calcula tempo em horas considerando hor√°rio comercial"""
        inicio = datetime.fromtimestamp(timestamp_inicio)
        fim = datetime.fromtimestamp(timestamp_fim)
        
        if request.modo_quebra == 'simples':
            return (fim - inicio).total_seconds() / 3600
        
        horas_comerciais = 0
        current = inicio
        
        while current < fim:
            if current.weekday() in request.dias_uteis:
                hora = current.hour
                if request.horario_comercial[0] <= hora < request.horario_comercial[1]:
                    proxima_hora = min(current + timedelta(hours=1), fim)
                    if proxima_hora.hour <= request.horario_comercial[1] or proxima_hora.day > current.day:
                        horas_comerciais += (proxima_hora - current).total_seconds() / 3600
            
            current += timedelta(hours=1)
        
        return horas_comerciais
    
    def quebrar_mensagens_por_tempo(mensagens: List[Dict]) -> List[List[Dict]]:
        """Quebra mensagens em conversas por tempo"""
        if not mensagens:
            return []
        
        conversas = []
        conversa_atual = [mensagens[0]]
        
        for i in range(1, len(mensagens)):
            msg_anterior = mensagens[i-1]
            msg_atual = mensagens[i]
            
            tempo_decorrido = calcular_tempo_comercial(
                msg_anterior['timestamp'], 
                msg_atual['timestamp']
            )
            
            if tempo_decorrido > request.intervalo_max_horas:
                conversas.append(conversa_atual)
                conversa_atual = [msg_atual]
            else:
                conversa_atual.append(msg_atual)
        
        if conversa_atual:
            conversas.append(conversa_atual)
        
        return conversas
    
    # === FUN√á√ïES AUXILIARES (BASEROW FALLBACK) ===
    
    def get_table_as_dataframe(table_id, token):
        """Busca tabela do Baserow como DataFrame"""
        base_url = "https://baserow-baserow.hqgf38.easypanel.host"
        headers = {"Authorization": f"Token {token}"}
        
        all_records = []
        page = 1
        
        logger.info(f"Buscando dados da tabela {table_id}...")
        
        while True:
            url = f"{base_url}/api/database/rows/table/{table_id}/"
            params = {
                "user_field_names": "true",
                "size": 200,
                "page": page
            }
            
            try:
                response = requests.get(url, headers=headers, params=params)
                response.raise_for_status()
                
                data = response.json()
                results = data.get('results', [])
                
                if not results:
                    break
                    
                all_records.extend(results)
                logger.info(f"P√°gina {page}: +{len(results)} registros")
                
                if not data.get('next'):
                    break
                    
                page += 1
                
            except requests.exceptions.RequestException as e:
                logger.error(f"Erro: {e}")
                break
        
        if all_records:
            df = pd.DataFrame(all_records)
            logger.info(f"‚úÖ DataFrame criado com {len(df)} linhas e {len(df.columns)} colunas")
            return df
        else:
            logger.info("‚ùå Nenhum dado encontrado")
            return pd.DataFrame()
    
    def _convert_brazilian_datetime_to_utc_timestamp(
        start_date: str, 
        start_time: str, 
        end_date: str, 
        end_time: str
    ) -> tuple:
        """Converte data/hora brasileira para timestamp UTC em milissegundos"""
        br_tz = pytz.timezone('America/Sao_Paulo')
        utc_tz = pytz.UTC
        
        # Converte data/hora inicial
        start_datetime_str = f"{start_date} {start_time}"
        start_br = datetime.strptime(start_datetime_str, '%d/%m/%Y %H:%M')
        start_br_localized = br_tz.localize(start_br)
        start_utc = start_br_localized.astimezone(utc_tz)
        start_timestamp_ms = int(start_utc.timestamp() * 1000)
        
        # Converte data/hora final
        end_datetime_str = f"{end_date} {end_time}"
        end_br = datetime.strptime(end_datetime_str, '%d/%m/%Y %H:%M')
        end_br_localized = br_tz.localize(end_br)
        end_utc = end_br_localized.astimezone(utc_tz)
        end_timestamp_ms = int(end_utc.timestamp() * 1000)
        
        return start_timestamp_ms, end_timestamp_ms
    
    def convert_iso_to_brazilian_format(iso_datetime: str) -> tuple:
        """Converte formato ISO para brasileiro"""
        dt = datetime.strptime(iso_datetime, '%Y-%m-%d %H:%M:%S')
        data_br = dt.strftime('%d/%m/%Y')
        hora_br = dt.strftime('%H:%M')
        return data_br, hora_br
    
    def new_filter_by_brazilian_datetime_or(
        df: pd.DataFrame, 
        start_date: str, 
        start_time: str, 
        end_date: str, 
        end_time: str,
        timestamp_fields: Union[str, List[str]] = ['messageTimestamp'],
        verbose: bool = True
    ) -> pd.DataFrame:
        """Filtra DataFrame por intervalo de data/hora brasileira"""
        
        # Normaliza timestamp_fields para sempre ser uma lista
        if isinstance(timestamp_fields, str):
            timestamp_fields = [timestamp_fields]
        
        # Valida se os campos existem no DataFrame
        missing_fields = [field for field in timestamp_fields if field not in df.columns]
        if missing_fields:
            raise ValueError(f"Campos n√£o encontrados no DataFrame: {missing_fields}")
        
        # Cria c√≥pia do DataFrame
        df_copy = df.copy()
        
        # Converte campos para num√©rico
        for field in timestamp_fields:
            df_copy[field] = pd.to_numeric(df_copy[field], errors='coerce')
        
        # Converte datas brasileiras para timestamps UTC
        try:
            start_timestamp_ms, end_timestamp_ms = _convert_brazilian_datetime_to_utc_timestamp(
                start_date, start_time, end_date, end_time
            )
        except ValueError as e:
            raise ValueError(f"Erro na convers√£o de data/hora: {e}")
        
        # Aplica filtro OR para todos os campos especificados
        conditions = []
        
        for field in timestamp_fields:
            condition = (
                (df_copy[field].notna()) &
                (df_copy[field] >= start_timestamp_ms) & 
                (df_copy[field] <= end_timestamp_ms)
            )
            conditions.append(condition)
        
        # Combina todas as condi√ß√µes com OR
        combined_condition = conditions[0]
        for condition in conditions[1:]:
            combined_condition = combined_condition | condition
        
        # Aplica filtro
        filtered_df = df_copy[combined_condition]
        
        return filtered_df
    
    def extract_group_specific_conversation(df_banco, pushname_remetente, numero_conversa):
        """Extrai conversa espec√≠fica do banco no formato da API WhatsApp"""
        
        # Filtrar mensagens pelo n√∫mero espec√≠fico
        conversas_filtradas = df_banco[
            df_banco['phoneNumber'] == numero_conversa
        ].copy()
        
        if conversas_filtradas.empty:
            logger.info(f"‚ö†Ô∏è Nenhuma mensagem encontrada para o n√∫mero: {numero_conversa}")
            return []
        
        # Ordenar por timestamp
        conversas_filtradas = conversas_filtradas.sort_values('messageTimestamp')
        
        logger.info(f"üìä Encontradas {len(conversas_filtradas)} mensagens para {numero_conversa}")
        
        mensagens_formatadas = []
        
        for _, row in conversas_filtradas.iterrows():
            # Determinar se √© fromMe
            from_me = row['pushName'] == pushname_remetente
            
            # Converter timestamp UTC milissegundos ‚Üí fuso brasileiro segundos
            timestamp_utc_ms = row['messageTimestamp']
            
            # Garantir que √© n√∫mero
            if isinstance(timestamp_utc_ms, str):
                timestamp_utc_ms = int(float(timestamp_utc_ms))
            
            timestamp_utc_s = timestamp_utc_ms / 1000
            # Converter para fuso brasileiro (UTC-3)
            timestamp_br = int(timestamp_utc_s - (3 * 3600))
            
            # Criar estrutura da API
            mensagem_api = {
                'id': row['uuid'],
                'key': {
                    'id': row['uuid'][:20].upper().replace('-', ''),
                    'fromMe': from_me,
                    'remoteJid': f"{numero_conversa}@s.whatsapp.net"
                },
                'pushName': row['pushName'],
                'messageType': 'conversation',
                'message': {
                    'conversation': row['message']
                },
                'messageTimestamp': timestamp_br,
                'instanceId': row.get('instance', ''),
                'source': 'database'
            }
            
            mensagens_formatadas.append(mensagem_api)
        
        logger.info(f"‚úÖ Conversa extra√≠da com sucesso: {len(mensagens_formatadas)} mensagens formatadas")
        return mensagens_formatadas
     
    # === FUN√á√ÉO PRINCIPAL - TENTAR EVOLUTION ===
    
    async def tentar_evolution():
        """Tenta buscar mensagens da Evolution API"""
        
        logger.info("USANDO FUN√á√ÉO NOVA COM CONVERSOR")

        try:
            # NOVO: Converter n√∫mero para formato Evolution automaticamente
            numero_original = request.numero_telefone
            
            def converter_numero_para_evolution(numero_input: str) -> str:
                """
                Converte n√∫mero para formato Evolution API
                
                Entrada: 5531984036418 ou 553184036418 ou 31984036418
                Sa√≠da: 553184036418@s.whatsapp.net
                """
                # Remove caracteres n√£o num√©ricos
                numero_limpo = ''.join(filter(str.isdigit, numero_input))
                
                # Se j√° tem @, retorna como est√°
                if '@' in numero_input:
                    return numero_input
                
                # Normaliza√ß√£o para n√∫meros brasileiros
                if len(numero_limpo) == 13 and numero_limpo.startswith('55'):
                    # 5531984036418 -> 553184036418 (remove o 9 extra)
                    numero_final = numero_limpo[:4] + numero_limpo[5:]
                elif len(numero_limpo) == 12 and numero_limpo.startswith('55'):
                    # 553184036418 -> mant√©m como est√°
                    numero_final = numero_limpo
                elif len(numero_limpo) == 11:
                    # 31984036418 -> 553184036418 (adiciona c√≥digo do pa√≠s)
                    numero_final = '55' + numero_limpo[2:]  # Remove primeiro 9 se for celular
                elif len(numero_limpo) == 10:
                    # 3184036418 -> 553184036418 (adiciona c√≥digo do pa√≠s + 9)
                    numero_final = '55' + numero_limpo
                else:
                    # Fallback: usa como est√°
                    numero_final = numero_limpo
                
                # Adiciona o sufixo do WhatsApp
                return f"{numero_final}@s.whatsapp.net"
            
            # Converter numero para formato Evolution
            numero_evolution = converter_numero_para_evolution(numero_original)
            
            logger.info(f"N√∫mero original: {numero_original}")
            logger.info(f"N√∫mero Evolution: {numero_evolution}")
            logger.info(f"üöÄ Tentando Evolution para {numero_evolution}")
            
            # Buscar mensagens
            headers = {
                'Content-Type': 'application/json',
                'apikey': evolution_api_key
            }
            
            url = f"{evolution_url.rstrip('/')}/chat/findMessages/{evolution_instance_name}"
            todas_mensagens = []
            pagina_atual = 1
                        
            async with aiohttp.ClientSession() as session:
                while True:
                    logger.info(f"üîç Buscando p√°gina {pagina_atual}")
                    
                    payload = {
                        "where": {
                            "key": {
                                "remoteJid": numero_evolution
                            }
                        },
                        "page": pagina_atual,
                        "offset": (pagina_atual - 1) * request.limite_por_pagina,
                        "limit": request.limite_por_pagina
                    }
                    
                    async with session.post(url, headers=headers, json=payload, timeout=request.timeout) as response:
                        response.raise_for_status()
                        resultado = await response.json()
                        
                        if isinstance(resultado, dict) and resultado.get('error'):
                            logger.error(f"‚ùå Erro da API: {resultado.get('message')}")
                            return None
                        
                        mensagens_pagina = []
                        
                        if isinstance(resultado, dict) and 'messages' in resultado:
                            info_mensagens = resultado['messages']
                            mensagens_pagina = info_mensagens.get('records', [])
                            total_paginas = info_mensagens.get('pages', 1)
                            
                            if pagina_atual == 1:
                                total_mensagens = info_mensagens.get('total', 0)
                                logger.info(f"üìä Total: {total_mensagens} mensagens")
                                logger.info(f"üìÑ Total p√°ginas dispon√≠veis: {total_paginas}")
                        
                        elif isinstance(resultado, list):
                            mensagens_pagina = resultado
                        
                        logger.info(f"üìã P√°gina {pagina_atual}: {len(mensagens_pagina)} mensagens")
                        
                        # Para o loop se n√£o h√° mais mensagens
                        if not mensagens_pagina:
                            logger.info("üõë Parando: n√£o h√° mais mensagens")
                            break
                        
                        todas_mensagens.extend(mensagens_pagina)
                        
                        pagina_atual += 1
                        
                        # Prote√ß√£o contra loop infinito
                        if pagina_atual > 500:
                            logger.warning("Atingiu limite de 500 p√°ginas por seguran√ßa")
                            break

            total_raw = len(todas_mensagens)
            
            # Filtrar por per√≠odo
            mensagens_filtradas = filtrar_mensagens_por_periodo(todas_mensagens)
            total_filtradas = len(mensagens_filtradas)
            
            logger.info(f"‚úÖ Evolution: {total_raw} raw, {total_filtradas} filtradas")
            
            # Retornar resultado
            return {
                'sucesso': True,
                'total_mensagens_raw': total_raw,
                'total_mensagens_filtradas': total_filtradas,
                'mensagens': mensagens_filtradas,
                'numero_original': numero_original,
                'numero_evolution_usado': numero_evolution  # Para debug
            }
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Evolution falhou: {str(e)}")
            return None

    # === FUN√á√ÉO FALLBACK - BASEROW ===
    
    def tentar_baserow():
        """Fallback: buscar mensagens do Baserow"""
        try:
            logger.info(f"üîÑ Tentando fallback Baserow para {request.numero_telefone}")
            
            # Buscar tabela de conversas
            df_conversas = get_table_as_dataframe(message_table_id, baserow_token)
            
            if df_conversas.empty:
                logger.warning("‚ùå Tabela de conversas vazia")
                return None
            
            # Se tem filtro de per√≠odo, aplicar
            if request.data_hora_inicio and request.data_hora_fim:
                data_inicio, hora_inicio = convert_iso_to_brazilian_format(request.data_hora_inicio)
                data_fim, hora_fim = convert_iso_to_brazilian_format(request.data_hora_fim)
                
                df_conversas = new_filter_by_brazilian_datetime_or(
                    df_conversas, 
                    data_inicio, 
                    hora_inicio, 
                    data_fim, 
                    hora_fim, 
                    ['messageTimestamp']
                )
            
            # Extrair conversa espec√≠fica
            mensagens_formatadas = extract_group_specific_conversation(
                df_conversas, 
                agent_name, 
                request.numero_telefone
            )
            
            if not mensagens_formatadas:
                logger.warning(f"‚ùå Baserow: nenhuma mensagem para {request.numero_telefone}")
                return None
            
            logger.info(f"‚úÖ Baserow: {len(mensagens_formatadas)} mensagens encontradas")
            
            return {
                'sucesso': True,
                'total_mensagens_raw': len(mensagens_formatadas),
                'total_mensagens_filtradas': len(mensagens_formatadas),
                'mensagens': mensagens_formatadas
            }
            
        except Exception as e:
            logger.error(f"‚ùå Baserow falhou: {str(e)}")
            return None
    
    # === EXECU√á√ÉO PRINCIPAL ===
    
    try:
        logger.info(f"üéØ V2: Processando conversa para {request.numero_telefone}")
        
        if request.forcar_evolution_apenas:
            logger.info("üöÄ Modo Evolution APENAS ativado - sem fallback")
        
        # TENTATIVA 1: EVOLUTION
        resultado_evolution = await tentar_evolution()
        
        # Verificar se Evolution funcionou e tem mensagens
        if resultado_evolution and resultado_evolution['total_mensagens_filtradas'] > 0:
            logger.info("‚úÖ Evolution: sucesso, processando mensagens...")
            mensagens_para_processar = resultado_evolution['mensagens']
            fonte = "evolution"
        elif request.forcar_evolution_apenas:
            # SE FOR√áOU EVOLUTION APENAS E N√ÉO ENCONTROU, RETORNA ERRO/VAZIO
            logger.warning("‚ùå Evolution for√ßado n√£o encontrou mensagens")
            return {
                'numero': request.numero_telefone,
                'sucesso': True,
                'total_mensagens_raw': 0,
                'total_mensagens_filtradas': 0,
                'conversa_processada': None,
                'fonte_dados': 'evolution_forcado',
                'erro': 'Nenhuma mensagem encontrada na Evolution (modo for√ßado)'
            }
        else:
            logger.info("üîÑ Evolution falhou/0 mensagens, tentando Baserow...")
            
            # TENTATIVA 2: BASEROW (APENAS SE N√ÉO FOR√áOU EVOLUTION)
            resultado_baserow = tentar_baserow()
            
            if resultado_baserow and resultado_baserow['total_mensagens_filtradas'] > 0:
                logger.info("‚úÖ Baserow: sucesso, processando mensagens...")
                mensagens_para_processar = resultado_baserow['mensagens']
                fonte = "baserow"
            else:
                logger.warning("‚ùå Ambas as fontes falharam")
                return {
                    'numero': request.numero_telefone,
                    'sucesso': True,
                    'total_mensagens_raw': 0,
                    'total_mensagens_filtradas': 0,
                    'conversa_processada': None,
                    'fonte_dados': 'nenhuma',
                    'erro': 'Nenhuma mensagem encontrada em Evolution nem Baserow'
                }
        
        # PROCESSAR MENSAGENS (mesmo c√≥digo do V1)
        mensagens_ordenadas = sorted(mensagens_para_processar, key=lambda x: x.get('messageTimestamp', 0))
        mensagens_estruturadas = []
        
        for msg in mensagens_ordenadas:
            timestamp = msg.get('messageTimestamp', 0)
            from_me = msg.get('key', {}).get('fromMe', False)
            message_type = msg.get('messageType', '')
            
            if from_me:
                push_name_atendente = msg.get('pushName', '')
                if push_name_atendente:
                    remetente = push_name_atendente
                else:
                    remetente = f"{agent_name} Agente IA"
            else:
                push_name = msg.get('pushName', '')
                remetente = obter_nome_remetente(request.numero_telefone, push_name)
            
            conteudo = extrair_conteudo_mensagem(msg, remetente)
            
            try:
                data_hora = datetime.fromtimestamp(timestamp).strftime('%d/%m/%Y %H:%M:%S')
            except (ValueError, OSError):
                data_hora = "Data inv√°lida"
            
            mensagens_estruturadas.append({
                'timestamp': timestamp,
                'data_hora': data_hora,
                'remetente': remetente,
                'from_me': from_me,
                'message_type': message_type,
                'conteudo': conteudo,
                'push_name': msg.get('pushName', ''),
                'message_id': msg.get('key', {}).get('id', '')
            })
        
        # GERAR RESULTADO (mesmo c√≥digo do V1)
        if not request.quebrar_conversas:
            # CONVERSA √öNICA
            conversa_texto = f"=== CONVERSA COM N√öMERO: {request.numero_telefone} ===\n\n"
            conversa_objeto = []
            
            for msg in mensagens_estruturadas:
                conversa_texto += f"[{msg['data_hora']}] {msg['remetente']}: {msg['conteudo']}\n\n"
                
                conversa_objeto.append({
                    'data_hora_envio': msg['data_hora'],
                    'timestamp': msg['timestamp'],
                    'remetente': msg['remetente'],
                    'conteudo': msg['conteudo']
                })
            
            if request.formato_saida == 'texto':
                conversa_processada = {
                    'numero': request.numero_telefone,
                    'total_mensagens': len(mensagens_ordenadas),
                    'conversa_texto': conversa_texto,
                    'conversa_objeto': conversa_objeto
                }
            else:
                conversa_processada = {
                    'numero': request.numero_telefone,
                    'total_mensagens': len(mensagens_ordenadas),
                    'mensagens': mensagens_estruturadas
                }
            
            return {
                'numero': request.numero_telefone,
                'sucesso': True,
                'total_mensagens_raw': len(mensagens_para_processar),
                'total_mensagens_filtradas': len(mensagens_estruturadas),
                'conversa_processada': conversa_processada,
                'fonte_dados': fonte,  # 'evolution' ou 'baserow'
                'erro': None
            }
        
        else:
            # M√öLTIPLAS CONVERSAS
            conversas_quebradas = quebrar_mensagens_por_tempo(mensagens_estruturadas)
            lista_conversas = []
            
            for i, msgs_conversa in enumerate(conversas_quebradas):
                primeira_msg = msgs_conversa[0]
                ultima_msg = msgs_conversa[-1]
                periodo = f"{primeira_msg['data_hora']} - {ultima_msg['data_hora']}"
                
                if request.formato_saida == 'texto':
                    conversa_texto = f"=== CONVERSA {i+1} COM N√öMERO: {request.numero_telefone} ===\n"
                    conversa_texto += f"=== PER√çODO: {periodo} ===\n\n"
                    
                    conversa_objeto = []
                    
                    for msg in msgs_conversa:
                        conversa_texto += f"[{msg['data_hora']}] {msg['remetente']}: {msg['conteudo']}\n\n"
                        
                        conversa_objeto.append({
                            'data_hora_envio': msg['data_hora'],
                            'timestamp': msg['timestamp'],
                            'remetente': msg['remetente'],
                            'conteudo': msg['conteudo']
                        })
                    
                    lista_conversas.append({
                        'numero': request.numero_telefone,
                        'conversa_numero': i + 1,
                        'total_mensagens': len(msgs_conversa),
                        'periodo': periodo,
                        'conversa_texto': conversa_texto,
                        'conversa_objeto': conversa_objeto
                    })
                else:
                    lista_conversas.append({
                        'numero': request.numero_telefone,
                        'conversa_numero': i + 1,
                        'total_mensagens': len(msgs_conversa),
                        'periodo': periodo,
                        'mensagens': msgs_conversa
                    })
            
            return {
                'numero': request.numero_telefone,
                'sucesso': True,
                'total_mensagens_raw': len(mensagens_para_processar),
                'total_mensagens_filtradas': len(mensagens_estruturadas),
                'total_conversas': len(lista_conversas),
                'conversas': lista_conversas,
                'fonte_dados': fonte,  # 'evolution' ou 'baserow'
                'erro': None
            }
    
    except Exception as e:
        error_msg = f"Erro no processamento V2: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        
        return {
            'numero': request.numero_telefone,
            'sucesso': False,
            'total_mensagens_raw': 0,
            'total_mensagens_filtradas': 0,
            'conversa_processada': None,
            'fonte_dados': 'erro',
            'erro': error_msg
        }

@context_router.post("/analisar-conversa-atributos-quantitativos")
async def endpoint_analisar_conversa_atributos_quantitativos(request: AnaliseQuantitativaRequest):
    """
    üìä Analisa atributos quantitativos de uma conversa espec√≠fica
    
    Simples: chama o endpoint que funciona + aplica a fun√ß√£o que funciona
    """
    
    logger = logging.getLogger(__name__)
    
    try:
        logger.info(f"üöÄ Analisando conversa: {request.numero_telefone}")
        
        # === 1. CHAMAR ENDPOINT QUE J√Å FUNCIONA ===
        fallback_request = WhatsAppRequest(
            numero_telefone=request.numero_telefone,
            data_hora_inicio=request.data_hora_inicio,
            data_hora_fim=request.data_hora_fim,
            quebrar_conversas=False,
            formato_saida="texto"
        )
        
        resultado_fallback = await endpoint_buscar_conversas_numero_com_fallback(fallback_request)
        
        if not resultado_fallback.get('sucesso'):
            return {
                'sucesso': False,
                'numero_telefone': request.numero_telefone,
                'erro': f"Erro no fallback: {resultado_fallback.get('erro')}",
                'estatisticas': None
            }
        
        # === 2. PEGAR CONVERSA_OBJETO QUE J√Å EST√Å PRONTO ===
        conversa_objeto = resultado_fallback['conversa_processada']['conversa_objeto']
        
        if not conversa_objeto:
            return {
                'sucesso': False,
                'numero_telefone': request.numero_telefone,
                'erro': 'conversa_objeto vazio',
                'estatisticas': None
            }
        
        # === 3. APLICAR SUA FUN√á√ÉO QUE J√Å FUNCIONA ===
        def analisar_conversas_atributos_quantitativos(conversa_objeto, chunk_size=2, teto_minutos=30):
            """Sua fun√ß√£o original - copiada exatamente como est√°"""
            from functools import reduce
            
            def chunk_messages(messages, chunk_size):
                for i in range(0, len(messages), chunk_size):
                    yield messages[i:i + chunk_size]
            
            def detectar_remetentes(conversa_objeto):
                clientes = set()
                atendentes_humanos = set()
                atendente_ia = None
                
                for msg in conversa_objeto:
                    remetente = msg['remetente']
                    
                    if "Agente IA" in remetente:
                        atendente_ia = remetente
                    elif "(remetente n√£o salvo)" in remetente or "(contato salvo)" in remetente:
                        clientes.add(remetente)
                    elif remetente.startswith("(") and remetente.endswith(")") and any(char.isdigit() for char in remetente):
                        clientes.add(remetente)
                    else:
                        if not any(pattern in remetente for pattern in ["553", "+55", "(remetente", "(contato"]):
                            atendentes_humanos.add(remetente)
                
                return {
                    'clientes': clientes,
                    'atendentes_humanos': atendentes_humanos,
                    'atendente_ia': atendente_ia
                }
            
            messages_chunks = list(chunk_messages(conversa_objeto, chunk_size))
            remetentes_detectados = detectar_remetentes(conversa_objeto)
            clientes = remetentes_detectados['clientes']
            atendentes_humanos = remetentes_detectados['atendentes_humanos']
            atendente_ia = remetentes_detectados['atendente_ia']
            
            def identificar_tipo_remetente(remetente: str) -> str:
                if atendente_ia and remetente == atendente_ia:
                    return 'atendente_ia'
                elif remetente in atendentes_humanos:
                    return 'atendente_humano'
                elif remetente in clientes:
                    return 'cliente'
                else:
                    if "Agente IA" in remetente:
                        return 'atendente_ia'
                    elif "(remetente n√£o salvo)" in remetente or "(contato salvo)" in remetente:
                        return 'cliente'
                    else:
                        return 'atendente_humano'
            
            def conversation_reducer(acc, chunk):
                if len(chunk) < 2:
                    return acc
                
                first_msg = chunk[0]
                second_msg = chunk[1]
                first_sender = first_msg['remetente']
                second_sender = second_msg['remetente']
                
                first_type = identificar_tipo_remetente(first_sender)
                second_type = identificar_tipo_remetente(second_sender)
                
                if (first_type == 'cliente' and second_type in ['atendente_humano', 'atendente_ia']):
                    response_time = second_msg['timestamp'] - first_msg['timestamp']
                    acc['response_times'].append(response_time)
                    acc['total_response_time'] += response_time
                    
                    if second_type == 'atendente_humano':
                        acc['response_times_human'].append(response_time)
                        acc['total_response_time_human'] += response_time
                        
                        tempo_trabalho = calcular_tempo_trabalho_com_teto(response_time, teto_minutos)
                        acc['volume_tempo_trabalho'] += tempo_trabalho
                    else:
                        acc['response_times_ia'].append(response_time)
                        acc['total_response_time_ia'] += response_time
                
                for msg in chunk:
                    tipo_msg = identificar_tipo_remetente(msg['remetente'])
                    if tipo_msg == 'cliente':
                        dt = datetime.fromtimestamp(msg['timestamp'], tz=pytz.timezone('America/Sao_Paulo'))
                        hour = dt.hour
                        acc['client_activity_by_hour'][hour] = acc['client_activity_by_hour'].get(hour, 0) + 1
                        acc['total_client_messages'] += 1
                
                return acc
            
            def calcular_tempo_trabalho_com_teto(tempo_segundos: int, teto_minutos: int) -> int:
                teto_segundos = teto_minutos * 60
                if tempo_segundos <= teto_segundos:
                    return tempo_segundos
                else:
                    return 60
            
            initial_state = {
                'response_times': [],
                'total_response_time': 0,
                'response_times_human': [],
                'total_response_time_human': 0,
                'response_times_ia': [],
                'total_response_time_ia': 0,
                'client_activity_by_hour': {},
                'total_client_messages': 0,
                'volume_tempo_trabalho': 0
            }
            
            result = reduce(conversation_reducer, messages_chunks, initial_state)
            
            stats = {}
            stats['total_mensagens'] = len(conversa_objeto)
            stats['total_chunks'] = len(messages_chunks)
            stats['clientes_detectados'] = list(clientes)
            stats['atendentes_humanos_detectados'] = list(atendentes_humanos)
            stats['atendente_ia_detectado'] = atendente_ia
            stats['ia_presente'] = atendente_ia is not None
            
            if result['response_times']:
                stats['tempo_medio_resposta'] = result['total_response_time'] / len(result['response_times'])
            else:
                stats['tempo_medio_resposta'] = 0
            
            if result['response_times_human']:
                stats['tempo_medio_resposta_humano'] = result['total_response_time_human'] / len(result['response_times_human'])
            else:
                stats['tempo_medio_resposta_humano'] = 0
            
            if atendente_ia and result['response_times_ia']:
                stats['tempo_medio_resposta_ia'] = result['total_response_time_ia'] / len(result['response_times_ia'])
            else:
                stats['tempo_medio_resposta_ia'] = 0
            
            stats['volume_total_tempo_trabalho'] = result['volume_tempo_trabalho']
            
            if result['client_activity_by_hour']:
                melhor_hora = max(result['client_activity_by_hour'], key=result['client_activity_by_hour'].get)
                stats['melhor_horario_envio'] = melhor_hora
                stats['distribuicao_atividade_por_hora'] = result['client_activity_by_hour']
            else:
                stats['melhor_horario_envio'] = None
                stats['distribuicao_atividade_por_hora'] = {}
            
            if conversa_objeto:
                ultima_mensagem = conversa_objeto[-1]
                tipo_ultimo_remetente = identificar_tipo_remetente(ultima_mensagem['remetente'])
                
                if tipo_ultimo_remetente == 'cliente':
                    stats['ultimo_remetente'] = "Cliente"
                else:
                    stats['ultimo_remetente'] = "Atendimento"
                
                stats['data_hora_ultima_mensagem'] = datetime.fromtimestamp(ultima_mensagem['timestamp'], tz=pytz.timezone('America/Sao_Paulo'))
                
                ultima_mensagem_cliente = None
                for msg in reversed(conversa_objeto):
                    if identificar_tipo_remetente(msg['remetente']) == 'cliente':
                        ultima_mensagem_cliente = msg
                        break
                
                if ultima_mensagem_cliente:
                    stats['data_hora_ultima_mensagem_cliente'] = datetime.fromtimestamp(ultima_mensagem_cliente['timestamp'], tz=pytz.timezone('America/Sao_Paulo'))
                else:
                    stats['data_hora_ultima_mensagem_cliente'] = None
                
                ultima_mensagem_atendimento = None
                for msg in reversed(conversa_objeto):
                    tipo_msg = identificar_tipo_remetente(msg['remetente'])
                    if tipo_msg in ['atendente_humano', 'atendente_ia']:
                        ultima_mensagem_atendimento = msg
                        break
                
                if ultima_mensagem_atendimento:
                    stats['data_hora_ultima_mensagem_atendimento'] = datetime.fromtimestamp(ultima_mensagem_atendimento['timestamp'], tz=pytz.timezone('America/Sao_Paulo'))
                else:
                    stats['data_hora_ultima_mensagem_atendimento'] = None
            else:
                stats['ultimo_remetente'] = None
                stats['data_hora_ultima_mensagem'] = None
                stats['data_hora_ultima_mensagem_cliente'] = None
                stats['data_hora_ultima_mensagem_atendimento'] = None
            
            return stats
        
        # === 4. EXECUTAR AN√ÅLISE ===
        estatisticas = analisar_conversas_atributos_quantitativos(
            conversa_objeto, 
            chunk_size=2, 
            teto_minutos=request.teto_minutos
        )
        
        logger.info(f"‚úÖ An√°lise conclu√≠da: {estatisticas['total_mensagens']} mensagens")
        
        # === 5. RETORNAR ===
        return {
            'sucesso': True,
            'numero_telefone': request.numero_telefone,
            'periodo': {
                'data_hora_inicio': request.data_hora_inicio,
                'data_hora_fim': request.data_hora_fim
            },
            'teto_minutos_usado': request.teto_minutos,
            'estatisticas': estatisticas,
            'erro': None
        }
    
    except Exception as e:
        error_msg = f"Erro na an√°lise: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        
        return {
            'sucesso': False,
            'numero_telefone': request.numero_telefone,
            'erro': error_msg,
            'estatisticas': None
        }

@context_router.post("/analisar-conversa-atributos-qualitativos")
async def endpoint_analisar_conversa_atributos_qualitativos(request: AnaliseQualitativaRequest):
    """
    üìä Analisa atributos qualitativos de uma conversa espec√≠fica usando LLM
    
    Contexto de neg√≥cio vem do .env automaticamente (pode ser sobrescrito no request)
    """
    
    logger = logging.getLogger(__name__)
    
    # === CONFIGURA√á√ïES LLM MARITACA ===
    maritaca_api_key = os.getenv("MARITACA_API_KEY")
    
    # Configura√ß√µes fixas
    maritaca_base_url = "https://chat.maritaca.ai/api"
    modelo_padrao = "sabia-3.1"
    
    if not maritaca_api_key:
        raise HTTPException(status_code=500, detail="MARITACA_API_KEY n√£o definida no arquivo .env")
    
    # Usar modelo do request ou padr√£o hardcoded
    modelo_usar = request.modelo or modelo_padrao
    
    # === CONTEXTO DE NEG√ìCIO (AUTOMATICO DO .ENV) ===
    contexto_negocio = request.contexto_negocio or ContextoNegocio()
    
    # Converter para dict para compatibilidade
    contexto_dict = {
        "nome_empresa": contexto_negocio.nome_empresa,
        "tipo_negocio": contexto_negocio.tipo_negocio,
        "especialidade": contexto_negocio.especialidade,
        "profissionais_principais": contexto_negocio.profissionais_principais,
        "cidade": contexto_negocio.cidade,
        "responsavel_atendimento": contexto_negocio.responsavel_atendimento,
        "numero_whatsapp": contexto_negocio.numero_whatsapp,
        "descricao_servicos": contexto_negocio.descricao_servicos
    }
    
    try:
        logger.info(f"üöÄ An√°lise qualitativa: {request.numero_telefone}")
        logger.info(f"ü§ñ Modelo: {modelo_usar} | Temp: {request.temperatura}")
        logger.info(f"üè¢ Empresa: {contexto_negocio.nome_empresa}")
        
        # === 1. BUSCAR CONVERSA ===
        fallback_request = WhatsAppRequest(
            numero_telefone=request.numero_telefone,
            data_hora_inicio=request.data_hora_inicio,
            data_hora_fim=request.data_hora_fim,
            quebrar_conversas=False,
            formato_saida="texto"
        )
        
        resultado_fallback = await endpoint_buscar_conversas_numero_com_fallback(fallback_request)
        
        if not resultado_fallback.get('sucesso'):
            return {
                'sucesso': False,
                'numero_telefone': request.numero_telefone,
                'erro': f"Erro ao buscar conversa: {resultado_fallback.get('erro')}",
                'analise': None
            }
        
        # === 2. EXTRAIR CONVERSA_OBJETO ===
        conversa_objeto = resultado_fallback['conversa_processada']['conversa_objeto']
        
        if not conversa_objeto:
            return {
                'sucesso': False,
                'numero_telefone': request.numero_telefone,
                'erro': 'conversa_objeto vazio',
                'analise': None
            }
        
        logger.info(f"‚úÖ Conversa obtida: {len(conversa_objeto)} mensagens")
        
        # === 3. CONFIGURAR CLIENT MARITACA ===
        import openai
        
        client = openai.OpenAI(
            api_key=maritaca_api_key,
            base_url=maritaca_base_url,
        )
        
        # === 4. FUN√á√ÉO DE AN√ÅLISE QUALITATIVA (INNER FUNCTION) ===
        
        def analisar_conversas_atributos_qualitativos(
            conversa_objeto: list,
            contexto_negocio: dict,
            client,
            campos_analise: list = None,
            modelo: str = "sabia-3.1",
            temperatura: float = 0.1
        ):
            """Fun√ß√£o de an√°lise qualitativa completa"""
            
            # Campos padr√£o se n√£o especificado
            if campos_analise is None:
                campos_analise = [
                    "identificacao", "engajamento", "comportamental", 
                    "historico_relacionamento", "validacao_cliente", "comercial",
                    "analise_avancada", "scores", "qualidade_dados", "status_operacional"
                ]
            
            # Converter conversa_objeto para texto formatado
            def formatar_conversa_para_llm(conversa_objeto):
                conversa_texto = ""
                for msg in conversa_objeto:
                    data_hora = msg.get('data_hora_envio', 'Data n√£o dispon√≠vel')
                    remetente = msg.get('remetente', 'Remetente desconhecido')
                    conteudo = msg.get('conteudo', '')
                    conversa_texto += f"[{data_hora}] {remetente}: {conteudo}\n\n"
                return conversa_texto
            
            # Construir se√ß√µes do prompt baseado nos campos solicitados
            def construir_instrucoes_campos(campos_analise, contexto_negocio):
                instrucoes = ""
                
                if "identificacao" in campos_analise:
                    instrucoes += """
                üìä IDENTIFICA√á√ÉO E CONTEXTO:
                - numero_whatsapp: N√∫mero do WhatsApp analisado
                - nome_extraido: Nome mencionado nas conversas (paciente ou quem agenda)
                - tipo_interlocutor: Paciente direto | Familiar/acompanhante | Fornecedor/parceiro | N√£o identificado 
                - data_hora_primeira_mensagem: Data e hora da primeira mensagem
                - data_hora_ultima_mensagem: Data e hora da √∫ltima mensagem 
                - primeira_mensagem: Quem enviou (lead/prospect/cliente | atendente)
                - ultima_mensagem: Quem enviou (lead/prospect/cliente | atendente)
                - resumo_conversa: 2-3 frases resumindo a conversa
                - cidade_origem: Cidade mencionada pelo cliente ou "N√£o identificado"
                """

                if "engajamento" in campos_analise:
                    instrucoes += """
                üîÑ ENGAJAMENTO NO WHATSAPP:
                - total_mensagens_conversa: N√∫mero total de mensagens
                - proporcao_mensagens_cliente: % de mensagens enviadas pelo cliente
                - frequencia_interacao: Di√°ria | Semanal | Mensal | Espor√°dica
                - padrao_resposta_cliente: Sempre responde | Responde seletivamente | Raramente responde | Nunca responde
                - tempo_primeira_resposta_cliente: Tempo para primeira resposta (segundos)
                - tempo_medio_resposta_cliente: Tempo m√©dio de resposta (segundos)
                - tempo_maximo_sem_resposta: Maior gap sem resposta (segundos)
                """

                if "comportamental" in campos_analise:
                    instrucoes += """
                üéØ COMPORTAMENTAL NO CANAL:
                - tom_predominante_cliente: Colaborativo | Formal/educado | Ansioso/preocupado | Investigativo/questionador | Impaciente/exigente | Neutro/objetivo
                - evolucao_tom_conversa: Melhorou | Manteve-se est√°vel | Piorou | Oscilante
                - nivel_proatividade: Alto (inicia conversas) | M√©dio (responde e pergunta) | Baixo (apenas responde)
                - sinais_satisfacao_expressos: Lista de indicadores positivos
                - sinais_insatisfacao_expressos: Lista de indicadores negativos
                - resultado_final_conversa: Agendamento consulta conclu√≠do | Agendamento consulta em andamento | Agendamento cirurgia conclu√≠do | Agendamento cirurgia em andamento | Agendamento de Procedimento/Tratamento conclu√≠do | Agendamento de Procedimento/Tratamento em andamento | M√∫ltiplos | N√£o conclusivo
                """

                if "historico_relacionamento" in campos_analise:
                    instrucoes += """
                üè• HIST√ìRICO DE RELACIONAMENTO:
                - referencias_interacoes_anteriores: Menciona espec√≠ficas | Fala genericamente | Primeira vez | N√£o fica claro
                - servicos_mencionados: Lista de servi√ßos/produtos citados
                - profissionais_citados: Nomes de profissionais/atendentes mencionados
                - tempo_ultima_interacao_mencionada: Quando cliente menciona √∫ltima intera√ß√£o
                - continuidade_relacionamento: Acompanhamento | Retorno pontual | Novo relacionamento | Urg√™ncia
                """

                if "validacao_cliente" in campos_analise:
                    instrucoes += """
                ü©∫ VALIDA√á√ÉO STATUS CLIENTE:
                - status_cliente_whatsapp: Cliente confirmado | Prov√°vel cliente | N√£o √© cliente | Inconclusivo
                - evidencias_cliente_existente: Men√ß√µes expl√≠citas de intera√ß√µes/compras anteriores
                - evidencias_cliente_novo: Indicadores claros de primeira vez
                - incertezas_historico: Gaps ou ambiguidades sobre hist√≥rico de relacionamento
                - tipo_demanda_mencionada: Baseado no tipo de neg√≥cio (ex: Consulta | Compra | Suporte | Informa√ß√£o | M√∫ltiplos | N√£o especificado)
                """

                if "comercial" in campos_analise:
                    instrucoes += """
                üí∞ ASPECTOS COMERCIAIS:
                - sensibilidade_preco_expressa: Alta | M√©dia | Baixa | N√£o mencionado
                - mencoes_convenio: Planos citados ou perguntas sobre cobertura
                - poder_decisao_aparente: Decide sozinho | Consulta terceiros | Agenda para outros | N√£o fica claro
                - urgencia_expressa: Muito urgente | Urgente | Moderada | Flex√≠vel
                """

                if "analise_avancada" in campos_analise:
                    instrucoes += """
                üß† AN√ÅLISE AVAN√áADA:
                - evolucao_interesse: Cresceu | Manteve | Diminuiu | Oscilante
                - perfil_comunicacao: Ansioso | Pr√°tico | Detalhista | Desconfiado | Colaborativo | Impaciente
                - preocupacoes_implicitas: Hesita√ß√µes n√£o verbalizadas
                - motivacoes_nao_verbalizadas: O que realmente motiva al√©m do declarado
                - objecoes_nao_expressas: Barreiras percebidas mas n√£o mencionadas
                """

                if "scores" in campos_analise:
                    instrucoes += """
                üéØ SCORES (1-10):
                - engagement_score: baseado em frequ√™ncia + qualidade + proatividade
                - conversion_readiness_score: baseado em urg√™ncia + aus√™ncia obje√ß√µes + poder decis√£o
                - loyalty_potential_score: baseado em satisfa√ß√£o + recorr√™ncia + sinais fideliza√ß√£o
                - risk_score: baseado em insatisfa√ß√£o + gaps + mudan√ßas negativas
                """

                if "qualidade_dados" in campos_analise:
                    instrucoes += """
                ‚ö†Ô∏è QUALIDADE DOS DADOS:
                - nivel_certeza_analise: Alta | M√©dia | Baixa | Inconclusiva
                - necessita_validacao_externa: Sim | N√£o
                - base_analise: Descri√ß√£o da fonte dos dados
                - confiabilidade_dados: Percentual estimado de completude
                """

                if "status_operacional" in campos_analise:
                    instrucoes += """
                üö® STATUS OPERACIONAL:
                - status_conversa: Conclu√≠da | Inconclusivo | Pendente com necessidade de a√ß√µes lead/prospect/cliente | Pendente com necessidade de a√ß√µes atendente
                - acao_imediata_necessaria: Sim | N√£o | Inconclusivo
                - proximo_passo: Pr√≥ximo passo necess√°rio baseado na conversa
                """

                if "avaliacao_agente_ia" in campos_analise:
                    instrucoes += """
                ü§ñ AVALIA√á√ÉO AGENTE IA:
                
                üìä IDENTIFICA√á√ÉO E DETEC√á√ÉO IA:
                - momentos_ativacao_ia: Quando a IA entrou na conversa
                - transicoes_ia_humano: Quantas vezes passou de IA ‚Üí humano
                
                üéØ EFIC√ÅCIA NA CONDU√á√ÉO:
                - intencao_cliente_identificada: Corretamente | Parcialmente | Incorretamente | N√£o identificou
                - direcionamento_conversa: Muito eficaz | Eficaz | Pouco eficaz | Ineficaz
                - conclusao_demanda_ia: Resolveu completamente | Resolveu parcialmente | N√£o resolveu | Piorou situa√ß√£o
                - escalacoes_necessarias: Nenhuma | 1 escala√ß√£o | M√∫ltiplas escala√ß√µes | Falha na escala√ß√£o
                - loops_conversa: Nenhum | Poucos | Muitos | Loop infinito
                
                üí¨ QUALIDADE DAS RESPOSTAS:
                - precisao_informacoes: Todas corretas | Maioria corretas | Algumas incorretas | Maioria incorretas
                - completude_respostas: Sempre completas | Geralmente completas | Parciais | Incompletas
                - relevancia_contexto: Sempre relevante | Geralmente relevante | √Äs vezes irrelevante | Frequentemente irrelevante
                - personalizacao_atendimento: Alta | M√©dia | Baixa | Nenhuma
                - tom_comunicacao_ia: Muito apropriado | Apropriado | Pouco apropriado | Inapropriado
                
                ‚ö° EFICI√äNCIA OPERACIONAL:
                - resolucoes_primeiro_contato: Sim | Parcial | N√£o | Agravou
                - necessidade_repeticoes: Nenhuma | Poucas | Muitas | Excessivas
                - handoff_qualidade: Muito boa | Boa | Ruim | Muito ruim | N√£o houve
                - continuidade_contexto: Perfeita | Boa | Parcial | Perdida
                
                üò§ FRUSTRA√á√ÉO E LIMITA√á√ïES:
                - sinais_frustracao_ia: Nenhum | Leves | Moderados | Altos
                - tentativas_burlar_ia: Nenhuma | Poucas | Muitas | Persistentes
                - solicitacoes_humano: Nenhuma | Eventual | Frequente | Constante
                - limitacoes_evidentes: Lista de limita√ß√µes identificadas
                - momentos_criticos_falha: Quando a IA falhou criticamente
                
                üîÑ APRENDIZADO E ADAPTA√á√ÉO:
                - correcoes_durante_conversa: Sim | N√£o | Parcialmente
                - melhoria_ao_longo_conversa: Sim | N√£o | Manteve padr√£o
                - uso_historico_cliente: Muito bem | Bem | Pouco | N√£o usou
                - adaptacao_linguagem_cliente: Muito boa | Boa | Pouca | Nenhuma
                
                üìà IMPACTO NO RESULTADO:
                - contribuicao_resultado_final: Muito positiva | Positiva | Neutra | Negativa | Muito negativa
                - satisfacao_cliente_com_ia: Muito satisfeito | Satisfeito | Neutro | Insatisfeito | Muito insatisfeito
                - preferencia_expressa: Prefere IA | Indiferente | Prefere humano | Rejeita IA
                - economia_tempo_gerada: Alta | M√©dia | Baixa | Nenhuma | Perdeu tempo
                
                üéØ SCORES IA (1-10):
                - score_compreensao_intent: Capacidade de entender inten√ß√£o
                - score_qualidade_respostas: Precis√£o e completude
                - score_eficiencia_processo: Velocidade e resolu√ß√£o
                - score_experiencia_cliente: Satisfa√ß√£o geral com IA
                - score_handoff_humano: Qualidade da transi√ß√£o
                
                üîß OPORTUNIDADES DE MELHORIA:
                - gaps_conhecimento_identificados: Lacunas no conhecimento da IA
                - padroes_falha_recorrentes: Padr√µes de erro identificados
                - sugestoes_treinamento: √Åreas para melhorar o treinamento
                - ajustes_fluxo_sugeridos: Mudan√ßas no fluxo de conversa
                - momentos_ideal_escalacao: Quando deveria ter escalado
                """

                if "status_atendimento_conversa" in campos_analise:
                    instrucoes += """
                üìã STATUS ATENDIMENTO CONVERSA:
                - conversa_em_aberto: Sim | N√£o
                - pendencia_com_quem: Cliente | Atendente | Ambos | Nenhuma pend√™ncia
                - ultima_pendencia_identificada: Descri√ß√£o espec√≠fica da √∫ltima pend√™ncia identificada na conversa
                - resumo_interacoes_ate_o_momento: Resume todas as conversas dando um status do momento atual
                """

                # === NOVA CATEGORIA: MEM√ìRIA CONTEXTO ===
                if "memoria_contexto" in campos_analise:
                    instrucoes += """
                üß† MEM√ìRIA CONTEXTO:
                - resumo_interacoes_ate_o_momento: Resume todas as conversas dando um status do momento atual
                - tom_predominante_cliente: Colaborativo | Formal/educado | Ansioso/preocupado | Investigativo/questionador | Impaciente/exigente | Neutro/objetivo
                - status_cliente_whatsapp: Cliente confirmado | Prov√°vel cliente | N√£o √© cliente | Inconclusivo
                - conversa_em_aberto: Sim | N√£o
                - pendencia_com_quem: Cliente | Atendente | Ambos | Nenhuma pend√™ncia
                """
                
                return instrucoes

            try:
                # Formatar conversa
                conversa_texto = formatar_conversa_para_llm(conversa_objeto)
                
                # Construir contexto din√¢mico
                contexto_dinamico = f"""
                CONTEXTO DO NEG√ìCIO:
                - {contexto_negocio.get('nome_empresa', 'Empresa')} √© uma {contexto_negocio.get('tipo_negocio', 'empresa')} especializada em {contexto_negocio.get('especialidade', 'servi√ßos diversos')}.
                - Profissionais/Respons√°veis principais: {', '.join(contexto_negocio.get('profissionais_principais', ['N√£o especificado']))}
                - Localiza√ß√£o: {contexto_negocio.get('cidade', 'N√£o especificado')}
                - Atendimento WhatsApp: {contexto_negocio.get('responsavel_atendimento', 'Atendente')} no n√∫mero {contexto_negocio.get('numero_whatsapp', 'N√£o especificado')}
                - Servi√ßos: {contexto_negocio.get('descricao_servicos', 'Servi√ßos diversos')}
                """
                
                # Construir instru√ß√µes baseadas nos campos solicitados
                instrucoes_campos = construir_instrucoes_campos(campos_analise, contexto_negocio)
                
                prompt_sistema = f"""
                Voc√™ √© um especialista em an√°lise de relacionamento cliente-empresa. Sua fun√ß√£o √© analisar conversas de WhatsApp entre clientes/prospects e empresas.

                {contexto_dinamico}

                DIRETRIZES GERAIS:
                - An√°lise baseada EXCLUSIVAMENTE nas mensagens WhatsApp fornecidas
                - N√ÉO fa√ßa suposi√ß√µes sobre atividades fora do canal WhatsApp
                - Sinalize quando dados s√£o inconclusivos ou podem existir atividades em outros canais
                - Use "N√£o identificado" quando a informa√ß√£o n√£o estiver dispon√≠vel
                - Use "Inconclusivo" quando os dados forem contradit√≥rios ou insuficientes

                INSTRU√á√ïES DETALHADAS POR CATEGORIA:
                {instrucoes_campos}

                FORMATO DE RESPOSTA:
                Retorne os dados em formato JSON estruturado, com todos os campos solicitados preenchidos.
                """
                
                prompt_usuario = f"""
                Analise esta conversa de WhatsApp:
                
                {conversa_texto}
                
                Extraia os atributos solicitados, focando em:
                1. Evolu√ß√£o do comportamento ao longo da conversa
                2. Sinais impl√≠citos de satisfa√ß√£o/insatisfa√ß√£o  
                3. Oportunidades identificadas
                4. Padr√µes de comunica√ß√£o e engajamento
                5. Precis√£o sobre limita√ß√µes dos dados (apenas WhatsApp)
                """
                
                # Fazer chamada para o LLM
                completion = client.beta.chat.completions.parse(
                    model=modelo,
                    messages=[
                        {"role": "system", "content": prompt_sistema},
                        {"role": "user", "content": prompt_usuario},
                    ],
                    response_format={"type": "json_object"},
                    temperature=temperatura
                )
                
                # Retornar resultado parseado
                resultado_json = completion.choices[0].message.content
                
                # Tentar parsear JSON
                import json
                try:
                    resultado_parseado = json.loads(resultado_json)
                    return {
                        "sucesso": True,
                        "dados": resultado_parseado,
                        "campos_analisados": campos_analise,
                        "contexto_usado": contexto_negocio,
                        "total_mensagens": len(conversa_objeto)
                    }
                except json.JSONDecodeError as e:
                    return {
                        "sucesso": False,
                        "erro": f"Erro ao parsear JSON: {str(e)}",
                        "resposta_bruta": resultado_json
                    }
                
            except Exception as e:
                return {
                    "sucesso": False,
                    "erro": f"Erro ao analisar conversa: {str(e)}",
                    "campos_analisados": campos_analise,
                    "contexto_usado": contexto_negocio
                }
        
        # === 5. EXECUTAR AN√ÅLISE QUALITATIVA ===
        resultado_analise = analisar_conversas_atributos_qualitativos(
            conversa_objeto=conversa_objeto,
            contexto_negocio=contexto_dict,
            client=client,
            campos_analise=request.campos_analise,
            modelo=modelo_usar,
            temperatura=request.temperatura
        )
        
        logger.info(f"‚úÖ An√°lise qualitativa conclu√≠da: {resultado_analise.get('sucesso')}")
        
        # === 6. RETORNAR ===
        return {
            'sucesso': True,
            'numero_telefone': request.numero_telefone,
            'periodo': {
                'data_hora_inicio': request.data_hora_inicio,
                'data_hora_fim': request.data_hora_fim
            },
            'parametros_llm': {
                'modelo': modelo_usar,
                'temperatura': request.temperatura,
                'campos_analisados': request.campos_analise or "padr√£o",
                'provider': "Maritaca AI"
            },
            'contexto_usado': contexto_dict,
            'analise': resultado_analise,
            'erro': None
        }
    
    except Exception as e:
        error_msg = f"Erro na an√°lise qualitativa: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        
        return {
            'sucesso': False,
            'numero_telefone': request.numero_telefone,
            'erro': error_msg,
            'analise': None
        }

@context_router.post("/obter-memoria-contexto")
async def endpoint_obter_memoria_contexto(request: AnaliseCompletaRequest):
    """
    üß† Obter Mem√≥ria Contexto - Fus√£o inteligente de dados quantitativos + qualitativos
    
    Executa an√°lises quantitativa e qualitativa em paralelo usando asyncio.gather() 
    e retorna uma fus√£o focada com insights correlacionados
    """
    
    logger = logging.getLogger(__name__)
    
    try:
        logger.info(f"üöÄ Obter mem√≥ria contexto iniciado: {request.numero_telefone}")
        
        # === PREPARAR REQUESTS PARA AS AN√ÅLISES ===
        
        # Request quantitativa
        request_quanti = AnaliseQuantitativaRequest(
            numero_telefone=request.numero_telefone,
            data_hora_inicio=request.data_hora_inicio,
            data_hora_fim=request.data_hora_fim,
            teto_minutos=request.teto_minutos or 30
        )
        
        # Request qualitativa (APENAS memoria_contexto para fus√£o focada)
        campos_quali = ["memoria_contexto"]
        
        request_quali = AnaliseQualitativaRequest(
            numero_telefone=request.numero_telefone,
            data_hora_inicio=request.data_hora_inicio,
            data_hora_fim=request.data_hora_fim,
            campos_analise=campos_quali,
            temperatura=request.temperatura or 0.1,
            modelo=request.modelo
        )
        
        # === EXECU√á√ÉO PARALELA COM ASYNCIO.GATHER ===
        
        logger.info("‚ö° Executando an√°lises em paralelo...")
        
        # Criar tasks
        task_quanti = asyncio.create_task(
            endpoint_analisar_conversa_atributos_quantitativos(request_quanti)
        )
        
        task_quali = asyncio.create_task(
            endpoint_analisar_conversa_atributos_qualitativos(request_quali)
        )
        
        # Executar em paralelo - return_exceptions=True para capturar erros
        resultado_quanti, resultado_quali = await asyncio.gather(
            task_quanti, task_quali, return_exceptions=True
        )
        
        # === VERIFICAR RESULTADOS ===
        
        # Verificar se houve exce√ß√µes
        erro_quanti = isinstance(resultado_quanti, Exception)
        erro_quali = isinstance(resultado_quali, Exception)
        
        if erro_quanti and erro_quali:
            return {
                'sucesso': False,
                'numero_telefone': request.numero_telefone,
                'erro': 'Ambas as an√°lises falharam',
                'erro_quantitativa': str(resultado_quanti),
                'erro_qualitativa': str(resultado_quali),
                'analise_completa': None
            }
        
        # === FUS√ÉO INTELIGENTE DOS RESULTADOS ===
        
        def fusionar_analises(quanti_result, quali_result):
            """Fusiona resultados das an√°lises quantitativa e qualitativa"""
            
            fusao = {
                'status_execucao': {
                    'quantitativa_sucesso': not erro_quanti and quanti_result.get('sucesso', False),
                    'qualitativa_sucesso': not erro_quali and quali_result.get('sucesso', False),
                    'timestamp_analise': datetime.now().isoformat()
                },
                'dados_quantitativos': {},
                'dados_qualitativos': {}
            }
            
            # === EXTRAIR DADOS QUANTITATIVOS (APENAS CAMPOS ESSENCIAIS) ===
            if not erro_quanti and quanti_result.get('sucesso'):
                stats = quanti_result.get('estatisticas', {})
                fusao['dados_quantitativos'] = {
                    'ultimo_remetente': stats.get('ultimo_remetente'),
                    'data_ultima_mensagem_cliente': stats.get('data_hora_ultima_mensagem_cliente'),
                    'data_ultima_mensagem_atendimento': stats.get('data_hora_ultima_mensagem_atendimento'),
                    'melhor_horario_envio': stats.get('melhor_horario_envio')
                }
            
            # === EXTRAIR DADOS QUALITATIVOS (APENAS MEMORIA_CONTEXTO) ===
            if not erro_quali and quali_result.get('sucesso'):
                analise = quali_result.get('analise', {})
                dados = analise.get('dados', {})
                fusao['dados_qualitativos'] = {
                    'resumo_interacoes': dados.get('resumo_interacoes_ate_o_momento'),
                    'tom_cliente': dados.get('tom_predominante_cliente'),
                    'status_cliente': dados.get('status_cliente_whatsapp'), 
                    'conversa_aberta': dados.get('conversa_em_aberto'),
                    'pendencia_com': dados.get('pendencia_com_quem')
                }
            
            return fusao
        
        # Executar fus√£o
        analise_fusionada = fusionar_analises(resultado_quanti, resultado_quali)
        
        logger.info(f"‚úÖ Mem√≥ria contexto obtida para {request.numero_telefone}")
        
        # === RETORNO ESTRUTURADO (S√ì O ESSENCIAL) ===
        return {
            'sucesso': True,
            'numero_telefone': request.numero_telefone,
            'timestamp_analise': datetime.now().isoformat(),
            'parametros': {
                'teto_minutos': request.teto_minutos or 30,
                'temperatura': request.temperatura or 0.1,
                'modelo': request.modelo
            },
            'memoria_contexto': analise_fusionada,
            'erro': None
        }
    
    except Exception as e:
        error_msg = f"Erro ao obter mem√≥ria contexto: {str(e)}"
        logger.error(f"‚ùå {error_msg}")
        
        return {
            'sucesso': False,
            'numero_telefone': request.numero_telefone,
            'erro': error_msg,
            'memoria_contexto': None
        }

# Inclua o roteador sem middlewares adicionais
app.include_router(
    chat_router, 
    prefix="/chat", 
    tags=["chat"]
)

app.include_router(
    debug_router,
    prefix="/debug",
    tags=["debug"]
)

app.include_router(
    activation_router,
    prefix="/activation", 
    tags=["activation"]
)

app.include_router(
    context_router,
    prefix="/context", 
    tags=["context"]
)



# Rota para verificar a sa√∫de da aplica√ß√£o
@app.get("/health", summary="Verificar sa√∫de da aplica√ß√£o")
async def health_check():
    return {"status": "ok", "timestamp": datetime.now().isoformat()}

